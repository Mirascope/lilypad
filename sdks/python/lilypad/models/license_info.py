# coding: utf-8

"""
    FastAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from lilypad.models.tier import Tier
from typing import Optional, Set
from typing_extensions import Self

class LicenseInfo(BaseModel):
    """
    Pydantic model for license validation
    """ # noqa: E501
    customer: StrictStr
    license_id: StrictStr
    expires_at: datetime
    tier: Tier
    organization_uuid: Optional[StrictStr]
    is_expired: StrictBool = Field(description="Check if the license has expired")
    __properties: ClassVar[List[str]] = ["customer", "license_id", "expires_at", "tier", "organization_uuid", "is_expired"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of LicenseInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "is_expired",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if organization_uuid (nullable) is None
        # and model_fields_set contains the field
        if self.organization_uuid is None and "organization_uuid" in self.model_fields_set:
            _dict['organization_uuid'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of LicenseInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "customer": obj.get("customer"),
            "license_id": obj.get("license_id"),
            "expires_at": obj.get("expires_at"),
            "tier": obj.get("tier"),
            "organization_uuid": obj.get("organization_uuid"),
            "is_expired": obj.get("is_expired")
        })
        return _obj


