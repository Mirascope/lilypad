# coding: utf-8

"""
    FastAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictFloat, StrictInt
from typing import Any, ClassVar, Dict, List, Optional, Union
from lilypad.models.stop import Stop
from typing import Optional, Set
from typing_extensions import Self

class CommonCallParams(BaseModel):
    """
    Common parameters shared across LLM providers.  Note: Each provider may handle these parameters differently or not support them at all. Please check provider-specific documentation for parameter support and behavior.  Attributes:     temperature: Controls randomness in the output (0.0 to 1.0).     max_tokens: Maximum number of tokens to generate.     top_p: Nucleus sampling parameter (0.0 to 1.0).     frequency_penalty: Penalizes frequent tokens (-2.0 to 2.0).     presence_penalty: Penalizes tokens based on presence (-2.0 to 2.0).     seed: Random seed for reproducibility.     stop: Stop sequence(s) to end generation.
    """ # noqa: E501
    temperature: Optional[Union[StrictFloat, StrictInt]] = None
    max_tokens: Optional[StrictInt] = None
    top_p: Optional[Union[StrictFloat, StrictInt]] = None
    frequency_penalty: Optional[Union[StrictFloat, StrictInt]] = None
    presence_penalty: Optional[Union[StrictFloat, StrictInt]] = None
    seed: Optional[StrictInt] = None
    stop: Optional[Stop] = None
    __properties: ClassVar[List[str]] = ["temperature", "max_tokens", "top_p", "frequency_penalty", "presence_penalty", "seed", "stop"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CommonCallParams from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of stop
        if self.stop:
            _dict['stop'] = self.stop.to_dict()
        # set to None if temperature (nullable) is None
        # and model_fields_set contains the field
        if self.temperature is None and "temperature" in self.model_fields_set:
            _dict['temperature'] = None

        # set to None if max_tokens (nullable) is None
        # and model_fields_set contains the field
        if self.max_tokens is None and "max_tokens" in self.model_fields_set:
            _dict['max_tokens'] = None

        # set to None if top_p (nullable) is None
        # and model_fields_set contains the field
        if self.top_p is None and "top_p" in self.model_fields_set:
            _dict['top_p'] = None

        # set to None if frequency_penalty (nullable) is None
        # and model_fields_set contains the field
        if self.frequency_penalty is None and "frequency_penalty" in self.model_fields_set:
            _dict['frequency_penalty'] = None

        # set to None if presence_penalty (nullable) is None
        # and model_fields_set contains the field
        if self.presence_penalty is None and "presence_penalty" in self.model_fields_set:
            _dict['presence_penalty'] = None

        # set to None if seed (nullable) is None
        # and model_fields_set contains the field
        if self.seed is None and "seed" in self.model_fields_set:
            _dict['seed'] = None

        # set to None if stop (nullable) is None
        # and model_fields_set contains the field
        if self.stop is None and "stop" in self.model_fields_set:
            _dict['stop'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CommonCallParams from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "temperature": obj.get("temperature"),
            "max_tokens": obj.get("max_tokens"),
            "top_p": obj.get("top_p"),
            "frequency_penalty": obj.get("frequency_penalty"),
            "presence_penalty": obj.get("presence_penalty"),
            "seed": obj.get("seed"),
            "stop": Stop.from_dict(obj["stop"]) if obj.get("stop") is not None else None
        })
        return _obj


