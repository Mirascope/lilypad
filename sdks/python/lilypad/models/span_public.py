# coding: utf-8

"""
    FastAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from lilypad.models.annotation_public import AnnotationPublic
from lilypad.models.function_public import FunctionPublic
from lilypad.models.scope import Scope
from lilypad.models.span_type import SpanType
from lilypad.models.tag_public import TagPublic
from typing import Optional, Set
from typing_extensions import Self

class SpanPublic(BaseModel):
    """
    Span public model
    """ # noqa: E501
    span_id: StrictStr
    function_uuid: Optional[StrictStr] = None
    type: Optional[SpanType] = None
    cost: Optional[Union[StrictFloat, StrictInt]] = None
    scope: Scope
    input_tokens: Optional[Union[StrictFloat, StrictInt]] = None
    output_tokens: Optional[Union[StrictFloat, StrictInt]] = None
    duration_ms: Optional[Union[StrictFloat, StrictInt]] = None
    data: Optional[Dict[str, Any]] = None
    parent_span_id: Optional[StrictStr] = None
    session_id: Optional[StrictStr] = None
    uuid: StrictStr
    project_uuid: StrictStr
    display_name: Optional[StrictStr] = None
    function: Optional[FunctionPublic]
    annotations: List[AnnotationPublic]
    child_spans: List[SpanPublic]
    created_at: datetime
    status: Optional[StrictStr] = None
    tags: List[TagPublic]
    score: Optional[Union[StrictFloat, StrictInt]] = None
    __properties: ClassVar[List[str]] = ["span_id", "function_uuid", "type", "cost", "scope", "input_tokens", "output_tokens", "duration_ms", "data", "parent_span_id", "session_id", "uuid", "project_uuid", "display_name", "function", "annotations", "child_spans", "created_at", "status", "tags", "score"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SpanPublic from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of function
        if self.function:
            _dict['function'] = self.function.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in annotations (list)
        _items = []
        if self.annotations:
            for _item_annotations in self.annotations:
                if _item_annotations:
                    _items.append(_item_annotations.to_dict())
            _dict['annotations'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in child_spans (list)
        _items = []
        if self.child_spans:
            for _item_child_spans in self.child_spans:
                if _item_child_spans:
                    _items.append(_item_child_spans.to_dict())
            _dict['child_spans'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in tags (list)
        _items = []
        if self.tags:
            for _item_tags in self.tags:
                if _item_tags:
                    _items.append(_item_tags.to_dict())
            _dict['tags'] = _items
        # set to None if function_uuid (nullable) is None
        # and model_fields_set contains the field
        if self.function_uuid is None and "function_uuid" in self.model_fields_set:
            _dict['function_uuid'] = None

        # set to None if type (nullable) is None
        # and model_fields_set contains the field
        if self.type is None and "type" in self.model_fields_set:
            _dict['type'] = None

        # set to None if cost (nullable) is None
        # and model_fields_set contains the field
        if self.cost is None and "cost" in self.model_fields_set:
            _dict['cost'] = None

        # set to None if input_tokens (nullable) is None
        # and model_fields_set contains the field
        if self.input_tokens is None and "input_tokens" in self.model_fields_set:
            _dict['input_tokens'] = None

        # set to None if output_tokens (nullable) is None
        # and model_fields_set contains the field
        if self.output_tokens is None and "output_tokens" in self.model_fields_set:
            _dict['output_tokens'] = None

        # set to None if duration_ms (nullable) is None
        # and model_fields_set contains the field
        if self.duration_ms is None and "duration_ms" in self.model_fields_set:
            _dict['duration_ms'] = None

        # set to None if parent_span_id (nullable) is None
        # and model_fields_set contains the field
        if self.parent_span_id is None and "parent_span_id" in self.model_fields_set:
            _dict['parent_span_id'] = None

        # set to None if session_id (nullable) is None
        # and model_fields_set contains the field
        if self.session_id is None and "session_id" in self.model_fields_set:
            _dict['session_id'] = None

        # set to None if display_name (nullable) is None
        # and model_fields_set contains the field
        if self.display_name is None and "display_name" in self.model_fields_set:
            _dict['display_name'] = None

        # set to None if function (nullable) is None
        # and model_fields_set contains the field
        if self.function is None and "function" in self.model_fields_set:
            _dict['function'] = None

        # set to None if status (nullable) is None
        # and model_fields_set contains the field
        if self.status is None and "status" in self.model_fields_set:
            _dict['status'] = None

        # set to None if score (nullable) is None
        # and model_fields_set contains the field
        if self.score is None and "score" in self.model_fields_set:
            _dict['score'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SpanPublic from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "span_id": obj.get("span_id"),
            "function_uuid": obj.get("function_uuid"),
            "type": obj.get("type"),
            "cost": obj.get("cost"),
            "scope": obj.get("scope"),
            "input_tokens": obj.get("input_tokens"),
            "output_tokens": obj.get("output_tokens"),
            "duration_ms": obj.get("duration_ms"),
            "data": obj.get("data"),
            "parent_span_id": obj.get("parent_span_id"),
            "session_id": obj.get("session_id"),
            "uuid": obj.get("uuid"),
            "project_uuid": obj.get("project_uuid"),
            "display_name": obj.get("display_name"),
            "function": FunctionPublic.from_dict(obj["function"]) if obj.get("function") is not None else None,
            "annotations": [AnnotationPublic.from_dict(_item) for _item in obj["annotations"]] if obj.get("annotations") is not None else None,
            "child_spans": [SpanPublic.from_dict(_item) for _item in obj["child_spans"]] if obj.get("child_spans") is not None else None,
            "created_at": obj.get("created_at"),
            "status": obj.get("status"),
            "tags": [TagPublic.from_dict(_item) for _item in obj["tags"]] if obj.get("tags") is not None else None,
            "score": obj.get("score")
        })
        return _obj

# TODO: Rewrite to not use raise_errors
SpanPublic.model_rebuild(raise_errors=False)

