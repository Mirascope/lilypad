# coding: utf-8

"""
    FastAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from lilypad.models.environment_public import EnvironmentPublic
from lilypad.models.project_public import ProjectPublic
from lilypad.models.user_public import UserPublic
from typing import Optional, Set
from typing_extensions import Self

class APIKeyPublic(BaseModel):
    """
    API key public model
    """ # noqa: E501
    name: Annotated[str, Field(min_length=1, strict=True)]
    expires_at: Optional[datetime] = None
    project_uuid: StrictStr
    environment_uuid: Optional[StrictStr] = None
    uuid: StrictStr
    key_hash: StrictStr
    user: UserPublic
    project: ProjectPublic
    environment: EnvironmentPublic
    __properties: ClassVar[List[str]] = ["name", "expires_at", "project_uuid", "environment_uuid", "uuid", "key_hash", "user", "project", "environment"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of APIKeyPublic from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of user
        if self.user:
            _dict['user'] = self.user.to_dict()
        # override the default output from pydantic by calling `to_dict()` of project
        if self.project:
            _dict['project'] = self.project.to_dict()
        # override the default output from pydantic by calling `to_dict()` of environment
        if self.environment:
            _dict['environment'] = self.environment.to_dict()
        # set to None if environment_uuid (nullable) is None
        # and model_fields_set contains the field
        if self.environment_uuid is None and "environment_uuid" in self.model_fields_set:
            _dict['environment_uuid'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of APIKeyPublic from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": obj.get("name"),
            "expires_at": obj.get("expires_at"),
            "project_uuid": obj.get("project_uuid"),
            "environment_uuid": obj.get("environment_uuid"),
            "uuid": obj.get("uuid"),
            "key_hash": obj.get("key_hash"),
            "user": UserPublic.from_dict(obj["user"]) if obj.get("user") is not None else None,
            "project": ProjectPublic.from_dict(obj["project"]) if obj.get("project") is not None else None,
            "environment": EnvironmentPublic.from_dict(obj["environment"]) if obj.get("environment") is not None else None
        })
        return _obj


