# coding: utf-8

"""
    FastAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from lilypad.models.evaluation_type import EvaluationType
from lilypad.models.label import Label
from typing import Optional, Set
from typing_extensions import Self

class AnnotationCreate(BaseModel):
    """
    Annotation create model.
    """ # noqa: E501
    span_uuid: Optional[StrictStr] = None
    project_uuid: Optional[StrictStr] = None
    function_uuid: Optional[StrictStr] = None
    label: Optional[Label] = None
    reasoning: Optional[StrictStr] = None
    type: Optional[EvaluationType] = None
    data: Optional[Dict[str, Any]] = None
    assigned_to: Optional[List[StrictStr]] = None
    assignee_email: Optional[List[StrictStr]] = None
    __properties: ClassVar[List[str]] = ["span_uuid", "project_uuid", "function_uuid", "label", "reasoning", "type", "data", "assigned_to", "assignee_email"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AnnotationCreate from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if span_uuid (nullable) is None
        # and model_fields_set contains the field
        if self.span_uuid is None and "span_uuid" in self.model_fields_set:
            _dict['span_uuid'] = None

        # set to None if project_uuid (nullable) is None
        # and model_fields_set contains the field
        if self.project_uuid is None and "project_uuid" in self.model_fields_set:
            _dict['project_uuid'] = None

        # set to None if function_uuid (nullable) is None
        # and model_fields_set contains the field
        if self.function_uuid is None and "function_uuid" in self.model_fields_set:
            _dict['function_uuid'] = None

        # set to None if label (nullable) is None
        # and model_fields_set contains the field
        if self.label is None and "label" in self.model_fields_set:
            _dict['label'] = None

        # set to None if reasoning (nullable) is None
        # and model_fields_set contains the field
        if self.reasoning is None and "reasoning" in self.model_fields_set:
            _dict['reasoning'] = None

        # set to None if type (nullable) is None
        # and model_fields_set contains the field
        if self.type is None and "type" in self.model_fields_set:
            _dict['type'] = None

        # set to None if data (nullable) is None
        # and model_fields_set contains the field
        if self.data is None and "data" in self.model_fields_set:
            _dict['data'] = None

        # set to None if assigned_to (nullable) is None
        # and model_fields_set contains the field
        if self.assigned_to is None and "assigned_to" in self.model_fields_set:
            _dict['assigned_to'] = None

        # set to None if assignee_email (nullable) is None
        # and model_fields_set contains the field
        if self.assignee_email is None and "assignee_email" in self.model_fields_set:
            _dict['assignee_email'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AnnotationCreate from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "span_uuid": obj.get("span_uuid"),
            "project_uuid": obj.get("project_uuid"),
            "function_uuid": obj.get("function_uuid"),
            "label": obj.get("label"),
            "reasoning": obj.get("reasoning"),
            "type": obj.get("type"),
            "data": obj.get("data"),
            "assigned_to": obj.get("assigned_to"),
            "assignee_email": obj.get("assignee_email")
        })
        return _obj


