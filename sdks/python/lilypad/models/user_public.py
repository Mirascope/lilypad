# coding: utf-8

"""
    FastAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from lilypad.models.user_consent_public import UserConsentPublic
from lilypad.models.user_organization_public import UserOrganizationPublic
from typing import Optional, Set
from typing_extensions import Self

class UserPublic(BaseModel):
    """
    User public model
    """ # noqa: E501
    first_name: Annotated[str, Field(min_length=1, strict=True)]
    last_name: Optional[StrictStr] = None
    email: Annotated[str, Field(min_length=1, strict=True)]
    active_organization_uuid: Optional[StrictStr] = None
    keys: Optional[Dict[str, StrictStr]] = None
    uuid: StrictStr
    access_token: Optional[StrictStr] = None
    user_organizations: Optional[List[UserOrganizationPublic]] = None
    scopes: Optional[List[StrictStr]] = None
    user_consents: Optional[UserConsentPublic] = None
    __properties: ClassVar[List[str]] = ["first_name", "last_name", "email", "active_organization_uuid", "keys", "uuid", "access_token", "user_organizations", "scopes", "user_consents"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UserPublic from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in user_organizations (list)
        _items = []
        if self.user_organizations:
            for _item_user_organizations in self.user_organizations:
                if _item_user_organizations:
                    _items.append(_item_user_organizations.to_dict())
            _dict['user_organizations'] = _items
        # override the default output from pydantic by calling `to_dict()` of user_consents
        if self.user_consents:
            _dict['user_consents'] = self.user_consents.to_dict()
        # set to None if last_name (nullable) is None
        # and model_fields_set contains the field
        if self.last_name is None and "last_name" in self.model_fields_set:
            _dict['last_name'] = None

        # set to None if active_organization_uuid (nullable) is None
        # and model_fields_set contains the field
        if self.active_organization_uuid is None and "active_organization_uuid" in self.model_fields_set:
            _dict['active_organization_uuid'] = None

        # set to None if access_token (nullable) is None
        # and model_fields_set contains the field
        if self.access_token is None and "access_token" in self.model_fields_set:
            _dict['access_token'] = None

        # set to None if user_organizations (nullable) is None
        # and model_fields_set contains the field
        if self.user_organizations is None and "user_organizations" in self.model_fields_set:
            _dict['user_organizations'] = None

        # set to None if user_consents (nullable) is None
        # and model_fields_set contains the field
        if self.user_consents is None and "user_consents" in self.model_fields_set:
            _dict['user_consents'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UserPublic from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "first_name": obj.get("first_name"),
            "last_name": obj.get("last_name"),
            "email": obj.get("email"),
            "active_organization_uuid": obj.get("active_organization_uuid"),
            "keys": obj.get("keys"),
            "uuid": obj.get("uuid"),
            "access_token": obj.get("access_token"),
            "user_organizations": [UserOrganizationPublic.from_dict(_item) for _item in obj["user_organizations"]] if obj.get("user_organizations") is not None else None,
            "scopes": obj.get("scopes"),
            "user_consents": UserConsentPublic.from_dict(obj["user_consents"]) if obj.get("user_consents") is not None else None
        })
        return _obj


