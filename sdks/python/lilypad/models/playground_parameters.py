# coding: utf-8

"""
    FastAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from lilypad.models.arg_values_value import ArgValuesValue
from lilypad.models.common_call_params import CommonCallParams
from lilypad.models.provider import Provider
from typing import Optional, Set
from typing_extensions import Self

class PlaygroundParameters(BaseModel):
    """
    Playground parameters model.
    """ # noqa: E501
    arg_values: Dict[str, ArgValuesValue]
    arg_types: Optional[Dict[str, StrictStr]]
    provider: Provider
    model: StrictStr
    prompt_template: StrictStr
    call_params: Optional[CommonCallParams]
    __properties: ClassVar[List[str]] = ["arg_values", "arg_types", "provider", "model", "prompt_template", "call_params"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PlaygroundParameters from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each value in arg_values (dict)
        _field_dict = {}
        if self.arg_values:
            for _key_arg_values in self.arg_values:
                if self.arg_values[_key_arg_values]:
                    _field_dict[_key_arg_values] = self.arg_values[_key_arg_values].to_dict()
            _dict['arg_values'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of call_params
        if self.call_params:
            _dict['call_params'] = self.call_params.to_dict()
        # set to None if arg_types (nullable) is None
        # and model_fields_set contains the field
        if self.arg_types is None and "arg_types" in self.model_fields_set:
            _dict['arg_types'] = None

        # set to None if call_params (nullable) is None
        # and model_fields_set contains the field
        if self.call_params is None and "call_params" in self.model_fields_set:
            _dict['call_params'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PlaygroundParameters from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "arg_values": dict(
                (_k, ArgValuesValue.from_dict(_v))
                for _k, _v in obj["arg_values"].items()
            )
            if obj.get("arg_values") is not None
            else None,
            "arg_types": obj.get("arg_types"),
            "provider": obj.get("provider"),
            "model": obj.get("model"),
            "prompt_template": obj.get("prompt_template"),
            "call_params": CommonCallParams.from_dict(obj["call_params"]) if obj.get("call_params") is not None else None
        })
        return _obj


