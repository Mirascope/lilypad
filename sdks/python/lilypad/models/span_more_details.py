# coding: utf-8

"""
    FastAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from lilypad.models.event import Event
from lilypad.models.message_param import MessageParam
from lilypad.models.scope import Scope
from lilypad.models.tag_public import TagPublic
from typing import Optional, Set
from typing_extensions import Self

class SpanMoreDetails(BaseModel):
    """
    Span more details model.
    """ # noqa: E501
    uuid: StrictStr
    project_uuid: StrictStr
    function_uuid: Optional[StrictStr] = None
    display_name: StrictStr
    provider: StrictStr
    model: StrictStr
    scope: Scope
    input_tokens: Optional[Union[StrictFloat, StrictInt]] = None
    output_tokens: Optional[Union[StrictFloat, StrictInt]] = None
    duration_ms: Optional[Union[StrictFloat, StrictInt]] = None
    signature: Optional[StrictStr] = None
    code: Optional[StrictStr] = None
    arg_values: Optional[Dict[str, Any]] = None
    output: Optional[StrictStr] = None
    messages: List[MessageParam]
    data: Dict[str, Any]
    cost: Optional[Union[StrictFloat, StrictInt]] = None
    template: Optional[StrictStr] = None
    status: Optional[StrictStr] = None
    events: Optional[List[Event]] = None
    tags: Optional[List[TagPublic]] = None
    session_id: Optional[StrictStr] = None
    span_id: StrictStr
    response: Optional[Dict[str, Any]] = None
    response_model: Optional[Dict[str, Any]] = None
    __properties: ClassVar[List[str]] = ["uuid", "project_uuid", "function_uuid", "display_name", "provider", "model", "scope", "input_tokens", "output_tokens", "duration_ms", "signature", "code", "arg_values", "output", "messages", "data", "cost", "template", "status", "events", "tags", "session_id", "span_id", "response", "response_model"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SpanMoreDetails from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in messages (list)
        _items = []
        if self.messages:
            for _item_messages in self.messages:
                if _item_messages:
                    _items.append(_item_messages.to_dict())
            _dict['messages'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in events (list)
        _items = []
        if self.events:
            for _item_events in self.events:
                if _item_events:
                    _items.append(_item_events.to_dict())
            _dict['events'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in tags (list)
        _items = []
        if self.tags:
            for _item_tags in self.tags:
                if _item_tags:
                    _items.append(_item_tags.to_dict())
            _dict['tags'] = _items
        # set to None if function_uuid (nullable) is None
        # and model_fields_set contains the field
        if self.function_uuid is None and "function_uuid" in self.model_fields_set:
            _dict['function_uuid'] = None

        # set to None if input_tokens (nullable) is None
        # and model_fields_set contains the field
        if self.input_tokens is None and "input_tokens" in self.model_fields_set:
            _dict['input_tokens'] = None

        # set to None if output_tokens (nullable) is None
        # and model_fields_set contains the field
        if self.output_tokens is None and "output_tokens" in self.model_fields_set:
            _dict['output_tokens'] = None

        # set to None if duration_ms (nullable) is None
        # and model_fields_set contains the field
        if self.duration_ms is None and "duration_ms" in self.model_fields_set:
            _dict['duration_ms'] = None

        # set to None if signature (nullable) is None
        # and model_fields_set contains the field
        if self.signature is None and "signature" in self.model_fields_set:
            _dict['signature'] = None

        # set to None if code (nullable) is None
        # and model_fields_set contains the field
        if self.code is None and "code" in self.model_fields_set:
            _dict['code'] = None

        # set to None if arg_values (nullable) is None
        # and model_fields_set contains the field
        if self.arg_values is None and "arg_values" in self.model_fields_set:
            _dict['arg_values'] = None

        # set to None if output (nullable) is None
        # and model_fields_set contains the field
        if self.output is None and "output" in self.model_fields_set:
            _dict['output'] = None

        # set to None if cost (nullable) is None
        # and model_fields_set contains the field
        if self.cost is None and "cost" in self.model_fields_set:
            _dict['cost'] = None

        # set to None if template (nullable) is None
        # and model_fields_set contains the field
        if self.template is None and "template" in self.model_fields_set:
            _dict['template'] = None

        # set to None if status (nullable) is None
        # and model_fields_set contains the field
        if self.status is None and "status" in self.model_fields_set:
            _dict['status'] = None

        # set to None if events (nullable) is None
        # and model_fields_set contains the field
        if self.events is None and "events" in self.model_fields_set:
            _dict['events'] = None

        # set to None if tags (nullable) is None
        # and model_fields_set contains the field
        if self.tags is None and "tags" in self.model_fields_set:
            _dict['tags'] = None

        # set to None if session_id (nullable) is None
        # and model_fields_set contains the field
        if self.session_id is None and "session_id" in self.model_fields_set:
            _dict['session_id'] = None

        # set to None if response (nullable) is None
        # and model_fields_set contains the field
        if self.response is None and "response" in self.model_fields_set:
            _dict['response'] = None

        # set to None if response_model (nullable) is None
        # and model_fields_set contains the field
        if self.response_model is None and "response_model" in self.model_fields_set:
            _dict['response_model'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SpanMoreDetails from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "uuid": obj.get("uuid"),
            "project_uuid": obj.get("project_uuid"),
            "function_uuid": obj.get("function_uuid"),
            "display_name": obj.get("display_name"),
            "provider": obj.get("provider"),
            "model": obj.get("model"),
            "scope": obj.get("scope"),
            "input_tokens": obj.get("input_tokens"),
            "output_tokens": obj.get("output_tokens"),
            "duration_ms": obj.get("duration_ms"),
            "signature": obj.get("signature"),
            "code": obj.get("code"),
            "arg_values": obj.get("arg_values"),
            "output": obj.get("output"),
            "messages": [MessageParam.from_dict(_item) for _item in obj["messages"]] if obj.get("messages") is not None else None,
            "data": obj.get("data"),
            "cost": obj.get("cost"),
            "template": obj.get("template"),
            "status": obj.get("status"),
            "events": [Event.from_dict(_item) for _item in obj["events"]] if obj.get("events") is not None else None,
            "tags": [TagPublic.from_dict(_item) for _item in obj["tags"]] if obj.get("tags") is not None else None,
            "session_id": obj.get("session_id"),
            "span_id": obj.get("span_id"),
            "response": obj.get("response"),
            "response_model": obj.get("response_model")
        })
        return _obj


