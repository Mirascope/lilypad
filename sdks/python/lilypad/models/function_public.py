# coding: utf-8

"""
    FastAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from lilypad.models.common_call_params import CommonCallParams
from lilypad.models.dependency_info import DependencyInfo
from typing import Optional, Set
from typing_extensions import Self

class FunctionPublic(BaseModel):
    """
    Function public model.
    """ # noqa: E501
    project_uuid: Optional[StrictStr] = None
    version_num: Optional[StrictInt] = None
    name: Annotated[str, Field(min_length=1, strict=True, max_length=512)]
    signature: StrictStr
    code: StrictStr
    hash: StrictStr
    dependencies: Optional[Dict[str, DependencyInfo]] = None
    arg_types: Optional[Dict[str, StrictStr]] = None
    archived: Optional[datetime] = None
    custom_id: Optional[StrictStr] = None
    prompt_template: Optional[StrictStr] = None
    provider: Optional[StrictStr] = None
    model: Optional[StrictStr] = None
    call_params: Optional[CommonCallParams] = None
    is_versioned: Optional[StrictBool] = None
    uuid: StrictStr
    __properties: ClassVar[List[str]] = ["project_uuid", "version_num", "name", "signature", "code", "hash", "dependencies", "arg_types", "archived", "custom_id", "prompt_template", "provider", "model", "call_params", "is_versioned", "uuid"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of FunctionPublic from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each value in dependencies (dict)
        _field_dict = {}
        if self.dependencies:
            for _key_dependencies in self.dependencies:
                if self.dependencies[_key_dependencies]:
                    _field_dict[_key_dependencies] = self.dependencies[_key_dependencies].to_dict()
            _dict['dependencies'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of call_params
        if self.call_params:
            _dict['call_params'] = self.call_params.to_dict()
        # set to None if project_uuid (nullable) is None
        # and model_fields_set contains the field
        if self.project_uuid is None and "project_uuid" in self.model_fields_set:
            _dict['project_uuid'] = None

        # set to None if version_num (nullable) is None
        # and model_fields_set contains the field
        if self.version_num is None and "version_num" in self.model_fields_set:
            _dict['version_num'] = None

        # set to None if archived (nullable) is None
        # and model_fields_set contains the field
        if self.archived is None and "archived" in self.model_fields_set:
            _dict['archived'] = None

        # set to None if custom_id (nullable) is None
        # and model_fields_set contains the field
        if self.custom_id is None and "custom_id" in self.model_fields_set:
            _dict['custom_id'] = None

        # set to None if prompt_template (nullable) is None
        # and model_fields_set contains the field
        if self.prompt_template is None and "prompt_template" in self.model_fields_set:
            _dict['prompt_template'] = None

        # set to None if provider (nullable) is None
        # and model_fields_set contains the field
        if self.provider is None and "provider" in self.model_fields_set:
            _dict['provider'] = None

        # set to None if model (nullable) is None
        # and model_fields_set contains the field
        if self.model is None and "model" in self.model_fields_set:
            _dict['model'] = None

        # set to None if is_versioned (nullable) is None
        # and model_fields_set contains the field
        if self.is_versioned is None and "is_versioned" in self.model_fields_set:
            _dict['is_versioned'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of FunctionPublic from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "project_uuid": obj.get("project_uuid"),
            "version_num": obj.get("version_num"),
            "name": obj.get("name"),
            "signature": obj.get("signature"),
            "code": obj.get("code"),
            "hash": obj.get("hash"),
            "dependencies": dict(
                (_k, DependencyInfo.from_dict(_v))
                for _k, _v in obj["dependencies"].items()
            )
            if obj.get("dependencies") is not None
            else None,
            "arg_types": obj.get("arg_types"),
            "archived": obj.get("archived"),
            "custom_id": obj.get("custom_id"),
            "prompt_template": obj.get("prompt_template"),
            "provider": obj.get("provider"),
            "model": obj.get("model"),
            "call_params": CommonCallParams.from_dict(obj["call_params"]) if obj.get("call_params") is not None else None,
            "is_versioned": obj.get("is_versioned"),
            "uuid": obj.get("uuid")
        })
        return _obj


