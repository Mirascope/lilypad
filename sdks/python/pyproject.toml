[project]
name = "lilypad-sdk"
version = "1.0.0-alpha.0"
description = "The official Python library for the Lilypad API"
readme = "README.md"
authors = [{ name = "Mirascope", email = "support@mirascope.com" }]
requires-python = ">=3.10"
classifiers = [
    "Typing :: Typed",
    "Intended Audience :: Developers",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Operating System :: OS Independent",
    "Operating System :: POSIX",
    "Operating System :: MacOS",
    "Operating System :: POSIX :: Linux",
    "Operating System :: Microsoft :: Windows",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
dependencies = [
    "httpx>=0.28.1",
    "opentelemetry-api>=1.36.0",
    "opentelemetry-instrumentation>=0.57b0",
    "opentelemetry-sdk>=1.36.0",
    "orjson>=3.10.0",
    "rich>=13.0.0",
    "wrapt>=1.17.2",
]

[project.optional-dependencies]
openai = ["openai>=1.98.0"]
anthropic = ["anthropic>=0.63.0"]
google = ["google-genai>=1.30.0,<2", "pillow>=10.4.0,<12", "proto-plus>=1.26.1"]
azure = ["azure-ai-inference>=1.0.0b9", "aiohttp>=3.8.0"]
mistral = [
    "mistralai>=1.0.0",
]

[dependency-groups]
dev = ["pyright>=1.1.403", "ruff>=0.12.7", "pre-commit>=3.5.0"]
test = [
    "pytest>=8.0.0",
    "pytest-asyncio>=0.23.0",
    "pytest-cov>=4.1.0",
    "vcrpy>=7.0.0",
    "pytest-vcr>=1.0.2",
    "inline-snapshot>=0.23.0",
    "python-dotenv>=1.1.1",
]
examples = ["openai>=1.98.0", "anthropic>=0.63.0", "google-genai>=1.7.0,<2", "azure-ai-inference>=1.0.0b9", "aiohttp>=3.8.0", "mistralai>=1.0.0"]

[build-system]
requires = ["uv_build>=0.8.4,<0.9.0"]
build-backend = "uv_build"

[tool.uv.build-backend]
module-name = "lilypad"

[tool.ruff]
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
    "examples",
]
line-length = 88
output-format = "grouped"
target-version = "py310"

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]
"tests/**.py" = ["T201", "T203", "ANN", "UP007"]
"examples/**.py" = ["T201", "T203"]

[tool.ruff.lint]
select = [
    "E",
    "F",
    "I",
    "UP",
    "YTT",
    "B",
    "T10",
    "T20",
    "C4",
    "PYI006",
    "SIM",
    "ANN",
    "RUF022",
]
ignore = [
    'D105',
    'D107',
    'D205',
    'D415',
    'E501',
    'B011',
    'B028',
    'B904',
    'ANN401',
    'UP007',
    'UP035',
    'UP006',
    'ANN204',
    'I001',
    'UP037',
    'UP038',
    'E722',
    'E721',
    'E711',
    'SIM101',
    'SIM102',
    'SIM108',
    'E402',
    'F841',
]
fixable = ["ALL"]
pydocstyle = { convention = 'google' }
unfixable = []
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"
docstring-code-format = true

[tool.ruff.lint.flake8-tidy-imports.banned-api]
"functools.lru_cache".msg = "This function does not retain type information for the wrapped function's arguments; The `lru_cache` function from `_utils` should be used instead"

[tool.ruff.lint.isort]
length-sort = true
length-sort-straight = true
combine-as-imports = true
extra-standard-library = ["typing_extensions"]
known-first-party = ["lilypad", "tests"]

[tool.pyright]
pythonVersion = "3.10"
venvPath = "."
venv = ".venv"
include = ["src", "tests", "examples"]

[tool.pytest.ini_options]
testpaths = ["tests"]
addopts = ["-v"]
asyncio_mode = "auto"
markers = ["vcr: Mark test to use VCR.py for HTTP request recording/playback"]

[tool.inline-snapshot]
format-command="ruff check --fix-only --stdin-filename {filename} | ruff format --stdin-filename {filename}"

[tool.coverage.run]
branch = false
source = ["src/lilypad"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if __name__ == .__main__.:",
    "raise NotImplementedError",
    "pass",
    "except ImportError:",
]
exclude_also = ["@overload", "@abstractmethod", "if TYPE_CHECKING:"]
precision = 2
show_missing = true
