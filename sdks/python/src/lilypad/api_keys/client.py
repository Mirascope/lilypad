# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.request_options import RequestOptions
from ..types.api_key_public import ApiKeyPublic
from .raw_client import AsyncRawApiKeysClient, RawApiKeysClient

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class ApiKeysClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawApiKeysClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawApiKeysClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawApiKeysClient
        """
        return self._raw_client

    def list(self, *, request_options: typing.Optional[RequestOptions] = None) -> typing.List[ApiKeyPublic]:
        """
        Get an API keys.

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[ApiKeyPublic]
            Successful Response

        Examples
        --------
        from mirascope import Lilypad

        client = Lilypad(
            api_key="YOUR_API_KEY",
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )
        client.api_keys.list()
        """
        _response = self._raw_client.list(request_options=request_options)
        return _response.data

    def create(
        self,
        *,
        name: str,
        project_uuid: str,
        expires_at: typing.Optional[dt.datetime] = OMIT,
        environment_uuid: typing.Optional[str] = OMIT,
        key_hash: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> str:
        """
        Create an API key and returns the full key.

        Parameters
        ----------
        name : str

        project_uuid : str

        expires_at : typing.Optional[dt.datetime]

        environment_uuid : typing.Optional[str]

        key_hash : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        str
            Successful Response

        Examples
        --------
        from mirascope import Lilypad

        client = Lilypad(
            api_key="YOUR_API_KEY",
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )
        client.api_keys.create(
            name="name",
            project_uuid="project_uuid",
        )
        """
        _response = self._raw_client.create(
            name=name,
            project_uuid=project_uuid,
            expires_at=expires_at,
            environment_uuid=environment_uuid,
            key_hash=key_hash,
            request_options=request_options,
        )
        return _response.data

    def delete(self, api_key_uuid: str, *, request_options: typing.Optional[RequestOptions] = None) -> bool:
        """
        Delete an API key.

        Parameters
        ----------
        api_key_uuid : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        bool
            Successful Response

        Examples
        --------
        from mirascope import Lilypad

        client = Lilypad(
            api_key="YOUR_API_KEY",
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )
        client.api_keys.delete(
            api_key_uuid="api_key_uuid",
        )
        """
        _response = self._raw_client.delete(api_key_uuid, request_options=request_options)
        return _response.data


class AsyncApiKeysClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawApiKeysClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawApiKeysClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawApiKeysClient
        """
        return self._raw_client

    async def list(self, *, request_options: typing.Optional[RequestOptions] = None) -> typing.List[ApiKeyPublic]:
        """
        Get an API keys.

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[ApiKeyPublic]
            Successful Response

        Examples
        --------
        import asyncio

        from mirascope import AsyncLilypad

        client = AsyncLilypad(
            api_key="YOUR_API_KEY",
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.api_keys.list()


        asyncio.run(main())
        """
        _response = await self._raw_client.list(request_options=request_options)
        return _response.data

    async def create(
        self,
        *,
        name: str,
        project_uuid: str,
        expires_at: typing.Optional[dt.datetime] = OMIT,
        environment_uuid: typing.Optional[str] = OMIT,
        key_hash: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> str:
        """
        Create an API key and returns the full key.

        Parameters
        ----------
        name : str

        project_uuid : str

        expires_at : typing.Optional[dt.datetime]

        environment_uuid : typing.Optional[str]

        key_hash : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        str
            Successful Response

        Examples
        --------
        import asyncio

        from mirascope import AsyncLilypad

        client = AsyncLilypad(
            api_key="YOUR_API_KEY",
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.api_keys.create(
                name="name",
                project_uuid="project_uuid",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.create(
            name=name,
            project_uuid=project_uuid,
            expires_at=expires_at,
            environment_uuid=environment_uuid,
            key_hash=key_hash,
            request_options=request_options,
        )
        return _response.data

    async def delete(self, api_key_uuid: str, *, request_options: typing.Optional[RequestOptions] = None) -> bool:
        """
        Delete an API key.

        Parameters
        ----------
        api_key_uuid : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        bool
            Successful Response

        Examples
        --------
        import asyncio

        from mirascope import AsyncLilypad

        client = AsyncLilypad(
            api_key="YOUR_API_KEY",
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.api_keys.delete(
                api_key_uuid="api_key_uuid",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.delete(api_key_uuid, request_options=request_options)
        return _response.data
