# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.request_options import RequestOptions
from ..types.user_consent_public import UserConsentPublic
from .raw_client import AsyncRawUserConsentsClient, RawUserConsentsClient

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class UserConsentsClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawUserConsentsClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawUserConsentsClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawUserConsentsClient
        """
        return self._raw_client

    def create(
        self,
        *,
        privacy_policy_version: str,
        tos_version: str,
        privacy_policy_accepted_at: typing.Optional[dt.datetime] = OMIT,
        tos_accepted_at: typing.Optional[dt.datetime] = OMIT,
        user_uuid: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> UserConsentPublic:
        """
        Store user consent.

        Parameters
        ----------
        privacy_policy_version : str

        tos_version : str

        privacy_policy_accepted_at : typing.Optional[dt.datetime]

        tos_accepted_at : typing.Optional[dt.datetime]

        user_uuid : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        UserConsentPublic
            Successful Response

        Examples
        --------
        from mirascope import Lilypad

        client = Lilypad(
            api_key="YOUR_API_KEY",
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )
        client.user_consents.create(
            privacy_policy_version="privacy_policy_version",
            tos_version="tos_version",
        )
        """
        _response = self._raw_client.create(
            privacy_policy_version=privacy_policy_version,
            tos_version=tos_version,
            privacy_policy_accepted_at=privacy_policy_accepted_at,
            tos_accepted_at=tos_accepted_at,
            user_uuid=user_uuid,
            request_options=request_options,
        )
        return _response.data

    def update(
        self,
        user_consent_uuid: str,
        *,
        privacy_policy_version: typing.Optional[str] = OMIT,
        privacy_policy_accepted_at: typing.Optional[dt.datetime] = OMIT,
        tos_version: typing.Optional[str] = OMIT,
        tos_accepted_at: typing.Optional[dt.datetime] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> UserConsentPublic:
        """
        Update user consent.

        Parameters
        ----------
        user_consent_uuid : str

        privacy_policy_version : typing.Optional[str]

        privacy_policy_accepted_at : typing.Optional[dt.datetime]

        tos_version : typing.Optional[str]

        tos_accepted_at : typing.Optional[dt.datetime]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        UserConsentPublic
            Successful Response

        Examples
        --------
        from mirascope import Lilypad

        client = Lilypad(
            api_key="YOUR_API_KEY",
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )
        client.user_consents.update(
            user_consent_uuid="user_consent_uuid",
        )
        """
        _response = self._raw_client.update(
            user_consent_uuid,
            privacy_policy_version=privacy_policy_version,
            privacy_policy_accepted_at=privacy_policy_accepted_at,
            tos_version=tos_version,
            tos_accepted_at=tos_accepted_at,
            request_options=request_options,
        )
        return _response.data


class AsyncUserConsentsClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawUserConsentsClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawUserConsentsClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawUserConsentsClient
        """
        return self._raw_client

    async def create(
        self,
        *,
        privacy_policy_version: str,
        tos_version: str,
        privacy_policy_accepted_at: typing.Optional[dt.datetime] = OMIT,
        tos_accepted_at: typing.Optional[dt.datetime] = OMIT,
        user_uuid: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> UserConsentPublic:
        """
        Store user consent.

        Parameters
        ----------
        privacy_policy_version : str

        tos_version : str

        privacy_policy_accepted_at : typing.Optional[dt.datetime]

        tos_accepted_at : typing.Optional[dt.datetime]

        user_uuid : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        UserConsentPublic
            Successful Response

        Examples
        --------
        import asyncio

        from mirascope import AsyncLilypad

        client = AsyncLilypad(
            api_key="YOUR_API_KEY",
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.user_consents.create(
                privacy_policy_version="privacy_policy_version",
                tos_version="tos_version",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.create(
            privacy_policy_version=privacy_policy_version,
            tos_version=tos_version,
            privacy_policy_accepted_at=privacy_policy_accepted_at,
            tos_accepted_at=tos_accepted_at,
            user_uuid=user_uuid,
            request_options=request_options,
        )
        return _response.data

    async def update(
        self,
        user_consent_uuid: str,
        *,
        privacy_policy_version: typing.Optional[str] = OMIT,
        privacy_policy_accepted_at: typing.Optional[dt.datetime] = OMIT,
        tos_version: typing.Optional[str] = OMIT,
        tos_accepted_at: typing.Optional[dt.datetime] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> UserConsentPublic:
        """
        Update user consent.

        Parameters
        ----------
        user_consent_uuid : str

        privacy_policy_version : typing.Optional[str]

        privacy_policy_accepted_at : typing.Optional[dt.datetime]

        tos_version : typing.Optional[str]

        tos_accepted_at : typing.Optional[dt.datetime]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        UserConsentPublic
            Successful Response

        Examples
        --------
        import asyncio

        from mirascope import AsyncLilypad

        client = AsyncLilypad(
            api_key="YOUR_API_KEY",
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.user_consents.update(
                user_consent_uuid="user_consent_uuid",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.update(
            user_consent_uuid,
            privacy_policy_version=privacy_policy_version,
            privacy_policy_accepted_at=privacy_policy_accepted_at,
            tos_version=tos_version,
            tos_accepted_at=tos_accepted_at,
            request_options=request_options,
        )
        return _response.data
