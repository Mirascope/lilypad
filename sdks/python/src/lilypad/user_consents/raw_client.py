# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing
from json.decoder import JSONDecodeError

from ..core.api_error import ApiError
from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.http_response import AsyncHttpResponse, HttpResponse
from ..core.jsonable_encoder import jsonable_encoder
from ..core.request_options import RequestOptions
from ..core.unchecked_base_model import construct_type
from ..errors.unprocessable_entity_error import UnprocessableEntityError
from ..types.http_validation_error import HttpValidationError
from ..types.user_consent_public import UserConsentPublic

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class RawUserConsentsClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def create(
        self,
        *,
        privacy_policy_version: str,
        tos_version: str,
        privacy_policy_accepted_at: typing.Optional[dt.datetime] = OMIT,
        tos_accepted_at: typing.Optional[dt.datetime] = OMIT,
        user_uuid: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HttpResponse[UserConsentPublic]:
        """
        Store user consent.

        Parameters
        ----------
        privacy_policy_version : str

        tos_version : str

        privacy_policy_accepted_at : typing.Optional[dt.datetime]

        tos_accepted_at : typing.Optional[dt.datetime]

        user_uuid : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[UserConsentPublic]
            Successful Response
        """
        _response = self._client_wrapper.httpx_client.request(
            "user-consents",
            method="POST",
            json={
                "privacy_policy_version": privacy_policy_version,
                "privacy_policy_accepted_at": privacy_policy_accepted_at,
                "tos_version": tos_version,
                "tos_accepted_at": tos_accepted_at,
                "user_uuid": user_uuid,
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    UserConsentPublic,
                    construct_type(
                        type_=UserConsentPublic,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        HttpValidationError,
                        construct_type(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    def update(
        self,
        user_consent_uuid: str,
        *,
        privacy_policy_version: typing.Optional[str] = OMIT,
        privacy_policy_accepted_at: typing.Optional[dt.datetime] = OMIT,
        tos_version: typing.Optional[str] = OMIT,
        tos_accepted_at: typing.Optional[dt.datetime] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HttpResponse[UserConsentPublic]:
        """
        Update user consent.

        Parameters
        ----------
        user_consent_uuid : str

        privacy_policy_version : typing.Optional[str]

        privacy_policy_accepted_at : typing.Optional[dt.datetime]

        tos_version : typing.Optional[str]

        tos_accepted_at : typing.Optional[dt.datetime]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[UserConsentPublic]
            Successful Response
        """
        _response = self._client_wrapper.httpx_client.request(
            f"user-consents/{jsonable_encoder(user_consent_uuid)}",
            method="PATCH",
            json={
                "privacy_policy_version": privacy_policy_version,
                "privacy_policy_accepted_at": privacy_policy_accepted_at,
                "tos_version": tos_version,
                "tos_accepted_at": tos_accepted_at,
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    UserConsentPublic,
                    construct_type(
                        type_=UserConsentPublic,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        HttpValidationError,
                        construct_type(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)


class AsyncRawUserConsentsClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def create(
        self,
        *,
        privacy_policy_version: str,
        tos_version: str,
        privacy_policy_accepted_at: typing.Optional[dt.datetime] = OMIT,
        tos_accepted_at: typing.Optional[dt.datetime] = OMIT,
        user_uuid: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncHttpResponse[UserConsentPublic]:
        """
        Store user consent.

        Parameters
        ----------
        privacy_policy_version : str

        tos_version : str

        privacy_policy_accepted_at : typing.Optional[dt.datetime]

        tos_accepted_at : typing.Optional[dt.datetime]

        user_uuid : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[UserConsentPublic]
            Successful Response
        """
        _response = await self._client_wrapper.httpx_client.request(
            "user-consents",
            method="POST",
            json={
                "privacy_policy_version": privacy_policy_version,
                "privacy_policy_accepted_at": privacy_policy_accepted_at,
                "tos_version": tos_version,
                "tos_accepted_at": tos_accepted_at,
                "user_uuid": user_uuid,
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    UserConsentPublic,
                    construct_type(
                        type_=UserConsentPublic,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        HttpValidationError,
                        construct_type(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    async def update(
        self,
        user_consent_uuid: str,
        *,
        privacy_policy_version: typing.Optional[str] = OMIT,
        privacy_policy_accepted_at: typing.Optional[dt.datetime] = OMIT,
        tos_version: typing.Optional[str] = OMIT,
        tos_accepted_at: typing.Optional[dt.datetime] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncHttpResponse[UserConsentPublic]:
        """
        Update user consent.

        Parameters
        ----------
        user_consent_uuid : str

        privacy_policy_version : typing.Optional[str]

        privacy_policy_accepted_at : typing.Optional[dt.datetime]

        tos_version : typing.Optional[str]

        tos_accepted_at : typing.Optional[dt.datetime]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[UserConsentPublic]
            Successful Response
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"user-consents/{jsonable_encoder(user_consent_uuid)}",
            method="PATCH",
            json={
                "privacy_policy_version": privacy_policy_version,
                "privacy_policy_accepted_at": privacy_policy_accepted_at,
                "tos_version": tos_version,
                "tos_accepted_at": tos_accepted_at,
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    UserConsentPublic,
                    construct_type(
                        type_=UserConsentPublic,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        HttpValidationError,
                        construct_type(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)
