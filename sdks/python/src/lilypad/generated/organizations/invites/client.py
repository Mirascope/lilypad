# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ...core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ...core.request_options import RequestOptions
from ...types.organization_invite_public import OrganizationInvitePublic
from .raw_client import AsyncRawInvitesClient, RawInvitesClient

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class InvitesClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawInvitesClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawInvitesClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawInvitesClient
        """
        return self._raw_client

    def list(self, *, request_options: typing.Optional[RequestOptions] = None) -> typing.List[OrganizationInvitePublic]:
        """
        Get an organization invite.

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[OrganizationInvitePublic]
            Successful Response

        Examples
        --------
        from mirascope import Lilypad

        client = Lilypad(
            api_key="YOUR_API_KEY",
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )
        client.organizations.invites.list()
        """
        _response = self._raw_client.list(request_options=request_options)
        return _response.data

    def get(
        self, invite_token: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> OrganizationInvitePublic:
        """
        Get an organization invite.

        Parameters
        ----------
        invite_token : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        OrganizationInvitePublic
            Successful Response

        Examples
        --------
        from mirascope import Lilypad

        client = Lilypad(
            api_key="YOUR_API_KEY",
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )
        client.organizations.invites.get(
            invite_token="invite_token",
        )
        """
        _response = self._raw_client.get(invite_token, request_options=request_options)
        return _response.data

    def create(
        self,
        *,
        invited_by: str,
        email: str,
        expires_at: typing.Optional[dt.datetime] = OMIT,
        token: typing.Optional[str] = OMIT,
        resend_email_id: typing.Optional[str] = OMIT,
        organization_uuid: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> OrganizationInvitePublic:
        """
        Create an organization invite.

        Parameters
        ----------
        invited_by : str

        email : str

        expires_at : typing.Optional[dt.datetime]

        token : typing.Optional[str]

        resend_email_id : typing.Optional[str]

        organization_uuid : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        OrganizationInvitePublic
            Successful Response

        Examples
        --------
        from mirascope import Lilypad

        client = Lilypad(
            api_key="YOUR_API_KEY",
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )
        client.organizations.invites.create(
            invited_by="invited_by",
            email="email",
        )
        """
        _response = self._raw_client.create(
            invited_by=invited_by,
            email=email,
            expires_at=expires_at,
            token=token,
            resend_email_id=resend_email_id,
            organization_uuid=organization_uuid,
            request_options=request_options,
        )
        return _response.data

    def remove(self, organization_invite_uuid: str, *, request_options: typing.Optional[RequestOptions] = None) -> bool:
        """
        Remove an organization invite.

        Parameters
        ----------
        organization_invite_uuid : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        bool
            Successful Response

        Examples
        --------
        from mirascope import Lilypad

        client = Lilypad(
            api_key="YOUR_API_KEY",
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )
        client.organizations.invites.remove(
            organization_invite_uuid="organization_invite_uuid",
        )
        """
        _response = self._raw_client.remove(organization_invite_uuid, request_options=request_options)
        return _response.data


class AsyncInvitesClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawInvitesClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawInvitesClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawInvitesClient
        """
        return self._raw_client

    async def list(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.List[OrganizationInvitePublic]:
        """
        Get an organization invite.

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[OrganizationInvitePublic]
            Successful Response

        Examples
        --------
        import asyncio

        from mirascope import AsyncLilypad

        client = AsyncLilypad(
            api_key="YOUR_API_KEY",
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.organizations.invites.list()


        asyncio.run(main())
        """
        _response = await self._raw_client.list(request_options=request_options)
        return _response.data

    async def get(
        self, invite_token: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> OrganizationInvitePublic:
        """
        Get an organization invite.

        Parameters
        ----------
        invite_token : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        OrganizationInvitePublic
            Successful Response

        Examples
        --------
        import asyncio

        from mirascope import AsyncLilypad

        client = AsyncLilypad(
            api_key="YOUR_API_KEY",
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.organizations.invites.get(
                invite_token="invite_token",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get(invite_token, request_options=request_options)
        return _response.data

    async def create(
        self,
        *,
        invited_by: str,
        email: str,
        expires_at: typing.Optional[dt.datetime] = OMIT,
        token: typing.Optional[str] = OMIT,
        resend_email_id: typing.Optional[str] = OMIT,
        organization_uuid: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> OrganizationInvitePublic:
        """
        Create an organization invite.

        Parameters
        ----------
        invited_by : str

        email : str

        expires_at : typing.Optional[dt.datetime]

        token : typing.Optional[str]

        resend_email_id : typing.Optional[str]

        organization_uuid : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        OrganizationInvitePublic
            Successful Response

        Examples
        --------
        import asyncio

        from mirascope import AsyncLilypad

        client = AsyncLilypad(
            api_key="YOUR_API_KEY",
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.organizations.invites.create(
                invited_by="invited_by",
                email="email",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.create(
            invited_by=invited_by,
            email=email,
            expires_at=expires_at,
            token=token,
            resend_email_id=resend_email_id,
            organization_uuid=organization_uuid,
            request_options=request_options,
        )
        return _response.data

    async def remove(
        self, organization_invite_uuid: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> bool:
        """
        Remove an organization invite.

        Parameters
        ----------
        organization_invite_uuid : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        bool
            Successful Response

        Examples
        --------
        import asyncio

        from mirascope import AsyncLilypad

        client = AsyncLilypad(
            api_key="YOUR_API_KEY",
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.organizations.invites.remove(
                organization_invite_uuid="organization_invite_uuid",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.remove(organization_invite_uuid, request_options=request_options)
        return _response.data
