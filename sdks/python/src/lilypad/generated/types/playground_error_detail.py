# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
from ..core.pydantic_utilities import IS_PYDANTIC_V2
from ..core.unchecked_base_model import UncheckedBaseModel
from .type import Type


class PlaygroundErrorDetail(UncheckedBaseModel):
    """
    Detailed information about a playground error.
    """

    type: Type = pydantic.Field()
    """
    Category of the error (Enum value) or specific Python Exception type name.
    """

    reason: str = pydantic.Field()
    """
    User-friendly description of the error.
    """

    details: typing.Optional[str] = pydantic.Field(default=None)
    """
    Additional technical details, if available.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
