# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations

import datetime as dt
import typing

import pydantic
import typing_extensions
from ..core.pydantic_utilities import IS_PYDANTIC_V2, update_forward_refs
from ..core.serialization import FieldMetadata
from ..core.unchecked_base_model import UncheckedBaseModel
from .annotation_public import AnnotationPublic
from .function_public import FunctionPublic
from .scope import Scope
from .span_type import SpanType
from .tag_public import TagPublic


class SpanPublic(UncheckedBaseModel):
    """
    Span public model
    """

    span_id: str
    trace_id: typing.Optional[str] = None
    function_uuid: typing.Optional[str] = None
    type: typing.Optional[SpanType] = None
    cost: typing.Optional[float] = None
    scope: Scope
    input_tokens: typing.Optional[float] = None
    output_tokens: typing.Optional[float] = None
    duration_ms: typing.Optional[float] = None
    data: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = None
    parent_span_id: typing.Optional[str] = None
    session_id: typing.Optional[str] = None
    environment_uuid: typing.Optional[str] = None
    uuid_: typing_extensions.Annotated[str, FieldMetadata(alias="uuid")]
    project_uuid: str
    display_name: typing.Optional[str] = None
    function: typing.Optional[FunctionPublic] = None
    annotations: typing.List[AnnotationPublic]
    child_spans: typing.List["SpanPublic"]
    created_at: dt.datetime
    status: typing.Optional[str] = None
    tags: typing.List[TagPublic]
    score: typing.Optional[float] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


update_forward_refs(SpanPublic)
