# This file was auto-generated by Fern from our API Definition.

import typing

from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.request_options import RequestOptions
from ..types.user_public import UserPublic
from .raw_client import AsyncRawAuthClient, RawAuthClient


class AuthClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawAuthClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawAuthClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawAuthClient
        """
        return self._raw_client

    def handle_github_callback(
        self, *, code: str, request_options: typing.Optional[RequestOptions] = None
    ) -> UserPublic:
        """
        Callback for GitHub OAuth.

        Saves the user and organization or retrieves the user after authenticating
        with GitHub.

        Parameters
        ----------
        code : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        UserPublic
            Successful Response

        Examples
        --------
        from mirascope import Lilypad

        client = Lilypad(
            api_key="YOUR_API_KEY",
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )
        client.auth.handle_github_callback(
            code="code",
        )
        """
        _response = self._raw_client.handle_github_callback(code=code, request_options=request_options)
        return _response.data

    def handle_google_callback(
        self, *, code: str, request_options: typing.Optional[RequestOptions] = None
    ) -> UserPublic:
        """
        Callback for Google OAuth.

        Saves the user and organization or retrieves the user after authenticating
        with Google.

        Parameters
        ----------
        code : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        UserPublic
            Successful Response

        Examples
        --------
        from mirascope import Lilypad

        client = Lilypad(
            api_key="YOUR_API_KEY",
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )
        client.auth.handle_google_callback(
            code="code",
        )
        """
        _response = self._raw_client.handle_google_callback(code=code, request_options=request_options)
        return _response.data


class AsyncAuthClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawAuthClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawAuthClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawAuthClient
        """
        return self._raw_client

    async def handle_github_callback(
        self, *, code: str, request_options: typing.Optional[RequestOptions] = None
    ) -> UserPublic:
        """
        Callback for GitHub OAuth.

        Saves the user and organization or retrieves the user after authenticating
        with GitHub.

        Parameters
        ----------
        code : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        UserPublic
            Successful Response

        Examples
        --------
        import asyncio

        from mirascope import AsyncLilypad

        client = AsyncLilypad(
            api_key="YOUR_API_KEY",
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.auth.handle_github_callback(
                code="code",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.handle_github_callback(code=code, request_options=request_options)
        return _response.data

    async def handle_google_callback(
        self, *, code: str, request_options: typing.Optional[RequestOptions] = None
    ) -> UserPublic:
        """
        Callback for Google OAuth.

        Saves the user and organization or retrieves the user after authenticating
        with Google.

        Parameters
        ----------
        code : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        UserPublic
            Successful Response

        Examples
        --------
        import asyncio

        from mirascope import AsyncLilypad

        client = AsyncLilypad(
            api_key="YOUR_API_KEY",
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.auth.handle_google_callback(
                code="code",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.handle_google_callback(code=code, request_options=request_options)
        return _response.data
