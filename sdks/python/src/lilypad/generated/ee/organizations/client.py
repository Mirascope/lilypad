# This file was auto-generated by Fern from our API Definition.

import typing

from ...core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ...core.request_options import RequestOptions
from ...types.license_info import LicenseInfo
from ...types.user_organization_table import UserOrganizationTable
from ...types.user_public import UserPublic
from .raw_client import AsyncRawOrganizationsClient, RawOrganizationsClient
from .users.client import AsyncUsersClient, UsersClient

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class OrganizationsClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawOrganizationsClient(client_wrapper=client_wrapper)
        self.users = UsersClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawOrganizationsClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawOrganizationsClient
        """
        return self._raw_client

    def get_license(self, *, request_options: typing.Optional[RequestOptions] = None) -> LicenseInfo:
        """
        Get the license information for the organization

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        LicenseInfo
            Successful Response

        Examples
        --------
        from mirascope import Lilypad

        client = Lilypad(
            api_key="YOUR_API_KEY",
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )
        client.ee.organizations.get_license()
        """
        _response = self._raw_client.get_license(request_options=request_options)
        return _response.data

    def list(self, *, request_options: typing.Optional[RequestOptions] = None) -> typing.List[UserOrganizationTable]:
        """
        Get all user organizations.

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[UserOrganizationTable]
            Successful Response

        Examples
        --------
        from mirascope import Lilypad

        client = Lilypad(
            api_key="YOUR_API_KEY",
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )
        client.ee.organizations.list()
        """
        _response = self._raw_client.list(request_options=request_options)
        return _response.data

    def create(self, *, token: str, request_options: typing.Optional[RequestOptions] = None) -> UserPublic:
        """
        Create user organization

        Parameters
        ----------
        token : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        UserPublic
            Successful Response

        Examples
        --------
        from mirascope import Lilypad

        client = Lilypad(
            api_key="YOUR_API_KEY",
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )
        client.ee.organizations.create(
            token="token",
        )
        """
        _response = self._raw_client.create(token=token, request_options=request_options)
        return _response.data

    def delete(self, user_organization_uuid: str, *, request_options: typing.Optional[RequestOptions] = None) -> bool:
        """
        Delete user organization by uuid

        Parameters
        ----------
        user_organization_uuid : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        bool
            Successful Response

        Examples
        --------
        from mirascope import Lilypad

        client = Lilypad(
            api_key="YOUR_API_KEY",
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )
        client.ee.organizations.delete(
            user_organization_uuid="user_organization_uuid",
        )
        """
        _response = self._raw_client.delete(user_organization_uuid, request_options=request_options)
        return _response.data


class AsyncOrganizationsClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawOrganizationsClient(client_wrapper=client_wrapper)
        self.users = AsyncUsersClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawOrganizationsClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawOrganizationsClient
        """
        return self._raw_client

    async def get_license(self, *, request_options: typing.Optional[RequestOptions] = None) -> LicenseInfo:
        """
        Get the license information for the organization

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        LicenseInfo
            Successful Response

        Examples
        --------
        import asyncio

        from mirascope import AsyncLilypad

        client = AsyncLilypad(
            api_key="YOUR_API_KEY",
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.ee.organizations.get_license()


        asyncio.run(main())
        """
        _response = await self._raw_client.get_license(request_options=request_options)
        return _response.data

    async def list(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.List[UserOrganizationTable]:
        """
        Get all user organizations.

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[UserOrganizationTable]
            Successful Response

        Examples
        --------
        import asyncio

        from mirascope import AsyncLilypad

        client = AsyncLilypad(
            api_key="YOUR_API_KEY",
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.ee.organizations.list()


        asyncio.run(main())
        """
        _response = await self._raw_client.list(request_options=request_options)
        return _response.data

    async def create(self, *, token: str, request_options: typing.Optional[RequestOptions] = None) -> UserPublic:
        """
        Create user organization

        Parameters
        ----------
        token : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        UserPublic
            Successful Response

        Examples
        --------
        import asyncio

        from mirascope import AsyncLilypad

        client = AsyncLilypad(
            api_key="YOUR_API_KEY",
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.ee.organizations.create(
                token="token",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.create(token=token, request_options=request_options)
        return _response.data

    async def delete(
        self, user_organization_uuid: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> bool:
        """
        Delete user organization by uuid

        Parameters
        ----------
        user_organization_uuid : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        bool
            Successful Response

        Examples
        --------
        import asyncio

        from mirascope import AsyncLilypad

        client = AsyncLilypad(
            api_key="YOUR_API_KEY",
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.ee.organizations.delete(
                user_organization_uuid="user_organization_uuid",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.delete(user_organization_uuid, request_options=request_options)
        return _response.data
