# This file was auto-generated by Fern from our API Definition.

import typing

from ....core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ....core.request_options import RequestOptions
from ....types.common_call_params import CommonCallParams
from ....types.playground_success_response import PlaygroundSuccessResponse
from ....types.provider import Provider
from .annotations.client import AnnotationsClient, AsyncAnnotationsClient
from .raw_client import AsyncRawFunctionsClient, RawFunctionsClient
from .types.playground_parameters_arg_values_value import PlaygroundParametersArgValuesValue

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class FunctionsClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawFunctionsClient(client_wrapper=client_wrapper)
        self.annotations = AnnotationsClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawFunctionsClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawFunctionsClient
        """
        return self._raw_client

    def run_playground(
        self,
        project_uuid: str,
        function_uuid: str,
        *,
        arg_values: typing.Dict[str, PlaygroundParametersArgValuesValue],
        provider: Provider,
        model: str,
        prompt_template: str,
        arg_types: typing.Optional[typing.Dict[str, typing.Optional[str]]] = OMIT,
        call_params: typing.Optional[CommonCallParams] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> PlaygroundSuccessResponse:
        """
        Executes a function with specified parameters in a secure playground environment.

        Parameters
        ----------
        project_uuid : str

        function_uuid : str

        arg_values : typing.Dict[str, PlaygroundParametersArgValuesValue]

        provider : Provider

        model : str

        prompt_template : str

        arg_types : typing.Optional[typing.Dict[str, typing.Optional[str]]]

        call_params : typing.Optional[CommonCallParams]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PlaygroundSuccessResponse
            Function executed successfully.

        Examples
        --------
        from mirascope import Lilypad

        client = Lilypad(
            api_key="YOUR_API_KEY",
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )
        client.ee.projects.functions.run_playground(
            project_uuid="project_uuid",
            function_uuid="function_uuid",
            arg_values={"key": 1},
            provider="openai",
            model="model",
            prompt_template="prompt_template",
        )
        """
        _response = self._raw_client.run_playground(
            project_uuid,
            function_uuid,
            arg_values=arg_values,
            provider=provider,
            model=model,
            prompt_template=prompt_template,
            arg_types=arg_types,
            call_params=call_params,
            request_options=request_options,
        )
        return _response.data


class AsyncFunctionsClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawFunctionsClient(client_wrapper=client_wrapper)
        self.annotations = AsyncAnnotationsClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawFunctionsClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawFunctionsClient
        """
        return self._raw_client

    async def run_playground(
        self,
        project_uuid: str,
        function_uuid: str,
        *,
        arg_values: typing.Dict[str, PlaygroundParametersArgValuesValue],
        provider: Provider,
        model: str,
        prompt_template: str,
        arg_types: typing.Optional[typing.Dict[str, typing.Optional[str]]] = OMIT,
        call_params: typing.Optional[CommonCallParams] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> PlaygroundSuccessResponse:
        """
        Executes a function with specified parameters in a secure playground environment.

        Parameters
        ----------
        project_uuid : str

        function_uuid : str

        arg_values : typing.Dict[str, PlaygroundParametersArgValuesValue]

        provider : Provider

        model : str

        prompt_template : str

        arg_types : typing.Optional[typing.Dict[str, typing.Optional[str]]]

        call_params : typing.Optional[CommonCallParams]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PlaygroundSuccessResponse
            Function executed successfully.

        Examples
        --------
        import asyncio

        from mirascope import AsyncLilypad

        client = AsyncLilypad(
            api_key="YOUR_API_KEY",
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.ee.projects.functions.run_playground(
                project_uuid="project_uuid",
                function_uuid="function_uuid",
                arg_values={"key": 1},
                provider="openai",
                model="model",
                prompt_template="prompt_template",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.run_playground(
            project_uuid,
            function_uuid,
            arg_values=arg_values,
            provider=provider,
            model=model,
            prompt_template=prompt_template,
            arg_types=arg_types,
            call_params=call_params,
            request_options=request_options,
        )
        return _response.data
