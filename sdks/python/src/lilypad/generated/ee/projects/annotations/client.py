# This file was auto-generated by Fern from our API Definition.

import typing

from ....core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ....core.request_options import RequestOptions
from ....types.annotation_create import AnnotationCreate
from ....types.annotation_public import AnnotationPublic
from ....types.evaluation_type import EvaluationType
from ....types.label import Label
from .raw_client import AsyncRawAnnotationsClient, RawAnnotationsClient

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class AnnotationsClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawAnnotationsClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawAnnotationsClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawAnnotationsClient
        """
        return self._raw_client

    def list(
        self, project_uuid: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.List[AnnotationPublic]:
        """
        Get annotations by project.

        Parameters
        ----------
        project_uuid : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[AnnotationPublic]
            Successful Response

        Examples
        --------
        from mirascope import Lilypad

        client = Lilypad(
            api_key="YOUR_API_KEY",
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )
        client.ee.projects.annotations.list(
            project_uuid="project_uuid",
        )
        """
        _response = self._raw_client.list(project_uuid, request_options=request_options)
        return _response.data

    def create(
        self,
        project_uuid: str,
        *,
        request: typing.Sequence[AnnotationCreate],
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[AnnotationPublic]:
        """
        Create an annotation.

        Args:
            project_uuid: The project UUID.
            annotations_service: The annotation service.
            project_service: The project service.
            annotations_create: The annotation create model.

        Returns:
            AnnotationPublic: The created annotation.

        Raises:
            HTTPException: If the span has already been assigned to a user and has
            not been labeled yet.

        Parameters
        ----------
        project_uuid : str

        request : typing.Sequence[AnnotationCreate]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[AnnotationPublic]
            Successful Response

        Examples
        --------
        from mirascope import AnnotationCreate, Lilypad

        client = Lilypad(
            api_key="YOUR_API_KEY",
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )
        client.ee.projects.annotations.create(
            project_uuid="project_uuid",
            request=[AnnotationCreate()],
        )
        """
        _response = self._raw_client.create(project_uuid, request=request, request_options=request_options)
        return _response.data

    def delete(
        self, annotation_uuid: str, project_uuid: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> bool:
        """
        Delete an annotation.

        Parameters
        ----------
        annotation_uuid : str

        project_uuid : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        bool
            Successful Response

        Examples
        --------
        from mirascope import Lilypad

        client = Lilypad(
            api_key="YOUR_API_KEY",
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )
        client.ee.projects.annotations.delete(
            annotation_uuid="annotation_uuid",
            project_uuid="project_uuid",
        )
        """
        _response = self._raw_client.delete(annotation_uuid, project_uuid, request_options=request_options)
        return _response.data

    def update(
        self,
        annotation_uuid: str,
        project_uuid: str,
        *,
        label: typing.Optional[Label] = OMIT,
        reasoning: typing.Optional[str] = OMIT,
        type: typing.Optional[EvaluationType] = OMIT,
        data: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = OMIT,
        assigned_to: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AnnotationPublic:
        """
        Update an annotation.

        Parameters
        ----------
        annotation_uuid : str

        project_uuid : str

        label : typing.Optional[Label]

        reasoning : typing.Optional[str]

        type : typing.Optional[EvaluationType]

        data : typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]]

        assigned_to : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AnnotationPublic
            Successful Response

        Examples
        --------
        from mirascope import Lilypad

        client = Lilypad(
            api_key="YOUR_API_KEY",
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )
        client.ee.projects.annotations.update(
            annotation_uuid="annotation_uuid",
            project_uuid="project_uuid",
        )
        """
        _response = self._raw_client.update(
            annotation_uuid,
            project_uuid,
            label=label,
            reasoning=reasoning,
            type=type,
            data=data,
            assigned_to=assigned_to,
            request_options=request_options,
        )
        return _response.data


class AsyncAnnotationsClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawAnnotationsClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawAnnotationsClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawAnnotationsClient
        """
        return self._raw_client

    async def list(
        self, project_uuid: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.List[AnnotationPublic]:
        """
        Get annotations by project.

        Parameters
        ----------
        project_uuid : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[AnnotationPublic]
            Successful Response

        Examples
        --------
        import asyncio

        from mirascope import AsyncLilypad

        client = AsyncLilypad(
            api_key="YOUR_API_KEY",
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.ee.projects.annotations.list(
                project_uuid="project_uuid",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.list(project_uuid, request_options=request_options)
        return _response.data

    async def create(
        self,
        project_uuid: str,
        *,
        request: typing.Sequence[AnnotationCreate],
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[AnnotationPublic]:
        """
        Create an annotation.

        Args:
            project_uuid: The project UUID.
            annotations_service: The annotation service.
            project_service: The project service.
            annotations_create: The annotation create model.

        Returns:
            AnnotationPublic: The created annotation.

        Raises:
            HTTPException: If the span has already been assigned to a user and has
            not been labeled yet.

        Parameters
        ----------
        project_uuid : str

        request : typing.Sequence[AnnotationCreate]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[AnnotationPublic]
            Successful Response

        Examples
        --------
        import asyncio

        from mirascope import AnnotationCreate, AsyncLilypad

        client = AsyncLilypad(
            api_key="YOUR_API_KEY",
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.ee.projects.annotations.create(
                project_uuid="project_uuid",
                request=[AnnotationCreate()],
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.create(project_uuid, request=request, request_options=request_options)
        return _response.data

    async def delete(
        self, annotation_uuid: str, project_uuid: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> bool:
        """
        Delete an annotation.

        Parameters
        ----------
        annotation_uuid : str

        project_uuid : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        bool
            Successful Response

        Examples
        --------
        import asyncio

        from mirascope import AsyncLilypad

        client = AsyncLilypad(
            api_key="YOUR_API_KEY",
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.ee.projects.annotations.delete(
                annotation_uuid="annotation_uuid",
                project_uuid="project_uuid",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.delete(annotation_uuid, project_uuid, request_options=request_options)
        return _response.data

    async def update(
        self,
        annotation_uuid: str,
        project_uuid: str,
        *,
        label: typing.Optional[Label] = OMIT,
        reasoning: typing.Optional[str] = OMIT,
        type: typing.Optional[EvaluationType] = OMIT,
        data: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = OMIT,
        assigned_to: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AnnotationPublic:
        """
        Update an annotation.

        Parameters
        ----------
        annotation_uuid : str

        project_uuid : str

        label : typing.Optional[Label]

        reasoning : typing.Optional[str]

        type : typing.Optional[EvaluationType]

        data : typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]]

        assigned_to : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AnnotationPublic
            Successful Response

        Examples
        --------
        import asyncio

        from mirascope import AsyncLilypad

        client = AsyncLilypad(
            api_key="YOUR_API_KEY",
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.ee.projects.annotations.update(
                annotation_uuid="annotation_uuid",
                project_uuid="project_uuid",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.update(
            annotation_uuid,
            project_uuid,
            label=label,
            reasoning=reasoning,
            type=type,
            data=data,
            assigned_to=assigned_to,
            request_options=request_options,
        )
        return _response.data
