# This file was auto-generated by Fern from our API Definition.

import typing

from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.request_options import RequestOptions
from ..types.comment_public import CommentPublic
from .raw_client import AsyncRawCommentsClient, RawCommentsClient

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class CommentsClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawCommentsClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawCommentsClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawCommentsClient
        """
        return self._raw_client

    def list(self, *, request_options: typing.Optional[RequestOptions] = None) -> typing.List[CommentPublic]:
        """
        Get all comments.

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[CommentPublic]
            Successful Response

        Examples
        --------
        from mirascope import Lilypad

        client = Lilypad(
            api_key="YOUR_API_KEY",
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )
        client.comments.list()
        """
        _response = self._raw_client.list(request_options=request_options)
        return _response.data

    def create(
        self,
        *,
        text: str,
        span_uuid: str,
        parent_comment_uuid: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> CommentPublic:
        """
        Create a comment

        Parameters
        ----------
        text : str

        span_uuid : str

        parent_comment_uuid : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        CommentPublic
            Successful Response

        Examples
        --------
        from mirascope import Lilypad

        client = Lilypad(
            api_key="YOUR_API_KEY",
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )
        client.comments.create(
            text="text",
            span_uuid="span_uuid",
        )
        """
        _response = self._raw_client.create(
            text=text, span_uuid=span_uuid, parent_comment_uuid=parent_comment_uuid, request_options=request_options
        )
        return _response.data

    def get(self, comment_uuid: str, *, request_options: typing.Optional[RequestOptions] = None) -> CommentPublic:
        """
        Get a comment.

        Parameters
        ----------
        comment_uuid : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        CommentPublic
            Successful Response

        Examples
        --------
        from mirascope import Lilypad

        client = Lilypad(
            api_key="YOUR_API_KEY",
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )
        client.comments.get(
            comment_uuid="comment_uuid",
        )
        """
        _response = self._raw_client.get(comment_uuid, request_options=request_options)
        return _response.data

    def delete(self, comment_uuid: str, *, request_options: typing.Optional[RequestOptions] = None) -> bool:
        """
        Delete a comment

        Parameters
        ----------
        comment_uuid : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        bool
            Successful Response

        Examples
        --------
        from mirascope import Lilypad

        client = Lilypad(
            api_key="YOUR_API_KEY",
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )
        client.comments.delete(
            comment_uuid="comment_uuid",
        )
        """
        _response = self._raw_client.delete(comment_uuid, request_options=request_options)
        return _response.data

    def update(
        self,
        comment_uuid: str,
        *,
        text: typing.Optional[str] = OMIT,
        is_edited: typing.Optional[bool] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> CommentPublic:
        """
        Update a comment.

        Parameters
        ----------
        comment_uuid : str

        text : typing.Optional[str]

        is_edited : typing.Optional[bool]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        CommentPublic
            Successful Response

        Examples
        --------
        from mirascope import Lilypad

        client = Lilypad(
            api_key="YOUR_API_KEY",
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )
        client.comments.update(
            comment_uuid="comment_uuid",
        )
        """
        _response = self._raw_client.update(
            comment_uuid, text=text, is_edited=is_edited, request_options=request_options
        )
        return _response.data


class AsyncCommentsClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawCommentsClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawCommentsClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawCommentsClient
        """
        return self._raw_client

    async def list(self, *, request_options: typing.Optional[RequestOptions] = None) -> typing.List[CommentPublic]:
        """
        Get all comments.

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[CommentPublic]
            Successful Response

        Examples
        --------
        import asyncio

        from mirascope import AsyncLilypad

        client = AsyncLilypad(
            api_key="YOUR_API_KEY",
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.comments.list()


        asyncio.run(main())
        """
        _response = await self._raw_client.list(request_options=request_options)
        return _response.data

    async def create(
        self,
        *,
        text: str,
        span_uuid: str,
        parent_comment_uuid: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> CommentPublic:
        """
        Create a comment

        Parameters
        ----------
        text : str

        span_uuid : str

        parent_comment_uuid : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        CommentPublic
            Successful Response

        Examples
        --------
        import asyncio

        from mirascope import AsyncLilypad

        client = AsyncLilypad(
            api_key="YOUR_API_KEY",
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.comments.create(
                text="text",
                span_uuid="span_uuid",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.create(
            text=text, span_uuid=span_uuid, parent_comment_uuid=parent_comment_uuid, request_options=request_options
        )
        return _response.data

    async def get(self, comment_uuid: str, *, request_options: typing.Optional[RequestOptions] = None) -> CommentPublic:
        """
        Get a comment.

        Parameters
        ----------
        comment_uuid : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        CommentPublic
            Successful Response

        Examples
        --------
        import asyncio

        from mirascope import AsyncLilypad

        client = AsyncLilypad(
            api_key="YOUR_API_KEY",
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.comments.get(
                comment_uuid="comment_uuid",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get(comment_uuid, request_options=request_options)
        return _response.data

    async def delete(self, comment_uuid: str, *, request_options: typing.Optional[RequestOptions] = None) -> bool:
        """
        Delete a comment

        Parameters
        ----------
        comment_uuid : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        bool
            Successful Response

        Examples
        --------
        import asyncio

        from mirascope import AsyncLilypad

        client = AsyncLilypad(
            api_key="YOUR_API_KEY",
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.comments.delete(
                comment_uuid="comment_uuid",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.delete(comment_uuid, request_options=request_options)
        return _response.data

    async def update(
        self,
        comment_uuid: str,
        *,
        text: typing.Optional[str] = OMIT,
        is_edited: typing.Optional[bool] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> CommentPublic:
        """
        Update a comment.

        Parameters
        ----------
        comment_uuid : str

        text : typing.Optional[str]

        is_edited : typing.Optional[bool]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        CommentPublic
            Successful Response

        Examples
        --------
        import asyncio

        from mirascope import AsyncLilypad

        client = AsyncLilypad(
            api_key="YOUR_API_KEY",
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.comments.update(
                comment_uuid="comment_uuid",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.update(
            comment_uuid, text=text, is_edited=is_edited, request_options=request_options
        )
        return _response.data
