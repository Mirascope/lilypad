# This file was auto-generated by Fern from our API Definition.

import typing

from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.request_options import RequestOptions
from ..types.tag_public import TagPublic
from .raw_client import AsyncRawTagsClient, RawTagsClient

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class TagsClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawTagsClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawTagsClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawTagsClient
        """
        return self._raw_client

    def list(self, *, request_options: typing.Optional[RequestOptions] = None) -> typing.List[TagPublic]:
        """
        Get all tags.

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[TagPublic]
            Successful Response

        Examples
        --------
        from mirascope import Lilypad

        client = Lilypad(
            api_key="YOUR_API_KEY",
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )
        client.tags.list()
        """
        _response = self._raw_client.list(request_options=request_options)
        return _response.data

    def create(
        self,
        *,
        name: str,
        project_uuid: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> TagPublic:
        """
        Create a tag

        Parameters
        ----------
        name : str

        project_uuid : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        TagPublic
            Successful Response

        Examples
        --------
        from mirascope import Lilypad

        client = Lilypad(
            api_key="YOUR_API_KEY",
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )
        client.tags.create(
            name="name",
        )
        """
        _response = self._raw_client.create(name=name, project_uuid=project_uuid, request_options=request_options)
        return _response.data

    def get(self, tag_uuid: str, *, request_options: typing.Optional[RequestOptions] = None) -> TagPublic:
        """
        Get a tag.

        Parameters
        ----------
        tag_uuid : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        TagPublic
            Successful Response

        Examples
        --------
        from mirascope import Lilypad

        client = Lilypad(
            api_key="YOUR_API_KEY",
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )
        client.tags.get(
            tag_uuid="tag_uuid",
        )
        """
        _response = self._raw_client.get(tag_uuid, request_options=request_options)
        return _response.data

    def delete(self, tag_uuid: str, *, request_options: typing.Optional[RequestOptions] = None) -> bool:
        """
        Delete a tag

        Parameters
        ----------
        tag_uuid : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        bool
            Successful Response

        Examples
        --------
        from mirascope import Lilypad

        client = Lilypad(
            api_key="YOUR_API_KEY",
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )
        client.tags.delete(
            tag_uuid="tag_uuid",
        )
        """
        _response = self._raw_client.delete(tag_uuid, request_options=request_options)
        return _response.data

    def update(
        self,
        tag_uuid: str,
        *,
        name: str,
        project_uuid: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> TagPublic:
        """
        Update a tag.

        Parameters
        ----------
        tag_uuid : str

        name : str

        project_uuid : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        TagPublic
            Successful Response

        Examples
        --------
        from mirascope import Lilypad

        client = Lilypad(
            api_key="YOUR_API_KEY",
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )
        client.tags.update(
            tag_uuid="tag_uuid",
            name="name",
        )
        """
        _response = self._raw_client.update(
            tag_uuid, name=name, project_uuid=project_uuid, request_options=request_options
        )
        return _response.data


class AsyncTagsClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawTagsClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawTagsClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawTagsClient
        """
        return self._raw_client

    async def list(self, *, request_options: typing.Optional[RequestOptions] = None) -> typing.List[TagPublic]:
        """
        Get all tags.

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[TagPublic]
            Successful Response

        Examples
        --------
        import asyncio

        from mirascope import AsyncLilypad

        client = AsyncLilypad(
            api_key="YOUR_API_KEY",
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.tags.list()


        asyncio.run(main())
        """
        _response = await self._raw_client.list(request_options=request_options)
        return _response.data

    async def create(
        self,
        *,
        name: str,
        project_uuid: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> TagPublic:
        """
        Create a tag

        Parameters
        ----------
        name : str

        project_uuid : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        TagPublic
            Successful Response

        Examples
        --------
        import asyncio

        from mirascope import AsyncLilypad

        client = AsyncLilypad(
            api_key="YOUR_API_KEY",
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.tags.create(
                name="name",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.create(name=name, project_uuid=project_uuid, request_options=request_options)
        return _response.data

    async def get(self, tag_uuid: str, *, request_options: typing.Optional[RequestOptions] = None) -> TagPublic:
        """
        Get a tag.

        Parameters
        ----------
        tag_uuid : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        TagPublic
            Successful Response

        Examples
        --------
        import asyncio

        from mirascope import AsyncLilypad

        client = AsyncLilypad(
            api_key="YOUR_API_KEY",
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.tags.get(
                tag_uuid="tag_uuid",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get(tag_uuid, request_options=request_options)
        return _response.data

    async def delete(self, tag_uuid: str, *, request_options: typing.Optional[RequestOptions] = None) -> bool:
        """
        Delete a tag

        Parameters
        ----------
        tag_uuid : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        bool
            Successful Response

        Examples
        --------
        import asyncio

        from mirascope import AsyncLilypad

        client = AsyncLilypad(
            api_key="YOUR_API_KEY",
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.tags.delete(
                tag_uuid="tag_uuid",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.delete(tag_uuid, request_options=request_options)
        return _response.data

    async def update(
        self,
        tag_uuid: str,
        *,
        name: str,
        project_uuid: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> TagPublic:
        """
        Update a tag.

        Parameters
        ----------
        tag_uuid : str

        name : str

        project_uuid : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        TagPublic
            Successful Response

        Examples
        --------
        import asyncio

        from mirascope import AsyncLilypad

        client = AsyncLilypad(
            api_key="YOUR_API_KEY",
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.tags.update(
                tag_uuid="tag_uuid",
                name="name",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.update(
            tag_uuid, name=name, project_uuid=project_uuid, request_options=request_options
        )
        return _response.data
