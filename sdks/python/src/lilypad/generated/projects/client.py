# This file was auto-generated by Fern from our API Definition.

import typing

from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.request_options import RequestOptions
from ..types.project_public import ProjectPublic
from .environments.client import AsyncEnvironmentsClient, EnvironmentsClient
from .functions.client import AsyncFunctionsClient, FunctionsClient
from .raw_client import AsyncRawProjectsClient, RawProjectsClient
from .spans.client import AsyncSpansClient, SpansClient
from .tags.client import AsyncTagsClient, TagsClient
from .traces.client import AsyncTracesClient, TracesClient

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class ProjectsClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawProjectsClient(client_wrapper=client_wrapper)
        self.functions = FunctionsClient(client_wrapper=client_wrapper)

        self.spans = SpansClient(client_wrapper=client_wrapper)

        self.traces = TracesClient(client_wrapper=client_wrapper)

        self.environments = EnvironmentsClient(client_wrapper=client_wrapper)

        self.tags = TagsClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawProjectsClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawProjectsClient
        """
        return self._raw_client

    def list(self, *, request_options: typing.Optional[RequestOptions] = None) -> typing.List[ProjectPublic]:
        """
        Get all projects.

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[ProjectPublic]
            Successful Response

        Examples
        --------
        from mirascope import Lilypad

        client = Lilypad(
            api_key="YOUR_API_KEY",
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )
        client.projects.list()
        """
        _response = self._raw_client.list(request_options=request_options)
        return _response.data

    def create(self, *, name: str, request_options: typing.Optional[RequestOptions] = None) -> ProjectPublic:
        """
        Create a project

        Parameters
        ----------
        name : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ProjectPublic
            Successful Response

        Examples
        --------
        from mirascope import Lilypad

        client = Lilypad(
            api_key="YOUR_API_KEY",
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )
        client.projects.create(
            name="name",
        )
        """
        _response = self._raw_client.create(name=name, request_options=request_options)
        return _response.data

    def get(self, project_uuid: str, *, request_options: typing.Optional[RequestOptions] = None) -> ProjectPublic:
        """
        Get a project.

        Parameters
        ----------
        project_uuid : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ProjectPublic
            Successful Response

        Examples
        --------
        from mirascope import Lilypad

        client = Lilypad(
            api_key="YOUR_API_KEY",
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )
        client.projects.get(
            project_uuid="project_uuid",
        )
        """
        _response = self._raw_client.get(project_uuid, request_options=request_options)
        return _response.data

    def delete(self, project_uuid: str, *, request_options: typing.Optional[RequestOptions] = None) -> bool:
        """
        Delete a project

        Parameters
        ----------
        project_uuid : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        bool
            Successful Response

        Examples
        --------
        from mirascope import Lilypad

        client = Lilypad(
            api_key="YOUR_API_KEY",
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )
        client.projects.delete(
            project_uuid="project_uuid",
        )
        """
        _response = self._raw_client.delete(project_uuid, request_options=request_options)
        return _response.data

    def update(
        self, project_uuid: str, *, name: str, request_options: typing.Optional[RequestOptions] = None
    ) -> ProjectPublic:
        """
        Update a project.

        Parameters
        ----------
        project_uuid : str

        name : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ProjectPublic
            Successful Response

        Examples
        --------
        from mirascope import Lilypad

        client = Lilypad(
            api_key="YOUR_API_KEY",
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )
        client.projects.update(
            project_uuid="project_uuid",
            name="name",
        )
        """
        _response = self._raw_client.update(project_uuid, name=name, request_options=request_options)
        return _response.data


class AsyncProjectsClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawProjectsClient(client_wrapper=client_wrapper)
        self.functions = AsyncFunctionsClient(client_wrapper=client_wrapper)

        self.spans = AsyncSpansClient(client_wrapper=client_wrapper)

        self.traces = AsyncTracesClient(client_wrapper=client_wrapper)

        self.environments = AsyncEnvironmentsClient(client_wrapper=client_wrapper)

        self.tags = AsyncTagsClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawProjectsClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawProjectsClient
        """
        return self._raw_client

    async def list(self, *, request_options: typing.Optional[RequestOptions] = None) -> typing.List[ProjectPublic]:
        """
        Get all projects.

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[ProjectPublic]
            Successful Response

        Examples
        --------
        import asyncio

        from mirascope import AsyncLilypad

        client = AsyncLilypad(
            api_key="YOUR_API_KEY",
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.projects.list()


        asyncio.run(main())
        """
        _response = await self._raw_client.list(request_options=request_options)
        return _response.data

    async def create(self, *, name: str, request_options: typing.Optional[RequestOptions] = None) -> ProjectPublic:
        """
        Create a project

        Parameters
        ----------
        name : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ProjectPublic
            Successful Response

        Examples
        --------
        import asyncio

        from mirascope import AsyncLilypad

        client = AsyncLilypad(
            api_key="YOUR_API_KEY",
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.projects.create(
                name="name",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.create(name=name, request_options=request_options)
        return _response.data

    async def get(self, project_uuid: str, *, request_options: typing.Optional[RequestOptions] = None) -> ProjectPublic:
        """
        Get a project.

        Parameters
        ----------
        project_uuid : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ProjectPublic
            Successful Response

        Examples
        --------
        import asyncio

        from mirascope import AsyncLilypad

        client = AsyncLilypad(
            api_key="YOUR_API_KEY",
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.projects.get(
                project_uuid="project_uuid",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get(project_uuid, request_options=request_options)
        return _response.data

    async def delete(self, project_uuid: str, *, request_options: typing.Optional[RequestOptions] = None) -> bool:
        """
        Delete a project

        Parameters
        ----------
        project_uuid : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        bool
            Successful Response

        Examples
        --------
        import asyncio

        from mirascope import AsyncLilypad

        client = AsyncLilypad(
            api_key="YOUR_API_KEY",
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.projects.delete(
                project_uuid="project_uuid",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.delete(project_uuid, request_options=request_options)
        return _response.data

    async def update(
        self, project_uuid: str, *, name: str, request_options: typing.Optional[RequestOptions] = None
    ) -> ProjectPublic:
        """
        Update a project.

        Parameters
        ----------
        project_uuid : str

        name : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ProjectPublic
            Successful Response

        Examples
        --------
        import asyncio

        from mirascope import AsyncLilypad

        client = AsyncLilypad(
            api_key="YOUR_API_KEY",
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.projects.update(
                project_uuid="project_uuid",
                name="name",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.update(project_uuid, name=name, request_options=request_options)
        return _response.data
