# This file was auto-generated by Fern from our API Definition.

import typing

from ...core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ...core.request_options import RequestOptions
from ...types.deployment_public import DeploymentPublic
from ...types.function_public import FunctionPublic
from .raw_client import AsyncRawEnvironmentsClient, RawEnvironmentsClient


class EnvironmentsClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawEnvironmentsClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawEnvironmentsClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawEnvironmentsClient
        """
        return self._raw_client

    def deploy(
        self,
        project_uuid: str,
        environment_uuid: str,
        *,
        function_uuid: str,
        notes: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> DeploymentPublic:
        """
        Deploy a function to an environment.

        Parameters
        ----------
        project_uuid : str

        environment_uuid : str

        function_uuid : str

        notes : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        DeploymentPublic
            Successful Response

        Examples
        --------
        from mirascope import Lilypad

        client = Lilypad(
            api_key="YOUR_API_KEY",
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )
        client.projects.environments.deploy(
            project_uuid="project_uuid",
            environment_uuid="environment_uuid",
            function_uuid="function_uuid",
        )
        """
        _response = self._raw_client.deploy(
            project_uuid, environment_uuid, function_uuid=function_uuid, notes=notes, request_options=request_options
        )
        return _response.data

    def get_active_deployment(
        self, project_uuid: str, environment_uuid: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> DeploymentPublic:
        """
        Get active deployment for an environment.

        Parameters
        ----------
        project_uuid : str

        environment_uuid : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        DeploymentPublic
            Successful Response

        Examples
        --------
        from mirascope import Lilypad

        client = Lilypad(
            api_key="YOUR_API_KEY",
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )
        client.projects.environments.get_active_deployment(
            project_uuid="project_uuid",
            environment_uuid="environment_uuid",
        )
        """
        _response = self._raw_client.get_active_deployment(
            project_uuid, environment_uuid, request_options=request_options
        )
        return _response.data

    def get_function(
        self, project_uuid: str, environment_uuid: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> FunctionPublic:
        """
        Get the currently active function for an environment.

        Parameters
        ----------
        project_uuid : str

        environment_uuid : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        FunctionPublic
            Successful Response

        Examples
        --------
        from mirascope import Lilypad

        client = Lilypad(
            api_key="YOUR_API_KEY",
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )
        client.projects.environments.get_function(
            project_uuid="project_uuid",
            environment_uuid="environment_uuid",
        )
        """
        _response = self._raw_client.get_function(project_uuid, environment_uuid, request_options=request_options)
        return _response.data

    def get_deployment_history(
        self, project_uuid: str, environment_uuid: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.List[DeploymentPublic]:
        """
        Get deployment history for an environment.

        Parameters
        ----------
        project_uuid : str

        environment_uuid : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[DeploymentPublic]
            Successful Response

        Examples
        --------
        from mirascope import Lilypad

        client = Lilypad(
            api_key="YOUR_API_KEY",
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )
        client.projects.environments.get_deployment_history(
            project_uuid="project_uuid",
            environment_uuid="environment_uuid",
        )
        """
        _response = self._raw_client.get_deployment_history(
            project_uuid, environment_uuid, request_options=request_options
        )
        return _response.data


class AsyncEnvironmentsClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawEnvironmentsClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawEnvironmentsClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawEnvironmentsClient
        """
        return self._raw_client

    async def deploy(
        self,
        project_uuid: str,
        environment_uuid: str,
        *,
        function_uuid: str,
        notes: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> DeploymentPublic:
        """
        Deploy a function to an environment.

        Parameters
        ----------
        project_uuid : str

        environment_uuid : str

        function_uuid : str

        notes : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        DeploymentPublic
            Successful Response

        Examples
        --------
        import asyncio

        from mirascope import AsyncLilypad

        client = AsyncLilypad(
            api_key="YOUR_API_KEY",
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.projects.environments.deploy(
                project_uuid="project_uuid",
                environment_uuid="environment_uuid",
                function_uuid="function_uuid",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.deploy(
            project_uuid, environment_uuid, function_uuid=function_uuid, notes=notes, request_options=request_options
        )
        return _response.data

    async def get_active_deployment(
        self, project_uuid: str, environment_uuid: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> DeploymentPublic:
        """
        Get active deployment for an environment.

        Parameters
        ----------
        project_uuid : str

        environment_uuid : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        DeploymentPublic
            Successful Response

        Examples
        --------
        import asyncio

        from mirascope import AsyncLilypad

        client = AsyncLilypad(
            api_key="YOUR_API_KEY",
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.projects.environments.get_active_deployment(
                project_uuid="project_uuid",
                environment_uuid="environment_uuid",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get_active_deployment(
            project_uuid, environment_uuid, request_options=request_options
        )
        return _response.data

    async def get_function(
        self, project_uuid: str, environment_uuid: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> FunctionPublic:
        """
        Get the currently active function for an environment.

        Parameters
        ----------
        project_uuid : str

        environment_uuid : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        FunctionPublic
            Successful Response

        Examples
        --------
        import asyncio

        from mirascope import AsyncLilypad

        client = AsyncLilypad(
            api_key="YOUR_API_KEY",
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.projects.environments.get_function(
                project_uuid="project_uuid",
                environment_uuid="environment_uuid",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get_function(project_uuid, environment_uuid, request_options=request_options)
        return _response.data

    async def get_deployment_history(
        self, project_uuid: str, environment_uuid: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.List[DeploymentPublic]:
        """
        Get deployment history for an environment.

        Parameters
        ----------
        project_uuid : str

        environment_uuid : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[DeploymentPublic]
            Successful Response

        Examples
        --------
        import asyncio

        from mirascope import AsyncLilypad

        client = AsyncLilypad(
            api_key="YOUR_API_KEY",
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.projects.environments.get_deployment_history(
                project_uuid="project_uuid",
                environment_uuid="environment_uuid",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get_deployment_history(
            project_uuid, environment_uuid, request_options=request_options
        )
        return _response.data
