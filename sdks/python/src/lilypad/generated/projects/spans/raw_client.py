# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing
from json.decoder import JSONDecodeError

from ...core.api_error import ApiError
from ...core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ...core.datetime_utils import serialize_datetime
from ...core.http_response import AsyncHttpResponse, HttpResponse
from ...core.jsonable_encoder import jsonable_encoder
from ...core.request_options import RequestOptions
from ...core.unchecked_base_model import construct_type
from ...errors.unprocessable_entity_error import UnprocessableEntityError
from ...types.aggregate_metrics import AggregateMetrics
from ...types.http_validation_error import HttpValidationError
from ...types.recent_spans_response import RecentSpansResponse
from ...types.scope import Scope
from ...types.span_more_details import SpanMoreDetails
from ...types.span_public import SpanPublic
from ...types.time_frame import TimeFrame


class RawSpansClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def get_aggregates(
        self, project_uuid: str, *, time_frame: TimeFrame, request_options: typing.Optional[RequestOptions] = None
    ) -> HttpResponse[typing.List[AggregateMetrics]]:
        """
        Get aggregated span by project uuid.

        Parameters
        ----------
        project_uuid : str

        time_frame : TimeFrame

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[typing.List[AggregateMetrics]]
            Successful Response
        """
        _response = self._client_wrapper.httpx_client.request(
            f"projects/{jsonable_encoder(project_uuid)}/spans/metadata",
            method="GET",
            params={
                "time_frame": time_frame,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    typing.List[AggregateMetrics],
                    construct_type(
                        type_=typing.List[AggregateMetrics],  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        HttpValidationError,
                        construct_type(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    def get_recent(
        self,
        project_uuid: str,
        *,
        since: typing.Optional[dt.datetime] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HttpResponse[RecentSpansResponse]:
        """
        Get spans created recently for real-time polling.

        If no 'since' parameter is provided, returns spans from the last 30 seconds.

        Parameters
        ----------
        project_uuid : str

        since : typing.Optional[dt.datetime]
            Get spans created since this timestamp

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[RecentSpansResponse]
            Successful Response
        """
        _response = self._client_wrapper.httpx_client.request(
            f"projects/{jsonable_encoder(project_uuid)}/spans/recent",
            method="GET",
            params={
                "since": serialize_datetime(since) if since is not None else None,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    RecentSpansResponse,
                    construct_type(
                        type_=RecentSpansResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        HttpValidationError,
                        construct_type(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    def get_by_id(
        self, project_uuid: str, span_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> HttpResponse[SpanMoreDetails]:
        """
        Get span by project_uuid and span_id.

        Parameters
        ----------
        project_uuid : str

        span_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[SpanMoreDetails]
            Successful Response
        """
        _response = self._client_wrapper.httpx_client.request(
            f"projects/{jsonable_encoder(project_uuid)}/spans/{jsonable_encoder(span_id)}",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    SpanMoreDetails,
                    construct_type(
                        type_=SpanMoreDetails,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        HttpValidationError,
                        construct_type(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    def search(
        self,
        project_uuid: str,
        *,
        query_string: typing.Optional[str] = None,
        time_range_start: typing.Optional[int] = None,
        time_range_end: typing.Optional[int] = None,
        limit: typing.Optional[int] = None,
        scope: typing.Optional[Scope] = None,
        type: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HttpResponse[typing.List[SpanPublic]]:
        """
        Search for traces in OpenSearch.

        Parameters
        ----------
        project_uuid : str

        query_string : typing.Optional[str]

        time_range_start : typing.Optional[int]

        time_range_end : typing.Optional[int]

        limit : typing.Optional[int]

        scope : typing.Optional[Scope]

        type : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[typing.List[SpanPublic]]
            Successful Response
        """
        _response = self._client_wrapper.httpx_client.request(
            f"projects/{jsonable_encoder(project_uuid)}/spans",
            method="GET",
            params={
                "query_string": query_string,
                "time_range_start": time_range_start,
                "time_range_end": time_range_end,
                "limit": limit,
                "scope": scope,
                "type": type,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    typing.List[SpanPublic],
                    construct_type(
                        type_=typing.List[SpanPublic],  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        HttpValidationError,
                        construct_type(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    def delete(
        self, project_uuid: str, span_uuid: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> HttpResponse[bool]:
        """
        Delete spans by UUID.

        Parameters
        ----------
        project_uuid : str

        span_uuid : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[bool]
            Successful Response
        """
        _response = self._client_wrapper.httpx_client.request(
            f"projects/{jsonable_encoder(project_uuid)}/spans/{jsonable_encoder(span_uuid)}",
            method="DELETE",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    bool,
                    construct_type(
                        type_=bool,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        HttpValidationError,
                        construct_type(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)


class AsyncRawSpansClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def get_aggregates(
        self, project_uuid: str, *, time_frame: TimeFrame, request_options: typing.Optional[RequestOptions] = None
    ) -> AsyncHttpResponse[typing.List[AggregateMetrics]]:
        """
        Get aggregated span by project uuid.

        Parameters
        ----------
        project_uuid : str

        time_frame : TimeFrame

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[typing.List[AggregateMetrics]]
            Successful Response
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"projects/{jsonable_encoder(project_uuid)}/spans/metadata",
            method="GET",
            params={
                "time_frame": time_frame,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    typing.List[AggregateMetrics],
                    construct_type(
                        type_=typing.List[AggregateMetrics],  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        HttpValidationError,
                        construct_type(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    async def get_recent(
        self,
        project_uuid: str,
        *,
        since: typing.Optional[dt.datetime] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncHttpResponse[RecentSpansResponse]:
        """
        Get spans created recently for real-time polling.

        If no 'since' parameter is provided, returns spans from the last 30 seconds.

        Parameters
        ----------
        project_uuid : str

        since : typing.Optional[dt.datetime]
            Get spans created since this timestamp

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[RecentSpansResponse]
            Successful Response
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"projects/{jsonable_encoder(project_uuid)}/spans/recent",
            method="GET",
            params={
                "since": serialize_datetime(since) if since is not None else None,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    RecentSpansResponse,
                    construct_type(
                        type_=RecentSpansResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        HttpValidationError,
                        construct_type(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    async def get_by_id(
        self, project_uuid: str, span_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> AsyncHttpResponse[SpanMoreDetails]:
        """
        Get span by project_uuid and span_id.

        Parameters
        ----------
        project_uuid : str

        span_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[SpanMoreDetails]
            Successful Response
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"projects/{jsonable_encoder(project_uuid)}/spans/{jsonable_encoder(span_id)}",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    SpanMoreDetails,
                    construct_type(
                        type_=SpanMoreDetails,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        HttpValidationError,
                        construct_type(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    async def search(
        self,
        project_uuid: str,
        *,
        query_string: typing.Optional[str] = None,
        time_range_start: typing.Optional[int] = None,
        time_range_end: typing.Optional[int] = None,
        limit: typing.Optional[int] = None,
        scope: typing.Optional[Scope] = None,
        type: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncHttpResponse[typing.List[SpanPublic]]:
        """
        Search for traces in OpenSearch.

        Parameters
        ----------
        project_uuid : str

        query_string : typing.Optional[str]

        time_range_start : typing.Optional[int]

        time_range_end : typing.Optional[int]

        limit : typing.Optional[int]

        scope : typing.Optional[Scope]

        type : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[typing.List[SpanPublic]]
            Successful Response
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"projects/{jsonable_encoder(project_uuid)}/spans",
            method="GET",
            params={
                "query_string": query_string,
                "time_range_start": time_range_start,
                "time_range_end": time_range_end,
                "limit": limit,
                "scope": scope,
                "type": type,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    typing.List[SpanPublic],
                    construct_type(
                        type_=typing.List[SpanPublic],  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        HttpValidationError,
                        construct_type(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    async def delete(
        self, project_uuid: str, span_uuid: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> AsyncHttpResponse[bool]:
        """
        Delete spans by UUID.

        Parameters
        ----------
        project_uuid : str

        span_uuid : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[bool]
            Successful Response
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"projects/{jsonable_encoder(project_uuid)}/spans/{jsonable_encoder(span_uuid)}",
            method="DELETE",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    bool,
                    construct_type(
                        type_=bool,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        HttpValidationError,
                        construct_type(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)
