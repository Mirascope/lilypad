# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ...core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ...core.request_options import RequestOptions
from ...types.aggregate_metrics import AggregateMetrics
from ...types.recent_spans_response import RecentSpansResponse
from ...types.scope import Scope
from ...types.span_more_details import SpanMoreDetails
from ...types.span_public import SpanPublic
from ...types.time_frame import TimeFrame
from .raw_client import AsyncRawSpansClient, RawSpansClient


class SpansClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawSpansClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawSpansClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawSpansClient
        """
        return self._raw_client

    def get_aggregates(
        self, project_uuid: str, *, time_frame: TimeFrame, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.List[AggregateMetrics]:
        """
        Get aggregated span by project uuid.

        Parameters
        ----------
        project_uuid : str

        time_frame : TimeFrame

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[AggregateMetrics]
            Successful Response

        Examples
        --------
        from mirascope import Lilypad

        client = Lilypad(
            api_key="YOUR_API_KEY",
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )
        client.projects.spans.get_aggregates(
            project_uuid="project_uuid",
            time_frame="day",
        )
        """
        _response = self._raw_client.get_aggregates(
            project_uuid, time_frame=time_frame, request_options=request_options
        )
        return _response.data

    def get_recent(
        self,
        project_uuid: str,
        *,
        since: typing.Optional[dt.datetime] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> RecentSpansResponse:
        """
        Get spans created recently for real-time polling.

        If no 'since' parameter is provided, returns spans from the last 30 seconds.

        Parameters
        ----------
        project_uuid : str

        since : typing.Optional[dt.datetime]
            Get spans created since this timestamp

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        RecentSpansResponse
            Successful Response

        Examples
        --------
        from mirascope import Lilypad

        client = Lilypad(
            api_key="YOUR_API_KEY",
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )
        client.projects.spans.get_recent(
            project_uuid="project_uuid",
        )
        """
        _response = self._raw_client.get_recent(project_uuid, since=since, request_options=request_options)
        return _response.data

    def get_by_id(
        self, project_uuid: str, span_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> SpanMoreDetails:
        """
        Get span by project_uuid and span_id.

        Parameters
        ----------
        project_uuid : str

        span_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SpanMoreDetails
            Successful Response

        Examples
        --------
        from mirascope import Lilypad

        client = Lilypad(
            api_key="YOUR_API_KEY",
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )
        client.projects.spans.get_by_id(
            project_uuid="project_uuid",
            span_id="span_id",
        )
        """
        _response = self._raw_client.get_by_id(project_uuid, span_id, request_options=request_options)
        return _response.data

    def search(
        self,
        project_uuid: str,
        *,
        query_string: typing.Optional[str] = None,
        time_range_start: typing.Optional[int] = None,
        time_range_end: typing.Optional[int] = None,
        limit: typing.Optional[int] = None,
        scope: typing.Optional[Scope] = None,
        type: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[SpanPublic]:
        """
        Search for traces in OpenSearch.

        Parameters
        ----------
        project_uuid : str

        query_string : typing.Optional[str]

        time_range_start : typing.Optional[int]

        time_range_end : typing.Optional[int]

        limit : typing.Optional[int]

        scope : typing.Optional[Scope]

        type : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[SpanPublic]
            Successful Response

        Examples
        --------
        from mirascope import Lilypad

        client = Lilypad(
            api_key="YOUR_API_KEY",
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )
        client.projects.spans.search(
            project_uuid="project_uuid",
        )
        """
        _response = self._raw_client.search(
            project_uuid,
            query_string=query_string,
            time_range_start=time_range_start,
            time_range_end=time_range_end,
            limit=limit,
            scope=scope,
            type=type,
            request_options=request_options,
        )
        return _response.data

    def delete(
        self, project_uuid: str, span_uuid: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> bool:
        """
        Delete spans by UUID.

        Parameters
        ----------
        project_uuid : str

        span_uuid : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        bool
            Successful Response

        Examples
        --------
        from mirascope import Lilypad

        client = Lilypad(
            api_key="YOUR_API_KEY",
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )
        client.projects.spans.delete(
            project_uuid="project_uuid",
            span_uuid="span_uuid",
        )
        """
        _response = self._raw_client.delete(project_uuid, span_uuid, request_options=request_options)
        return _response.data


class AsyncSpansClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawSpansClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawSpansClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawSpansClient
        """
        return self._raw_client

    async def get_aggregates(
        self, project_uuid: str, *, time_frame: TimeFrame, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.List[AggregateMetrics]:
        """
        Get aggregated span by project uuid.

        Parameters
        ----------
        project_uuid : str

        time_frame : TimeFrame

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[AggregateMetrics]
            Successful Response

        Examples
        --------
        import asyncio

        from mirascope import AsyncLilypad

        client = AsyncLilypad(
            api_key="YOUR_API_KEY",
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.projects.spans.get_aggregates(
                project_uuid="project_uuid",
                time_frame="day",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get_aggregates(
            project_uuid, time_frame=time_frame, request_options=request_options
        )
        return _response.data

    async def get_recent(
        self,
        project_uuid: str,
        *,
        since: typing.Optional[dt.datetime] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> RecentSpansResponse:
        """
        Get spans created recently for real-time polling.

        If no 'since' parameter is provided, returns spans from the last 30 seconds.

        Parameters
        ----------
        project_uuid : str

        since : typing.Optional[dt.datetime]
            Get spans created since this timestamp

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        RecentSpansResponse
            Successful Response

        Examples
        --------
        import asyncio

        from mirascope import AsyncLilypad

        client = AsyncLilypad(
            api_key="YOUR_API_KEY",
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.projects.spans.get_recent(
                project_uuid="project_uuid",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get_recent(project_uuid, since=since, request_options=request_options)
        return _response.data

    async def get_by_id(
        self, project_uuid: str, span_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> SpanMoreDetails:
        """
        Get span by project_uuid and span_id.

        Parameters
        ----------
        project_uuid : str

        span_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SpanMoreDetails
            Successful Response

        Examples
        --------
        import asyncio

        from mirascope import AsyncLilypad

        client = AsyncLilypad(
            api_key="YOUR_API_KEY",
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.projects.spans.get_by_id(
                project_uuid="project_uuid",
                span_id="span_id",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get_by_id(project_uuid, span_id, request_options=request_options)
        return _response.data

    async def search(
        self,
        project_uuid: str,
        *,
        query_string: typing.Optional[str] = None,
        time_range_start: typing.Optional[int] = None,
        time_range_end: typing.Optional[int] = None,
        limit: typing.Optional[int] = None,
        scope: typing.Optional[Scope] = None,
        type: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[SpanPublic]:
        """
        Search for traces in OpenSearch.

        Parameters
        ----------
        project_uuid : str

        query_string : typing.Optional[str]

        time_range_start : typing.Optional[int]

        time_range_end : typing.Optional[int]

        limit : typing.Optional[int]

        scope : typing.Optional[Scope]

        type : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[SpanPublic]
            Successful Response

        Examples
        --------
        import asyncio

        from mirascope import AsyncLilypad

        client = AsyncLilypad(
            api_key="YOUR_API_KEY",
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.projects.spans.search(
                project_uuid="project_uuid",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.search(
            project_uuid,
            query_string=query_string,
            time_range_start=time_range_start,
            time_range_end=time_range_end,
            limit=limit,
            scope=scope,
            type=type,
            request_options=request_options,
        )
        return _response.data

    async def delete(
        self, project_uuid: str, span_uuid: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> bool:
        """
        Delete spans by UUID.

        Parameters
        ----------
        project_uuid : str

        span_uuid : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        bool
            Successful Response

        Examples
        --------
        import asyncio

        from mirascope import AsyncLilypad

        client = AsyncLilypad(
            api_key="YOUR_API_KEY",
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.projects.spans.delete(
                project_uuid="project_uuid",
                span_uuid="span_uuid",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.delete(project_uuid, span_uuid, request_options=request_options)
        return _response.data
