# This file was auto-generated by Fern from our API Definition.

import typing

from ...core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ...core.request_options import RequestOptions
from ...types.paginated_span_public import PaginatedSpanPublic
from ...types.span_public import SpanPublic
from ...types.traces_queue_response import TracesQueueResponse
from .raw_client import AsyncRawTracesClient, RawTracesClient
from .types.order import Order


class TracesClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawTracesClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawTracesClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawTracesClient
        """
        return self._raw_client

    def get_root(
        self, project_uuid: str, span_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> SpanPublic:
        """
        Get traces by project UUID.

        Parameters
        ----------
        project_uuid : str

        span_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SpanPublic
            Successful Response

        Examples
        --------
        from mirascope import Lilypad

        client = Lilypad(
            api_key="YOUR_API_KEY",
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )
        client.projects.traces.get_root(
            project_uuid="project_uuid",
            span_id="span_id",
        )
        """
        _response = self._raw_client.get_root(project_uuid, span_id, request_options=request_options)
        return _response.data

    def list(
        self,
        project_uuid: str,
        *,
        limit: typing.Optional[int] = None,
        offset: typing.Optional[int] = None,
        order: typing.Optional[Order] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> PaginatedSpanPublic:
        """
        Get traces by project UUID.

        Parameters
        ----------
        project_uuid : str

        limit : typing.Optional[int]

        offset : typing.Optional[int]

        order : typing.Optional[Order]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PaginatedSpanPublic
            Successful Response

        Examples
        --------
        from mirascope import Lilypad

        client = Lilypad(
            api_key="YOUR_API_KEY",
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )
        client.projects.traces.list(
            project_uuid="project_uuid",
        )
        """
        _response = self._raw_client.list(
            project_uuid, limit=limit, offset=offset, order=order, request_options=request_options
        )
        return _response.data

    def create(
        self, project_uuid: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> TracesQueueResponse:
        """
        Create span traces using queue-based processing.

        Parameters
        ----------
        project_uuid : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        TracesQueueResponse
            Successful Response

        Examples
        --------
        from mirascope import Lilypad

        client = Lilypad(
            api_key="YOUR_API_KEY",
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )
        client.projects.traces.create(
            project_uuid="project_uuid",
        )
        """
        _response = self._raw_client.create(project_uuid, request_options=request_options)
        return _response.data


class AsyncTracesClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawTracesClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawTracesClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawTracesClient
        """
        return self._raw_client

    async def get_root(
        self, project_uuid: str, span_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> SpanPublic:
        """
        Get traces by project UUID.

        Parameters
        ----------
        project_uuid : str

        span_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SpanPublic
            Successful Response

        Examples
        --------
        import asyncio

        from mirascope import AsyncLilypad

        client = AsyncLilypad(
            api_key="YOUR_API_KEY",
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.projects.traces.get_root(
                project_uuid="project_uuid",
                span_id="span_id",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get_root(project_uuid, span_id, request_options=request_options)
        return _response.data

    async def list(
        self,
        project_uuid: str,
        *,
        limit: typing.Optional[int] = None,
        offset: typing.Optional[int] = None,
        order: typing.Optional[Order] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> PaginatedSpanPublic:
        """
        Get traces by project UUID.

        Parameters
        ----------
        project_uuid : str

        limit : typing.Optional[int]

        offset : typing.Optional[int]

        order : typing.Optional[Order]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PaginatedSpanPublic
            Successful Response

        Examples
        --------
        import asyncio

        from mirascope import AsyncLilypad

        client = AsyncLilypad(
            api_key="YOUR_API_KEY",
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.projects.traces.list(
                project_uuid="project_uuid",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.list(
            project_uuid, limit=limit, offset=offset, order=order, request_options=request_options
        )
        return _response.data

    async def create(
        self, project_uuid: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> TracesQueueResponse:
        """
        Create span traces using queue-based processing.

        Parameters
        ----------
        project_uuid : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        TracesQueueResponse
            Successful Response

        Examples
        --------
        import asyncio

        from mirascope import AsyncLilypad

        client = AsyncLilypad(
            api_key="YOUR_API_KEY",
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.projects.traces.create(
                project_uuid="project_uuid",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.create(project_uuid, request_options=request_options)
        return _response.data
