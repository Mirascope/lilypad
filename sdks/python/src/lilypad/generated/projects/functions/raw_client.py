# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing
from json.decoder import JSONDecodeError

from ...core.api_error import ApiError
from ...core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ...core.http_response import AsyncHttpResponse, HttpResponse
from ...core.jsonable_encoder import jsonable_encoder
from ...core.request_options import RequestOptions
from ...core.serialization import convert_and_respect_annotation_metadata
from ...core.unchecked_base_model import construct_type
from ...errors.unprocessable_entity_error import UnprocessableEntityError
from ...types.common_call_params import CommonCallParams
from ...types.dependency_info import DependencyInfo
from ...types.function_public import FunctionPublic
from ...types.http_validation_error import HttpValidationError

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class RawFunctionsClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def get_by_version(
        self,
        project_uuid: str,
        function_name: str,
        version_num: int,
        *,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HttpResponse[FunctionPublic]:
        """
        Get function by name.

        Parameters
        ----------
        project_uuid : str

        function_name : str

        version_num : int

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[FunctionPublic]
            Successful Response
        """
        _response = self._client_wrapper.httpx_client.request(
            f"projects/{jsonable_encoder(project_uuid)}/functions/name/{jsonable_encoder(function_name)}/version/{jsonable_encoder(version_num)}",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    FunctionPublic,
                    construct_type(
                        type_=FunctionPublic,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        HttpValidationError,
                        construct_type(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    def get_by_name(
        self, project_uuid: str, function_name: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> HttpResponse[typing.List[FunctionPublic]]:
        """
        Get function by name.

        Parameters
        ----------
        project_uuid : str

        function_name : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[typing.List[FunctionPublic]]
            Successful Response
        """
        _response = self._client_wrapper.httpx_client.request(
            f"projects/{jsonable_encoder(project_uuid)}/functions/name/{jsonable_encoder(function_name)}",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    typing.List[FunctionPublic],
                    construct_type(
                        type_=typing.List[FunctionPublic],  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        HttpValidationError,
                        construct_type(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    def get_deployed_environments(
        self, project_uuid: str, function_name: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> HttpResponse[FunctionPublic]:
        """
        Get the deployed function by function name and environment name.

        Parameters
        ----------
        project_uuid : str

        function_name : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[FunctionPublic]
            Successful Response
        """
        _response = self._client_wrapper.httpx_client.request(
            f"projects/{jsonable_encoder(project_uuid)}/functions/name/{jsonable_encoder(function_name)}/environments",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    FunctionPublic,
                    construct_type(
                        type_=FunctionPublic,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        HttpValidationError,
                        construct_type(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    def create_versioned(
        self,
        project_uuid_: str,
        *,
        name: str,
        signature: str,
        code: str,
        hash: str,
        project_uuid: typing.Optional[str] = OMIT,
        version_num: typing.Optional[int] = OMIT,
        dependencies: typing.Optional[typing.Dict[str, DependencyInfo]] = OMIT,
        arg_types: typing.Optional[typing.Dict[str, str]] = OMIT,
        archived: typing.Optional[dt.datetime] = OMIT,
        custom_id: typing.Optional[str] = OMIT,
        prompt_template: typing.Optional[str] = OMIT,
        provider: typing.Optional[str] = OMIT,
        model: typing.Optional[str] = OMIT,
        call_params: typing.Optional[CommonCallParams] = OMIT,
        is_versioned: typing.Optional[bool] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HttpResponse[FunctionPublic]:
        """
        Create a managed function.

        Parameters
        ----------
        project_uuid_ : str

        name : str

        signature : str

        code : str

        hash : str

        project_uuid : typing.Optional[str]

        version_num : typing.Optional[int]

        dependencies : typing.Optional[typing.Dict[str, DependencyInfo]]

        arg_types : typing.Optional[typing.Dict[str, str]]

        archived : typing.Optional[dt.datetime]

        custom_id : typing.Optional[str]

        prompt_template : typing.Optional[str]

        provider : typing.Optional[str]

        model : typing.Optional[str]

        call_params : typing.Optional[CommonCallParams]

        is_versioned : typing.Optional[bool]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[FunctionPublic]
            Successful Response
        """
        _response = self._client_wrapper.httpx_client.request(
            f"projects/{jsonable_encoder(project_uuid_)}/versioned-functions",
            method="POST",
            json={
                "project_uuid": project_uuid,
                "version_num": version_num,
                "name": name,
                "signature": signature,
                "code": code,
                "hash": hash,
                "dependencies": convert_and_respect_annotation_metadata(
                    object_=dependencies, annotation=typing.Dict[str, DependencyInfo], direction="write"
                ),
                "arg_types": arg_types,
                "archived": archived,
                "custom_id": custom_id,
                "prompt_template": prompt_template,
                "provider": provider,
                "model": model,
                "call_params": convert_and_respect_annotation_metadata(
                    object_=call_params, annotation=CommonCallParams, direction="write"
                ),
                "is_versioned": is_versioned,
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    FunctionPublic,
                    construct_type(
                        type_=FunctionPublic,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        HttpValidationError,
                        construct_type(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    def get_unique_names(
        self, project_uuid: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> HttpResponse[typing.List[str]]:
        """
        Get all unique function names.

        Parameters
        ----------
        project_uuid : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[typing.List[str]]
            Successful Response
        """
        _response = self._client_wrapper.httpx_client.request(
            f"projects/{jsonable_encoder(project_uuid)}/functions/metadata/names",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    typing.List[str],
                    construct_type(
                        type_=typing.List[str],  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        HttpValidationError,
                        construct_type(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    def get_latest_versions(
        self, project_uuid: str, *, environment_uuid: str, request_options: typing.Optional[RequestOptions] = None
    ) -> HttpResponse[typing.List[FunctionPublic]]:
        """
        Get all unique function names.

        Parameters
        ----------
        project_uuid : str

        environment_uuid : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[typing.List[FunctionPublic]]
            Successful Response
        """
        _response = self._client_wrapper.httpx_client.request(
            f"projects/{jsonable_encoder(project_uuid)}/functions/metadata/names/versions",
            method="GET",
            params={
                "environment_uuid": environment_uuid,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    typing.List[FunctionPublic],
                    construct_type(
                        type_=typing.List[FunctionPublic],  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        HttpValidationError,
                        construct_type(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    def get_by_hash(
        self, project_uuid: str, function_hash: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> HttpResponse[FunctionPublic]:
        """
        Get function by hash.

        Parameters
        ----------
        project_uuid : str

        function_hash : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[FunctionPublic]
            Successful Response
        """
        _response = self._client_wrapper.httpx_client.request(
            f"projects/{jsonable_encoder(project_uuid)}/functions/hash/{jsonable_encoder(function_hash)}",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    FunctionPublic,
                    construct_type(
                        type_=FunctionPublic,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        HttpValidationError,
                        construct_type(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    def list(
        self, project_uuid: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> HttpResponse[typing.List[FunctionPublic]]:
        """
        Grab all functions.

        Parameters
        ----------
        project_uuid : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[typing.List[FunctionPublic]]
            Successful Response
        """
        _response = self._client_wrapper.httpx_client.request(
            f"projects/{jsonable_encoder(project_uuid)}/functions",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    typing.List[FunctionPublic],
                    construct_type(
                        type_=typing.List[FunctionPublic],  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        HttpValidationError,
                        construct_type(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    def create(
        self,
        project_uuid_: str,
        *,
        name: str,
        signature: str,
        code: str,
        hash: str,
        project_uuid: typing.Optional[str] = OMIT,
        version_num: typing.Optional[int] = OMIT,
        dependencies: typing.Optional[typing.Dict[str, DependencyInfo]] = OMIT,
        arg_types: typing.Optional[typing.Dict[str, str]] = OMIT,
        archived: typing.Optional[dt.datetime] = OMIT,
        custom_id: typing.Optional[str] = OMIT,
        prompt_template: typing.Optional[str] = OMIT,
        provider: typing.Optional[str] = OMIT,
        model: typing.Optional[str] = OMIT,
        call_params: typing.Optional[CommonCallParams] = OMIT,
        is_versioned: typing.Optional[bool] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HttpResponse[FunctionPublic]:
        """
        Create a new function version.

        Parameters
        ----------
        project_uuid_ : str

        name : str

        signature : str

        code : str

        hash : str

        project_uuid : typing.Optional[str]

        version_num : typing.Optional[int]

        dependencies : typing.Optional[typing.Dict[str, DependencyInfo]]

        arg_types : typing.Optional[typing.Dict[str, str]]

        archived : typing.Optional[dt.datetime]

        custom_id : typing.Optional[str]

        prompt_template : typing.Optional[str]

        provider : typing.Optional[str]

        model : typing.Optional[str]

        call_params : typing.Optional[CommonCallParams]

        is_versioned : typing.Optional[bool]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[FunctionPublic]
            Successful Response
        """
        _response = self._client_wrapper.httpx_client.request(
            f"projects/{jsonable_encoder(project_uuid_)}/functions",
            method="POST",
            json={
                "project_uuid": project_uuid,
                "version_num": version_num,
                "name": name,
                "signature": signature,
                "code": code,
                "hash": hash,
                "dependencies": convert_and_respect_annotation_metadata(
                    object_=dependencies, annotation=typing.Dict[str, DependencyInfo], direction="write"
                ),
                "arg_types": arg_types,
                "archived": archived,
                "custom_id": custom_id,
                "prompt_template": prompt_template,
                "provider": provider,
                "model": model,
                "call_params": convert_and_respect_annotation_metadata(
                    object_=call_params, annotation=CommonCallParams, direction="write"
                ),
                "is_versioned": is_versioned,
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    FunctionPublic,
                    construct_type(
                        type_=FunctionPublic,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        HttpValidationError,
                        construct_type(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    def get(
        self, project_uuid: str, function_uuid: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> HttpResponse[FunctionPublic]:
        """
        Grab function by UUID.

        Parameters
        ----------
        project_uuid : str

        function_uuid : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[FunctionPublic]
            Successful Response
        """
        _response = self._client_wrapper.httpx_client.request(
            f"projects/{jsonable_encoder(project_uuid)}/functions/{jsonable_encoder(function_uuid)}",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    FunctionPublic,
                    construct_type(
                        type_=FunctionPublic,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        HttpValidationError,
                        construct_type(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    def archive(
        self,
        project_uuid: str,
        function_uuid: str,
        *,
        environment_uuid: str,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HttpResponse[bool]:
        """
        Archive a function and delete spans by function UUID.

        Parameters
        ----------
        project_uuid : str

        function_uuid : str

        environment_uuid : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[bool]
            Successful Response
        """
        _response = self._client_wrapper.httpx_client.request(
            f"projects/{jsonable_encoder(project_uuid)}/functions/{jsonable_encoder(function_uuid)}",
            method="DELETE",
            params={
                "environment_uuid": environment_uuid,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    bool,
                    construct_type(
                        type_=bool,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        HttpValidationError,
                        construct_type(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    def update(
        self, project_uuid: str, function_uuid: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> HttpResponse[FunctionPublic]:
        """
        Update a function.

        Parameters
        ----------
        project_uuid : str

        function_uuid : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[FunctionPublic]
            Successful Response
        """
        _response = self._client_wrapper.httpx_client.request(
            f"projects/{jsonable_encoder(project_uuid)}/functions/{jsonable_encoder(function_uuid)}",
            method="PATCH",
            json={},
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    FunctionPublic,
                    construct_type(
                        type_=FunctionPublic,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        HttpValidationError,
                        construct_type(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    def archive_by_name(
        self,
        project_uuid: str,
        function_name: str,
        *,
        environment_uuid: str,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HttpResponse[bool]:
        """
        Archive a function by name and delete spans by function name.

        Parameters
        ----------
        project_uuid : str

        function_name : str

        environment_uuid : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[bool]
            Successful Response
        """
        _response = self._client_wrapper.httpx_client.request(
            f"projects/{jsonable_encoder(project_uuid)}/functions/names/{jsonable_encoder(function_name)}",
            method="DELETE",
            params={
                "environment_uuid": environment_uuid,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    bool,
                    construct_type(
                        type_=bool,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        HttpValidationError,
                        construct_type(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)


class AsyncRawFunctionsClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def get_by_version(
        self,
        project_uuid: str,
        function_name: str,
        version_num: int,
        *,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncHttpResponse[FunctionPublic]:
        """
        Get function by name.

        Parameters
        ----------
        project_uuid : str

        function_name : str

        version_num : int

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[FunctionPublic]
            Successful Response
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"projects/{jsonable_encoder(project_uuid)}/functions/name/{jsonable_encoder(function_name)}/version/{jsonable_encoder(version_num)}",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    FunctionPublic,
                    construct_type(
                        type_=FunctionPublic,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        HttpValidationError,
                        construct_type(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    async def get_by_name(
        self, project_uuid: str, function_name: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> AsyncHttpResponse[typing.List[FunctionPublic]]:
        """
        Get function by name.

        Parameters
        ----------
        project_uuid : str

        function_name : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[typing.List[FunctionPublic]]
            Successful Response
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"projects/{jsonable_encoder(project_uuid)}/functions/name/{jsonable_encoder(function_name)}",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    typing.List[FunctionPublic],
                    construct_type(
                        type_=typing.List[FunctionPublic],  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        HttpValidationError,
                        construct_type(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    async def get_deployed_environments(
        self, project_uuid: str, function_name: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> AsyncHttpResponse[FunctionPublic]:
        """
        Get the deployed function by function name and environment name.

        Parameters
        ----------
        project_uuid : str

        function_name : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[FunctionPublic]
            Successful Response
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"projects/{jsonable_encoder(project_uuid)}/functions/name/{jsonable_encoder(function_name)}/environments",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    FunctionPublic,
                    construct_type(
                        type_=FunctionPublic,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        HttpValidationError,
                        construct_type(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    async def create_versioned(
        self,
        project_uuid_: str,
        *,
        name: str,
        signature: str,
        code: str,
        hash: str,
        project_uuid: typing.Optional[str] = OMIT,
        version_num: typing.Optional[int] = OMIT,
        dependencies: typing.Optional[typing.Dict[str, DependencyInfo]] = OMIT,
        arg_types: typing.Optional[typing.Dict[str, str]] = OMIT,
        archived: typing.Optional[dt.datetime] = OMIT,
        custom_id: typing.Optional[str] = OMIT,
        prompt_template: typing.Optional[str] = OMIT,
        provider: typing.Optional[str] = OMIT,
        model: typing.Optional[str] = OMIT,
        call_params: typing.Optional[CommonCallParams] = OMIT,
        is_versioned: typing.Optional[bool] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncHttpResponse[FunctionPublic]:
        """
        Create a managed function.

        Parameters
        ----------
        project_uuid_ : str

        name : str

        signature : str

        code : str

        hash : str

        project_uuid : typing.Optional[str]

        version_num : typing.Optional[int]

        dependencies : typing.Optional[typing.Dict[str, DependencyInfo]]

        arg_types : typing.Optional[typing.Dict[str, str]]

        archived : typing.Optional[dt.datetime]

        custom_id : typing.Optional[str]

        prompt_template : typing.Optional[str]

        provider : typing.Optional[str]

        model : typing.Optional[str]

        call_params : typing.Optional[CommonCallParams]

        is_versioned : typing.Optional[bool]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[FunctionPublic]
            Successful Response
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"projects/{jsonable_encoder(project_uuid_)}/versioned-functions",
            method="POST",
            json={
                "project_uuid": project_uuid,
                "version_num": version_num,
                "name": name,
                "signature": signature,
                "code": code,
                "hash": hash,
                "dependencies": convert_and_respect_annotation_metadata(
                    object_=dependencies, annotation=typing.Dict[str, DependencyInfo], direction="write"
                ),
                "arg_types": arg_types,
                "archived": archived,
                "custom_id": custom_id,
                "prompt_template": prompt_template,
                "provider": provider,
                "model": model,
                "call_params": convert_and_respect_annotation_metadata(
                    object_=call_params, annotation=CommonCallParams, direction="write"
                ),
                "is_versioned": is_versioned,
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    FunctionPublic,
                    construct_type(
                        type_=FunctionPublic,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        HttpValidationError,
                        construct_type(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    async def get_unique_names(
        self, project_uuid: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> AsyncHttpResponse[typing.List[str]]:
        """
        Get all unique function names.

        Parameters
        ----------
        project_uuid : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[typing.List[str]]
            Successful Response
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"projects/{jsonable_encoder(project_uuid)}/functions/metadata/names",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    typing.List[str],
                    construct_type(
                        type_=typing.List[str],  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        HttpValidationError,
                        construct_type(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    async def get_latest_versions(
        self, project_uuid: str, *, environment_uuid: str, request_options: typing.Optional[RequestOptions] = None
    ) -> AsyncHttpResponse[typing.List[FunctionPublic]]:
        """
        Get all unique function names.

        Parameters
        ----------
        project_uuid : str

        environment_uuid : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[typing.List[FunctionPublic]]
            Successful Response
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"projects/{jsonable_encoder(project_uuid)}/functions/metadata/names/versions",
            method="GET",
            params={
                "environment_uuid": environment_uuid,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    typing.List[FunctionPublic],
                    construct_type(
                        type_=typing.List[FunctionPublic],  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        HttpValidationError,
                        construct_type(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    async def get_by_hash(
        self, project_uuid: str, function_hash: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> AsyncHttpResponse[FunctionPublic]:
        """
        Get function by hash.

        Parameters
        ----------
        project_uuid : str

        function_hash : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[FunctionPublic]
            Successful Response
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"projects/{jsonable_encoder(project_uuid)}/functions/hash/{jsonable_encoder(function_hash)}",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    FunctionPublic,
                    construct_type(
                        type_=FunctionPublic,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        HttpValidationError,
                        construct_type(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    async def list(
        self, project_uuid: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> AsyncHttpResponse[typing.List[FunctionPublic]]:
        """
        Grab all functions.

        Parameters
        ----------
        project_uuid : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[typing.List[FunctionPublic]]
            Successful Response
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"projects/{jsonable_encoder(project_uuid)}/functions",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    typing.List[FunctionPublic],
                    construct_type(
                        type_=typing.List[FunctionPublic],  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        HttpValidationError,
                        construct_type(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    async def create(
        self,
        project_uuid_: str,
        *,
        name: str,
        signature: str,
        code: str,
        hash: str,
        project_uuid: typing.Optional[str] = OMIT,
        version_num: typing.Optional[int] = OMIT,
        dependencies: typing.Optional[typing.Dict[str, DependencyInfo]] = OMIT,
        arg_types: typing.Optional[typing.Dict[str, str]] = OMIT,
        archived: typing.Optional[dt.datetime] = OMIT,
        custom_id: typing.Optional[str] = OMIT,
        prompt_template: typing.Optional[str] = OMIT,
        provider: typing.Optional[str] = OMIT,
        model: typing.Optional[str] = OMIT,
        call_params: typing.Optional[CommonCallParams] = OMIT,
        is_versioned: typing.Optional[bool] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncHttpResponse[FunctionPublic]:
        """
        Create a new function version.

        Parameters
        ----------
        project_uuid_ : str

        name : str

        signature : str

        code : str

        hash : str

        project_uuid : typing.Optional[str]

        version_num : typing.Optional[int]

        dependencies : typing.Optional[typing.Dict[str, DependencyInfo]]

        arg_types : typing.Optional[typing.Dict[str, str]]

        archived : typing.Optional[dt.datetime]

        custom_id : typing.Optional[str]

        prompt_template : typing.Optional[str]

        provider : typing.Optional[str]

        model : typing.Optional[str]

        call_params : typing.Optional[CommonCallParams]

        is_versioned : typing.Optional[bool]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[FunctionPublic]
            Successful Response
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"projects/{jsonable_encoder(project_uuid_)}/functions",
            method="POST",
            json={
                "project_uuid": project_uuid,
                "version_num": version_num,
                "name": name,
                "signature": signature,
                "code": code,
                "hash": hash,
                "dependencies": convert_and_respect_annotation_metadata(
                    object_=dependencies, annotation=typing.Dict[str, DependencyInfo], direction="write"
                ),
                "arg_types": arg_types,
                "archived": archived,
                "custom_id": custom_id,
                "prompt_template": prompt_template,
                "provider": provider,
                "model": model,
                "call_params": convert_and_respect_annotation_metadata(
                    object_=call_params, annotation=CommonCallParams, direction="write"
                ),
                "is_versioned": is_versioned,
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    FunctionPublic,
                    construct_type(
                        type_=FunctionPublic,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        HttpValidationError,
                        construct_type(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    async def get(
        self, project_uuid: str, function_uuid: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> AsyncHttpResponse[FunctionPublic]:
        """
        Grab function by UUID.

        Parameters
        ----------
        project_uuid : str

        function_uuid : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[FunctionPublic]
            Successful Response
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"projects/{jsonable_encoder(project_uuid)}/functions/{jsonable_encoder(function_uuid)}",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    FunctionPublic,
                    construct_type(
                        type_=FunctionPublic,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        HttpValidationError,
                        construct_type(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    async def archive(
        self,
        project_uuid: str,
        function_uuid: str,
        *,
        environment_uuid: str,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncHttpResponse[bool]:
        """
        Archive a function and delete spans by function UUID.

        Parameters
        ----------
        project_uuid : str

        function_uuid : str

        environment_uuid : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[bool]
            Successful Response
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"projects/{jsonable_encoder(project_uuid)}/functions/{jsonable_encoder(function_uuid)}",
            method="DELETE",
            params={
                "environment_uuid": environment_uuid,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    bool,
                    construct_type(
                        type_=bool,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        HttpValidationError,
                        construct_type(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    async def update(
        self, project_uuid: str, function_uuid: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> AsyncHttpResponse[FunctionPublic]:
        """
        Update a function.

        Parameters
        ----------
        project_uuid : str

        function_uuid : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[FunctionPublic]
            Successful Response
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"projects/{jsonable_encoder(project_uuid)}/functions/{jsonable_encoder(function_uuid)}",
            method="PATCH",
            json={},
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    FunctionPublic,
                    construct_type(
                        type_=FunctionPublic,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        HttpValidationError,
                        construct_type(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    async def archive_by_name(
        self,
        project_uuid: str,
        function_name: str,
        *,
        environment_uuid: str,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncHttpResponse[bool]:
        """
        Archive a function by name and delete spans by function name.

        Parameters
        ----------
        project_uuid : str

        function_name : str

        environment_uuid : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[bool]
            Successful Response
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"projects/{jsonable_encoder(project_uuid)}/functions/names/{jsonable_encoder(function_name)}",
            method="DELETE",
            params={
                "environment_uuid": environment_uuid,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    bool,
                    construct_type(
                        type_=bool,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        HttpValidationError,
                        construct_type(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)
