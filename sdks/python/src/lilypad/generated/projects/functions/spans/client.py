# This file was auto-generated by Fern from our API Definition.

import typing

from ....core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ....core.request_options import RequestOptions
from ....types.aggregate_metrics import AggregateMetrics
from ....types.paginated_span_public import PaginatedSpanPublic
from ....types.time_frame import TimeFrame
from .raw_client import AsyncRawSpansClient, RawSpansClient
from .types.order import Order


class SpansClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawSpansClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawSpansClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawSpansClient
        """
        return self._raw_client

    def get_aggregates(
        self,
        project_uuid: str,
        function_uuid: str,
        *,
        time_frame: TimeFrame,
        environment_uuid: str,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[AggregateMetrics]:
        """
        Get aggregated span by function uuid.

        Parameters
        ----------
        project_uuid : str

        function_uuid : str

        time_frame : TimeFrame

        environment_uuid : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[AggregateMetrics]
            Successful Response

        Examples
        --------
        from mirascope import Lilypad

        client = Lilypad(
            api_key="YOUR_API_KEY",
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )
        client.projects.functions.spans.get_aggregates(
            project_uuid="project_uuid",
            function_uuid="function_uuid",
            time_frame="day",
            environment_uuid="environment_uuid",
        )
        """
        _response = self._raw_client.get_aggregates(
            project_uuid,
            function_uuid,
            time_frame=time_frame,
            environment_uuid=environment_uuid,
            request_options=request_options,
        )
        return _response.data

    def list_paginated(
        self,
        project_uuid: str,
        function_uuid: str,
        *,
        environment_uuid: str,
        limit: typing.Optional[int] = None,
        offset: typing.Optional[int] = None,
        order: typing.Optional[Order] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> PaginatedSpanPublic:
        """
        Get spans for a function with pagination (new, non-breaking).

        Parameters
        ----------
        project_uuid : str

        function_uuid : str

        environment_uuid : str

        limit : typing.Optional[int]

        offset : typing.Optional[int]

        order : typing.Optional[Order]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PaginatedSpanPublic
            Successful Response

        Examples
        --------
        from mirascope import Lilypad

        client = Lilypad(
            api_key="YOUR_API_KEY",
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )
        client.projects.functions.spans.list_paginated(
            project_uuid="project_uuid",
            function_uuid="function_uuid",
            environment_uuid="environment_uuid",
        )
        """
        _response = self._raw_client.list_paginated(
            project_uuid,
            function_uuid,
            environment_uuid=environment_uuid,
            limit=limit,
            offset=offset,
            order=order,
            request_options=request_options,
        )
        return _response.data


class AsyncSpansClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawSpansClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawSpansClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawSpansClient
        """
        return self._raw_client

    async def get_aggregates(
        self,
        project_uuid: str,
        function_uuid: str,
        *,
        time_frame: TimeFrame,
        environment_uuid: str,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[AggregateMetrics]:
        """
        Get aggregated span by function uuid.

        Parameters
        ----------
        project_uuid : str

        function_uuid : str

        time_frame : TimeFrame

        environment_uuid : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[AggregateMetrics]
            Successful Response

        Examples
        --------
        import asyncio

        from mirascope import AsyncLilypad

        client = AsyncLilypad(
            api_key="YOUR_API_KEY",
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.projects.functions.spans.get_aggregates(
                project_uuid="project_uuid",
                function_uuid="function_uuid",
                time_frame="day",
                environment_uuid="environment_uuid",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get_aggregates(
            project_uuid,
            function_uuid,
            time_frame=time_frame,
            environment_uuid=environment_uuid,
            request_options=request_options,
        )
        return _response.data

    async def list_paginated(
        self,
        project_uuid: str,
        function_uuid: str,
        *,
        environment_uuid: str,
        limit: typing.Optional[int] = None,
        offset: typing.Optional[int] = None,
        order: typing.Optional[Order] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> PaginatedSpanPublic:
        """
        Get spans for a function with pagination (new, non-breaking).

        Parameters
        ----------
        project_uuid : str

        function_uuid : str

        environment_uuid : str

        limit : typing.Optional[int]

        offset : typing.Optional[int]

        order : typing.Optional[Order]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PaginatedSpanPublic
            Successful Response

        Examples
        --------
        import asyncio

        from mirascope import AsyncLilypad

        client = AsyncLilypad(
            api_key="YOUR_API_KEY",
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.projects.functions.spans.list_paginated(
                project_uuid="project_uuid",
                function_uuid="function_uuid",
                environment_uuid="environment_uuid",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.list_paginated(
            project_uuid,
            function_uuid,
            environment_uuid=environment_uuid,
            limit=limit,
            offset=offset,
            order=order,
            request_options=request_options,
        )
        return _response.data
