# This file was auto-generated by Fern from our API Definition.

import typing
from json.decoder import JSONDecodeError

from ....core.api_error import ApiError
from ....core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ....core.http_response import AsyncHttpResponse, HttpResponse
from ....core.jsonable_encoder import jsonable_encoder
from ....core.request_options import RequestOptions
from ....core.unchecked_base_model import construct_type
from ....errors.unprocessable_entity_error import UnprocessableEntityError
from ....types.aggregate_metrics import AggregateMetrics
from ....types.http_validation_error import HttpValidationError
from ....types.paginated_span_public import PaginatedSpanPublic
from ....types.time_frame import TimeFrame
from .types.order import Order


class RawSpansClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def get_aggregates(
        self,
        project_uuid: str,
        function_uuid: str,
        *,
        time_frame: TimeFrame,
        environment_uuid: str,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HttpResponse[typing.List[AggregateMetrics]]:
        """
        Get aggregated span by function uuid.

        Parameters
        ----------
        project_uuid : str

        function_uuid : str

        time_frame : TimeFrame

        environment_uuid : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[typing.List[AggregateMetrics]]
            Successful Response
        """
        _response = self._client_wrapper.httpx_client.request(
            f"projects/{jsonable_encoder(project_uuid)}/functions/{jsonable_encoder(function_uuid)}/spans/metadata",
            method="GET",
            params={
                "time_frame": time_frame,
                "environment_uuid": environment_uuid,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    typing.List[AggregateMetrics],
                    construct_type(
                        type_=typing.List[AggregateMetrics],  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        HttpValidationError,
                        construct_type(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    def list_paginated(
        self,
        project_uuid: str,
        function_uuid: str,
        *,
        environment_uuid: str,
        limit: typing.Optional[int] = None,
        offset: typing.Optional[int] = None,
        order: typing.Optional[Order] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HttpResponse[PaginatedSpanPublic]:
        """
        Get spans for a function with pagination (new, non-breaking).

        Parameters
        ----------
        project_uuid : str

        function_uuid : str

        environment_uuid : str

        limit : typing.Optional[int]

        offset : typing.Optional[int]

        order : typing.Optional[Order]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[PaginatedSpanPublic]
            Successful Response
        """
        _response = self._client_wrapper.httpx_client.request(
            f"projects/{jsonable_encoder(project_uuid)}/functions/{jsonable_encoder(function_uuid)}/spans/paginated",
            method="GET",
            params={
                "environment_uuid": environment_uuid,
                "limit": limit,
                "offset": offset,
                "order": order,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    PaginatedSpanPublic,
                    construct_type(
                        type_=PaginatedSpanPublic,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        HttpValidationError,
                        construct_type(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)


class AsyncRawSpansClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def get_aggregates(
        self,
        project_uuid: str,
        function_uuid: str,
        *,
        time_frame: TimeFrame,
        environment_uuid: str,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncHttpResponse[typing.List[AggregateMetrics]]:
        """
        Get aggregated span by function uuid.

        Parameters
        ----------
        project_uuid : str

        function_uuid : str

        time_frame : TimeFrame

        environment_uuid : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[typing.List[AggregateMetrics]]
            Successful Response
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"projects/{jsonable_encoder(project_uuid)}/functions/{jsonable_encoder(function_uuid)}/spans/metadata",
            method="GET",
            params={
                "time_frame": time_frame,
                "environment_uuid": environment_uuid,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    typing.List[AggregateMetrics],
                    construct_type(
                        type_=typing.List[AggregateMetrics],  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        HttpValidationError,
                        construct_type(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    async def list_paginated(
        self,
        project_uuid: str,
        function_uuid: str,
        *,
        environment_uuid: str,
        limit: typing.Optional[int] = None,
        offset: typing.Optional[int] = None,
        order: typing.Optional[Order] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncHttpResponse[PaginatedSpanPublic]:
        """
        Get spans for a function with pagination (new, non-breaking).

        Parameters
        ----------
        project_uuid : str

        function_uuid : str

        environment_uuid : str

        limit : typing.Optional[int]

        offset : typing.Optional[int]

        order : typing.Optional[Order]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[PaginatedSpanPublic]
            Successful Response
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"projects/{jsonable_encoder(project_uuid)}/functions/{jsonable_encoder(function_uuid)}/spans/paginated",
            method="GET",
            params={
                "environment_uuid": environment_uuid,
                "limit": limit,
                "offset": offset,
                "order": order,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    PaginatedSpanPublic,
                    construct_type(
                        type_=PaginatedSpanPublic,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        HttpValidationError,
                        construct_type(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)
