# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ...core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ...core.request_options import RequestOptions
from ...types.common_call_params import CommonCallParams
from ...types.dependency_info import DependencyInfo
from ...types.function_public import FunctionPublic
from .raw_client import AsyncRawFunctionsClient, RawFunctionsClient
from .spans.client import AsyncSpansClient, SpansClient

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class FunctionsClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawFunctionsClient(client_wrapper=client_wrapper)
        self.spans = SpansClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawFunctionsClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawFunctionsClient
        """
        return self._raw_client

    def get_by_version(
        self,
        project_uuid: str,
        function_name: str,
        version_num: int,
        *,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> FunctionPublic:
        """
        Get function by name.

        Parameters
        ----------
        project_uuid : str

        function_name : str

        version_num : int

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        FunctionPublic
            Successful Response

        Examples
        --------
        from mirascope import Lilypad

        client = Lilypad(
            api_key="YOUR_API_KEY",
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )
        client.projects.functions.get_by_version(
            project_uuid="project_uuid",
            function_name="function_name",
            version_num=1,
        )
        """
        _response = self._raw_client.get_by_version(
            project_uuid, function_name, version_num, request_options=request_options
        )
        return _response.data

    def get_by_name(
        self, project_uuid: str, function_name: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.List[FunctionPublic]:
        """
        Get function by name.

        Parameters
        ----------
        project_uuid : str

        function_name : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[FunctionPublic]
            Successful Response

        Examples
        --------
        from mirascope import Lilypad

        client = Lilypad(
            api_key="YOUR_API_KEY",
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )
        client.projects.functions.get_by_name(
            project_uuid="project_uuid",
            function_name="function_name",
        )
        """
        _response = self._raw_client.get_by_name(project_uuid, function_name, request_options=request_options)
        return _response.data

    def get_deployed_environments(
        self, project_uuid: str, function_name: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> FunctionPublic:
        """
        Get the deployed function by function name and environment name.

        Parameters
        ----------
        project_uuid : str

        function_name : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        FunctionPublic
            Successful Response

        Examples
        --------
        from mirascope import Lilypad

        client = Lilypad(
            api_key="YOUR_API_KEY",
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )
        client.projects.functions.get_deployed_environments(
            project_uuid="project_uuid",
            function_name="function_name",
        )
        """
        _response = self._raw_client.get_deployed_environments(
            project_uuid, function_name, request_options=request_options
        )
        return _response.data

    def create_versioned(
        self,
        project_uuid_: str,
        *,
        name: str,
        signature: str,
        code: str,
        hash: str,
        project_uuid: typing.Optional[str] = OMIT,
        version_num: typing.Optional[int] = OMIT,
        dependencies: typing.Optional[typing.Dict[str, DependencyInfo]] = OMIT,
        arg_types: typing.Optional[typing.Dict[str, str]] = OMIT,
        archived: typing.Optional[dt.datetime] = OMIT,
        custom_id: typing.Optional[str] = OMIT,
        prompt_template: typing.Optional[str] = OMIT,
        provider: typing.Optional[str] = OMIT,
        model: typing.Optional[str] = OMIT,
        call_params: typing.Optional[CommonCallParams] = OMIT,
        is_versioned: typing.Optional[bool] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> FunctionPublic:
        """
        Create a managed function.

        Parameters
        ----------
        project_uuid_ : str

        name : str

        signature : str

        code : str

        hash : str

        project_uuid : typing.Optional[str]

        version_num : typing.Optional[int]

        dependencies : typing.Optional[typing.Dict[str, DependencyInfo]]

        arg_types : typing.Optional[typing.Dict[str, str]]

        archived : typing.Optional[dt.datetime]

        custom_id : typing.Optional[str]

        prompt_template : typing.Optional[str]

        provider : typing.Optional[str]

        model : typing.Optional[str]

        call_params : typing.Optional[CommonCallParams]

        is_versioned : typing.Optional[bool]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        FunctionPublic
            Successful Response

        Examples
        --------
        from mirascope import Lilypad

        client = Lilypad(
            api_key="YOUR_API_KEY",
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )
        client.projects.functions.create_versioned(
            project_uuid_="project_uuid",
            name="name",
            signature="signature",
            code="code",
            hash="hash",
        )
        """
        _response = self._raw_client.create_versioned(
            project_uuid_,
            name=name,
            signature=signature,
            code=code,
            hash=hash,
            project_uuid=project_uuid,
            version_num=version_num,
            dependencies=dependencies,
            arg_types=arg_types,
            archived=archived,
            custom_id=custom_id,
            prompt_template=prompt_template,
            provider=provider,
            model=model,
            call_params=call_params,
            is_versioned=is_versioned,
            request_options=request_options,
        )
        return _response.data

    def get_unique_names(
        self, project_uuid: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.List[str]:
        """
        Get all unique function names.

        Parameters
        ----------
        project_uuid : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[str]
            Successful Response

        Examples
        --------
        from mirascope import Lilypad

        client = Lilypad(
            api_key="YOUR_API_KEY",
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )
        client.projects.functions.get_unique_names(
            project_uuid="project_uuid",
        )
        """
        _response = self._raw_client.get_unique_names(project_uuid, request_options=request_options)
        return _response.data

    def get_latest_versions(
        self, project_uuid: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.List[FunctionPublic]:
        """
        Get all unique function names.

        Parameters
        ----------
        project_uuid : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[FunctionPublic]
            Successful Response

        Examples
        --------
        from mirascope import Lilypad

        client = Lilypad(
            api_key="YOUR_API_KEY",
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )
        client.projects.functions.get_latest_versions(
            project_uuid="project_uuid",
        )
        """
        _response = self._raw_client.get_latest_versions(project_uuid, request_options=request_options)
        return _response.data

    def get_by_hash(
        self, project_uuid: str, function_hash: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> FunctionPublic:
        """
        Get function by hash.

        Parameters
        ----------
        project_uuid : str

        function_hash : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        FunctionPublic
            Successful Response

        Examples
        --------
        from mirascope import Lilypad

        client = Lilypad(
            api_key="YOUR_API_KEY",
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )
        client.projects.functions.get_by_hash(
            project_uuid="project_uuid",
            function_hash="function_hash",
        )
        """
        _response = self._raw_client.get_by_hash(project_uuid, function_hash, request_options=request_options)
        return _response.data

    def list(
        self, project_uuid: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.List[FunctionPublic]:
        """
        Grab all functions.

        Parameters
        ----------
        project_uuid : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[FunctionPublic]
            Successful Response

        Examples
        --------
        from mirascope import Lilypad

        client = Lilypad(
            api_key="YOUR_API_KEY",
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )
        client.projects.functions.list(
            project_uuid="project_uuid",
        )
        """
        _response = self._raw_client.list(project_uuid, request_options=request_options)
        return _response.data

    def create(
        self,
        project_uuid_: str,
        *,
        name: str,
        signature: str,
        code: str,
        hash: str,
        project_uuid: typing.Optional[str] = OMIT,
        version_num: typing.Optional[int] = OMIT,
        dependencies: typing.Optional[typing.Dict[str, DependencyInfo]] = OMIT,
        arg_types: typing.Optional[typing.Dict[str, str]] = OMIT,
        archived: typing.Optional[dt.datetime] = OMIT,
        custom_id: typing.Optional[str] = OMIT,
        prompt_template: typing.Optional[str] = OMIT,
        provider: typing.Optional[str] = OMIT,
        model: typing.Optional[str] = OMIT,
        call_params: typing.Optional[CommonCallParams] = OMIT,
        is_versioned: typing.Optional[bool] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> FunctionPublic:
        """
        Create a new function version.

        Parameters
        ----------
        project_uuid_ : str

        name : str

        signature : str

        code : str

        hash : str

        project_uuid : typing.Optional[str]

        version_num : typing.Optional[int]

        dependencies : typing.Optional[typing.Dict[str, DependencyInfo]]

        arg_types : typing.Optional[typing.Dict[str, str]]

        archived : typing.Optional[dt.datetime]

        custom_id : typing.Optional[str]

        prompt_template : typing.Optional[str]

        provider : typing.Optional[str]

        model : typing.Optional[str]

        call_params : typing.Optional[CommonCallParams]

        is_versioned : typing.Optional[bool]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        FunctionPublic
            Successful Response

        Examples
        --------
        from mirascope import Lilypad

        client = Lilypad(
            api_key="YOUR_API_KEY",
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )
        client.projects.functions.create(
            project_uuid_="project_uuid",
            name="name",
            signature="signature",
            code="code",
            hash="hash",
        )
        """
        _response = self._raw_client.create(
            project_uuid_,
            name=name,
            signature=signature,
            code=code,
            hash=hash,
            project_uuid=project_uuid,
            version_num=version_num,
            dependencies=dependencies,
            arg_types=arg_types,
            archived=archived,
            custom_id=custom_id,
            prompt_template=prompt_template,
            provider=provider,
            model=model,
            call_params=call_params,
            is_versioned=is_versioned,
            request_options=request_options,
        )
        return _response.data

    def get(
        self, project_uuid: str, function_uuid: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> FunctionPublic:
        """
        Grab function by UUID.

        Parameters
        ----------
        project_uuid : str

        function_uuid : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        FunctionPublic
            Successful Response

        Examples
        --------
        from mirascope import Lilypad

        client = Lilypad(
            api_key="YOUR_API_KEY",
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )
        client.projects.functions.get(
            project_uuid="project_uuid",
            function_uuid="function_uuid",
        )
        """
        _response = self._raw_client.get(project_uuid, function_uuid, request_options=request_options)
        return _response.data

    def archive(
        self, project_uuid: str, function_uuid: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> bool:
        """
        Archive a function and delete spans by function UUID.

        Parameters
        ----------
        project_uuid : str

        function_uuid : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        bool
            Successful Response

        Examples
        --------
        from mirascope import Lilypad

        client = Lilypad(
            api_key="YOUR_API_KEY",
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )
        client.projects.functions.archive(
            project_uuid="project_uuid",
            function_uuid="function_uuid",
        )
        """
        _response = self._raw_client.archive(project_uuid, function_uuid, request_options=request_options)
        return _response.data

    def update(
        self, project_uuid: str, function_uuid: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> FunctionPublic:
        """
        Update a function.

        Parameters
        ----------
        project_uuid : str

        function_uuid : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        FunctionPublic
            Successful Response

        Examples
        --------
        from mirascope import Lilypad

        client = Lilypad(
            api_key="YOUR_API_KEY",
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )
        client.projects.functions.update(
            project_uuid="project_uuid",
            function_uuid="function_uuid",
        )
        """
        _response = self._raw_client.update(project_uuid, function_uuid, request_options=request_options)
        return _response.data

    def archive_by_name(
        self, project_uuid: str, function_name: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> bool:
        """
        Archive a function by name and delete spans by function name.

        Parameters
        ----------
        project_uuid : str

        function_name : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        bool
            Successful Response

        Examples
        --------
        from mirascope import Lilypad

        client = Lilypad(
            api_key="YOUR_API_KEY",
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )
        client.projects.functions.archive_by_name(
            project_uuid="project_uuid",
            function_name="function_name",
        )
        """
        _response = self._raw_client.archive_by_name(project_uuid, function_name, request_options=request_options)
        return _response.data


class AsyncFunctionsClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawFunctionsClient(client_wrapper=client_wrapper)
        self.spans = AsyncSpansClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawFunctionsClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawFunctionsClient
        """
        return self._raw_client

    async def get_by_version(
        self,
        project_uuid: str,
        function_name: str,
        version_num: int,
        *,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> FunctionPublic:
        """
        Get function by name.

        Parameters
        ----------
        project_uuid : str

        function_name : str

        version_num : int

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        FunctionPublic
            Successful Response

        Examples
        --------
        import asyncio

        from mirascope import AsyncLilypad

        client = AsyncLilypad(
            api_key="YOUR_API_KEY",
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.projects.functions.get_by_version(
                project_uuid="project_uuid",
                function_name="function_name",
                version_num=1,
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get_by_version(
            project_uuid, function_name, version_num, request_options=request_options
        )
        return _response.data

    async def get_by_name(
        self, project_uuid: str, function_name: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.List[FunctionPublic]:
        """
        Get function by name.

        Parameters
        ----------
        project_uuid : str

        function_name : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[FunctionPublic]
            Successful Response

        Examples
        --------
        import asyncio

        from mirascope import AsyncLilypad

        client = AsyncLilypad(
            api_key="YOUR_API_KEY",
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.projects.functions.get_by_name(
                project_uuid="project_uuid",
                function_name="function_name",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get_by_name(project_uuid, function_name, request_options=request_options)
        return _response.data

    async def get_deployed_environments(
        self, project_uuid: str, function_name: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> FunctionPublic:
        """
        Get the deployed function by function name and environment name.

        Parameters
        ----------
        project_uuid : str

        function_name : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        FunctionPublic
            Successful Response

        Examples
        --------
        import asyncio

        from mirascope import AsyncLilypad

        client = AsyncLilypad(
            api_key="YOUR_API_KEY",
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.projects.functions.get_deployed_environments(
                project_uuid="project_uuid",
                function_name="function_name",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get_deployed_environments(
            project_uuid, function_name, request_options=request_options
        )
        return _response.data

    async def create_versioned(
        self,
        project_uuid_: str,
        *,
        name: str,
        signature: str,
        code: str,
        hash: str,
        project_uuid: typing.Optional[str] = OMIT,
        version_num: typing.Optional[int] = OMIT,
        dependencies: typing.Optional[typing.Dict[str, DependencyInfo]] = OMIT,
        arg_types: typing.Optional[typing.Dict[str, str]] = OMIT,
        archived: typing.Optional[dt.datetime] = OMIT,
        custom_id: typing.Optional[str] = OMIT,
        prompt_template: typing.Optional[str] = OMIT,
        provider: typing.Optional[str] = OMIT,
        model: typing.Optional[str] = OMIT,
        call_params: typing.Optional[CommonCallParams] = OMIT,
        is_versioned: typing.Optional[bool] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> FunctionPublic:
        """
        Create a managed function.

        Parameters
        ----------
        project_uuid_ : str

        name : str

        signature : str

        code : str

        hash : str

        project_uuid : typing.Optional[str]

        version_num : typing.Optional[int]

        dependencies : typing.Optional[typing.Dict[str, DependencyInfo]]

        arg_types : typing.Optional[typing.Dict[str, str]]

        archived : typing.Optional[dt.datetime]

        custom_id : typing.Optional[str]

        prompt_template : typing.Optional[str]

        provider : typing.Optional[str]

        model : typing.Optional[str]

        call_params : typing.Optional[CommonCallParams]

        is_versioned : typing.Optional[bool]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        FunctionPublic
            Successful Response

        Examples
        --------
        import asyncio

        from mirascope import AsyncLilypad

        client = AsyncLilypad(
            api_key="YOUR_API_KEY",
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.projects.functions.create_versioned(
                project_uuid_="project_uuid",
                name="name",
                signature="signature",
                code="code",
                hash="hash",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.create_versioned(
            project_uuid_,
            name=name,
            signature=signature,
            code=code,
            hash=hash,
            project_uuid=project_uuid,
            version_num=version_num,
            dependencies=dependencies,
            arg_types=arg_types,
            archived=archived,
            custom_id=custom_id,
            prompt_template=prompt_template,
            provider=provider,
            model=model,
            call_params=call_params,
            is_versioned=is_versioned,
            request_options=request_options,
        )
        return _response.data

    async def get_unique_names(
        self, project_uuid: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.List[str]:
        """
        Get all unique function names.

        Parameters
        ----------
        project_uuid : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[str]
            Successful Response

        Examples
        --------
        import asyncio

        from mirascope import AsyncLilypad

        client = AsyncLilypad(
            api_key="YOUR_API_KEY",
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.projects.functions.get_unique_names(
                project_uuid="project_uuid",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get_unique_names(project_uuid, request_options=request_options)
        return _response.data

    async def get_latest_versions(
        self, project_uuid: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.List[FunctionPublic]:
        """
        Get all unique function names.

        Parameters
        ----------
        project_uuid : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[FunctionPublic]
            Successful Response

        Examples
        --------
        import asyncio

        from mirascope import AsyncLilypad

        client = AsyncLilypad(
            api_key="YOUR_API_KEY",
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.projects.functions.get_latest_versions(
                project_uuid="project_uuid",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get_latest_versions(project_uuid, request_options=request_options)
        return _response.data

    async def get_by_hash(
        self, project_uuid: str, function_hash: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> FunctionPublic:
        """
        Get function by hash.

        Parameters
        ----------
        project_uuid : str

        function_hash : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        FunctionPublic
            Successful Response

        Examples
        --------
        import asyncio

        from mirascope import AsyncLilypad

        client = AsyncLilypad(
            api_key="YOUR_API_KEY",
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.projects.functions.get_by_hash(
                project_uuid="project_uuid",
                function_hash="function_hash",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get_by_hash(project_uuid, function_hash, request_options=request_options)
        return _response.data

    async def list(
        self, project_uuid: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.List[FunctionPublic]:
        """
        Grab all functions.

        Parameters
        ----------
        project_uuid : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[FunctionPublic]
            Successful Response

        Examples
        --------
        import asyncio

        from mirascope import AsyncLilypad

        client = AsyncLilypad(
            api_key="YOUR_API_KEY",
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.projects.functions.list(
                project_uuid="project_uuid",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.list(project_uuid, request_options=request_options)
        return _response.data

    async def create(
        self,
        project_uuid_: str,
        *,
        name: str,
        signature: str,
        code: str,
        hash: str,
        project_uuid: typing.Optional[str] = OMIT,
        version_num: typing.Optional[int] = OMIT,
        dependencies: typing.Optional[typing.Dict[str, DependencyInfo]] = OMIT,
        arg_types: typing.Optional[typing.Dict[str, str]] = OMIT,
        archived: typing.Optional[dt.datetime] = OMIT,
        custom_id: typing.Optional[str] = OMIT,
        prompt_template: typing.Optional[str] = OMIT,
        provider: typing.Optional[str] = OMIT,
        model: typing.Optional[str] = OMIT,
        call_params: typing.Optional[CommonCallParams] = OMIT,
        is_versioned: typing.Optional[bool] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> FunctionPublic:
        """
        Create a new function version.

        Parameters
        ----------
        project_uuid_ : str

        name : str

        signature : str

        code : str

        hash : str

        project_uuid : typing.Optional[str]

        version_num : typing.Optional[int]

        dependencies : typing.Optional[typing.Dict[str, DependencyInfo]]

        arg_types : typing.Optional[typing.Dict[str, str]]

        archived : typing.Optional[dt.datetime]

        custom_id : typing.Optional[str]

        prompt_template : typing.Optional[str]

        provider : typing.Optional[str]

        model : typing.Optional[str]

        call_params : typing.Optional[CommonCallParams]

        is_versioned : typing.Optional[bool]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        FunctionPublic
            Successful Response

        Examples
        --------
        import asyncio

        from mirascope import AsyncLilypad

        client = AsyncLilypad(
            api_key="YOUR_API_KEY",
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.projects.functions.create(
                project_uuid_="project_uuid",
                name="name",
                signature="signature",
                code="code",
                hash="hash",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.create(
            project_uuid_,
            name=name,
            signature=signature,
            code=code,
            hash=hash,
            project_uuid=project_uuid,
            version_num=version_num,
            dependencies=dependencies,
            arg_types=arg_types,
            archived=archived,
            custom_id=custom_id,
            prompt_template=prompt_template,
            provider=provider,
            model=model,
            call_params=call_params,
            is_versioned=is_versioned,
            request_options=request_options,
        )
        return _response.data

    async def get(
        self, project_uuid: str, function_uuid: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> FunctionPublic:
        """
        Grab function by UUID.

        Parameters
        ----------
        project_uuid : str

        function_uuid : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        FunctionPublic
            Successful Response

        Examples
        --------
        import asyncio

        from mirascope import AsyncLilypad

        client = AsyncLilypad(
            api_key="YOUR_API_KEY",
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.projects.functions.get(
                project_uuid="project_uuid",
                function_uuid="function_uuid",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get(project_uuid, function_uuid, request_options=request_options)
        return _response.data

    async def archive(
        self, project_uuid: str, function_uuid: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> bool:
        """
        Archive a function and delete spans by function UUID.

        Parameters
        ----------
        project_uuid : str

        function_uuid : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        bool
            Successful Response

        Examples
        --------
        import asyncio

        from mirascope import AsyncLilypad

        client = AsyncLilypad(
            api_key="YOUR_API_KEY",
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.projects.functions.archive(
                project_uuid="project_uuid",
                function_uuid="function_uuid",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.archive(project_uuid, function_uuid, request_options=request_options)
        return _response.data

    async def update(
        self, project_uuid: str, function_uuid: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> FunctionPublic:
        """
        Update a function.

        Parameters
        ----------
        project_uuid : str

        function_uuid : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        FunctionPublic
            Successful Response

        Examples
        --------
        import asyncio

        from mirascope import AsyncLilypad

        client = AsyncLilypad(
            api_key="YOUR_API_KEY",
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.projects.functions.update(
                project_uuid="project_uuid",
                function_uuid="function_uuid",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.update(project_uuid, function_uuid, request_options=request_options)
        return _response.data

    async def archive_by_name(
        self, project_uuid: str, function_name: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> bool:
        """
        Archive a function by name and delete spans by function name.

        Parameters
        ----------
        project_uuid : str

        function_name : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        bool
            Successful Response

        Examples
        --------
        import asyncio

        from mirascope import AsyncLilypad

        client = AsyncLilypad(
            api_key="YOUR_API_KEY",
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.projects.functions.archive_by_name(
                project_uuid="project_uuid",
                function_name="function_name",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.archive_by_name(project_uuid, function_name, request_options=request_options)
        return _response.data
