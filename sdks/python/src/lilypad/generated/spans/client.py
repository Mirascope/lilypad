# This file was auto-generated by Fern from our API Definition.

import typing

from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.request_options import RequestOptions
from ..types.span_more_details import SpanMoreDetails
from .comments.client import AsyncCommentsClient, CommentsClient
from .raw_client import AsyncRawSpansClient, RawSpansClient

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class SpansClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawSpansClient(client_wrapper=client_wrapper)
        self.comments = CommentsClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawSpansClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawSpansClient
        """
        return self._raw_client

    def get(self, span_uuid: str, *, request_options: typing.Optional[RequestOptions] = None) -> SpanMoreDetails:
        """
        Get span by uuid.

        Parameters
        ----------
        span_uuid : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SpanMoreDetails
            Successful Response

        Examples
        --------
        from mirascope import Lilypad

        client = Lilypad(
            api_key="YOUR_API_KEY",
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )
        client.spans.get(
            span_uuid="span_uuid",
        )
        """
        _response = self._raw_client.get(span_uuid, request_options=request_options)
        return _response.data

    def update(
        self,
        span_uuid: str,
        *,
        tags_by_uuid: typing.Optional[typing.Sequence[str]] = OMIT,
        tags_by_name: typing.Optional[typing.Sequence[str]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> SpanMoreDetails:
        """
        Update span by uuid.

        Parameters
        ----------
        span_uuid : str

        tags_by_uuid : typing.Optional[typing.Sequence[str]]

        tags_by_name : typing.Optional[typing.Sequence[str]]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SpanMoreDetails
            Successful Response

        Examples
        --------
        from mirascope import Lilypad

        client = Lilypad(
            api_key="YOUR_API_KEY",
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )
        client.spans.update(
            span_uuid="span_uuid",
        )
        """
        _response = self._raw_client.update(
            span_uuid, tags_by_uuid=tags_by_uuid, tags_by_name=tags_by_name, request_options=request_options
        )
        return _response.data


class AsyncSpansClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawSpansClient(client_wrapper=client_wrapper)
        self.comments = AsyncCommentsClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawSpansClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawSpansClient
        """
        return self._raw_client

    async def get(self, span_uuid: str, *, request_options: typing.Optional[RequestOptions] = None) -> SpanMoreDetails:
        """
        Get span by uuid.

        Parameters
        ----------
        span_uuid : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SpanMoreDetails
            Successful Response

        Examples
        --------
        import asyncio

        from mirascope import AsyncLilypad

        client = AsyncLilypad(
            api_key="YOUR_API_KEY",
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.spans.get(
                span_uuid="span_uuid",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get(span_uuid, request_options=request_options)
        return _response.data

    async def update(
        self,
        span_uuid: str,
        *,
        tags_by_uuid: typing.Optional[typing.Sequence[str]] = OMIT,
        tags_by_name: typing.Optional[typing.Sequence[str]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> SpanMoreDetails:
        """
        Update span by uuid.

        Parameters
        ----------
        span_uuid : str

        tags_by_uuid : typing.Optional[typing.Sequence[str]]

        tags_by_name : typing.Optional[typing.Sequence[str]]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SpanMoreDetails
            Successful Response

        Examples
        --------
        import asyncio

        from mirascope import AsyncLilypad

        client = AsyncLilypad(
            api_key="YOUR_API_KEY",
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.spans.update(
                span_uuid="span_uuid",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.update(
            span_uuid, tags_by_uuid=tags_by_uuid, tags_by_name=tags_by_name, request_options=request_options
        )
        return _response.data
