# This file was auto-generated by Fern from our API Definition.

import typing

from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.request_options import RequestOptions
from .raw_client import AsyncRawHealthClient, RawHealthClient
from .types.health_check_response import HealthCheckResponse


class HealthClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawHealthClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawHealthClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawHealthClient
        """
        return self._raw_client

    def check(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> HealthCheckResponse:
        """
        Returns the current health status of the application

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HealthCheckResponse
            Application health status

        Examples
        --------
        from lilypad._generated import Lilypad

        client = Lilypad()
        client.health.check()
        """
        _response = self._raw_client.check(request_options=request_options)
        return _response.data


class AsyncHealthClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawHealthClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawHealthClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawHealthClient
        """
        return self._raw_client

    async def check(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> HealthCheckResponse:
        """
        Returns the current health status of the application

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HealthCheckResponse
            Application health status

        Examples
        --------
        import asyncio

        from lilypad._generated import AsyncLilypad

        client = AsyncLilypad()


        async def main() -> None:
            await client.health.check()


        asyncio.run(main())
        """
        _response = await self._raw_client.check(request_options=request_options)
        return _response.data
