# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
import typing_extensions
from ...core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from ...core.serialization import FieldMetadata


class TelemetrySendTracesRequestResourceSpansItemScopeSpansItemSpansItemAttributesItemValue(
    UniversalBaseModel
):
    string_value: typing_extensions.Annotated[
        typing.Optional[str], FieldMetadata(alias="stringValue")
    ] = None
    int_value: typing_extensions.Annotated[
        typing.Optional[str], FieldMetadata(alias="intValue")
    ] = None
    double_value: typing_extensions.Annotated[
        typing.Optional[float], FieldMetadata(alias="doubleValue")
    ] = None
    bool_value: typing_extensions.Annotated[
        typing.Optional[bool], FieldMetadata(alias="boolValue")
    ] = None
    array_value: typing_extensions.Annotated[
        typing.Optional[typing.Optional[typing.Any]], FieldMetadata(alias="arrayValue")
    ] = None
    kvlist_value: typing_extensions.Annotated[
        typing.Optional[typing.Optional[typing.Any]], FieldMetadata(alias="kvlistValue")
    ] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(
            extra="allow", frozen=True
        )  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
