# This file was auto-generated by Fern from our API Definition.

import typing
from json.decoder import JSONDecodeError

from ..core.api_error import ApiError
from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.http_response import AsyncHttpResponse, HttpResponse
from ..core.pydantic_utilities import parse_obj_as
from ..core.request_options import RequestOptions
from ..core.serialization import convert_and_respect_annotation_metadata
from ..errors.bad_request_error import BadRequestError
from ..errors.internal_server_error import InternalServerError
from .types.telemetry_send_traces_request_resource_spans_item import (
    TelemetrySendTracesRequestResourceSpansItem,
)
from .types.telemetry_send_traces_response import TelemetrySendTracesResponse

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class RawTelemetryClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def send_traces(
        self,
        *,
        resource_spans: typing.Sequence[TelemetrySendTracesRequestResourceSpansItem],
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HttpResponse[TelemetrySendTracesResponse]:
        """
        Temporary endpoint to receive and log OpenTelemetry trace data for debugging purposes. This endpoint follows the OTLP/HTTP specification.

        Parameters
        ----------
        resource_spans : typing.Sequence[TelemetrySendTracesRequestResourceSpansItem]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[TelemetrySendTracesResponse]
            Trace export acknowledged
        """
        _response = self._client_wrapper.httpx_client.request(
            "api/v1/traces",
            method="POST",
            json={
                "resourceSpans": convert_and_respect_annotation_metadata(
                    object_=resource_spans,
                    annotation=typing.Sequence[
                        TelemetrySendTracesRequestResourceSpansItem
                    ],
                    direction="write",
                ),
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    TelemetrySendTracesResponse,
                    parse_obj_as(
                        type_=TelemetrySendTracesResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            if _response.status_code == 400:
                raise BadRequestError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 500:
                raise InternalServerError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(
                status_code=_response.status_code,
                headers=dict(_response.headers),
                body=_response.text,
            )
        raise ApiError(
            status_code=_response.status_code,
            headers=dict(_response.headers),
            body=_response_json,
        )


class AsyncRawTelemetryClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def send_traces(
        self,
        *,
        resource_spans: typing.Sequence[TelemetrySendTracesRequestResourceSpansItem],
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncHttpResponse[TelemetrySendTracesResponse]:
        """
        Temporary endpoint to receive and log OpenTelemetry trace data for debugging purposes. This endpoint follows the OTLP/HTTP specification.

        Parameters
        ----------
        resource_spans : typing.Sequence[TelemetrySendTracesRequestResourceSpansItem]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[TelemetrySendTracesResponse]
            Trace export acknowledged
        """
        _response = await self._client_wrapper.httpx_client.request(
            "api/v1/traces",
            method="POST",
            json={
                "resourceSpans": convert_and_respect_annotation_metadata(
                    object_=resource_spans,
                    annotation=typing.Sequence[
                        TelemetrySendTracesRequestResourceSpansItem
                    ],
                    direction="write",
                ),
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    TelemetrySendTracesResponse,
                    parse_obj_as(
                        type_=TelemetrySendTracesResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            if _response.status_code == 400:
                raise BadRequestError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 500:
                raise InternalServerError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(
                status_code=_response.status_code,
                headers=dict(_response.headers),
                body=_response.text,
            )
        raise ApiError(
            status_code=_response.status_code,
            headers=dict(_response.headers),
            body=_response_json,
        )
