# This file was auto-generated by Fern from our API Definition.

import typing

from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.request_options import RequestOptions
from .raw_client import AsyncRawTelemetryClient, RawTelemetryClient
from .types.telemetry_send_traces_request_resource_spans_item import (
    TelemetrySendTracesRequestResourceSpansItem,
)
from .types.telemetry_send_traces_response import TelemetrySendTracesResponse

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class TelemetryClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawTelemetryClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawTelemetryClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawTelemetryClient
        """
        return self._raw_client

    def send_traces(
        self,
        *,
        resource_spans: typing.Sequence[TelemetrySendTracesRequestResourceSpansItem],
        request_options: typing.Optional[RequestOptions] = None,
    ) -> TelemetrySendTracesResponse:
        """
        Temporary endpoint to receive and log OpenTelemetry trace data for debugging purposes. This endpoint follows the OTLP/HTTP specification.

        Parameters
        ----------
        resource_spans : typing.Sequence[TelemetrySendTracesRequestResourceSpansItem]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        TelemetrySendTracesResponse
            Trace export acknowledged

        Examples
        --------
        from lilypad._generated import Lilypad
        from lilypad._generated.telemetry import (
            TelemetrySendTracesRequestResourceSpansItem,
            TelemetrySendTracesRequestResourceSpansItemScopeSpansItem,
            TelemetrySendTracesRequestResourceSpansItemScopeSpansItemSpansItem,
        )

        client = Lilypad()
        client.telemetry.send_traces(
            resource_spans=[
                TelemetrySendTracesRequestResourceSpansItem(
                    scope_spans=[
                        TelemetrySendTracesRequestResourceSpansItemScopeSpansItem(
                            spans=[
                                TelemetrySendTracesRequestResourceSpansItemScopeSpansItemSpansItem(
                                    trace_id="traceId",
                                    span_id="spanId",
                                    name="name",
                                    start_time_unix_nano="startTimeUnixNano",
                                    end_time_unix_nano="endTimeUnixNano",
                                )
                            ],
                        )
                    ],
                )
            ],
        )
        """
        _response = self._raw_client.send_traces(
            resource_spans=resource_spans, request_options=request_options
        )
        return _response.data


class AsyncTelemetryClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawTelemetryClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawTelemetryClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawTelemetryClient
        """
        return self._raw_client

    async def send_traces(
        self,
        *,
        resource_spans: typing.Sequence[TelemetrySendTracesRequestResourceSpansItem],
        request_options: typing.Optional[RequestOptions] = None,
    ) -> TelemetrySendTracesResponse:
        """
        Temporary endpoint to receive and log OpenTelemetry trace data for debugging purposes. This endpoint follows the OTLP/HTTP specification.

        Parameters
        ----------
        resource_spans : typing.Sequence[TelemetrySendTracesRequestResourceSpansItem]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        TelemetrySendTracesResponse
            Trace export acknowledged

        Examples
        --------
        import asyncio

        from lilypad._generated import AsyncLilypad
        from lilypad._generated.telemetry import (
            TelemetrySendTracesRequestResourceSpansItem,
            TelemetrySendTracesRequestResourceSpansItemScopeSpansItem,
            TelemetrySendTracesRequestResourceSpansItemScopeSpansItemSpansItem,
        )

        client = AsyncLilypad()


        async def main() -> None:
            await client.telemetry.send_traces(
                resource_spans=[
                    TelemetrySendTracesRequestResourceSpansItem(
                        scope_spans=[
                            TelemetrySendTracesRequestResourceSpansItemScopeSpansItem(
                                spans=[
                                    TelemetrySendTracesRequestResourceSpansItemScopeSpansItemSpansItem(
                                        trace_id="traceId",
                                        span_id="spanId",
                                        name="name",
                                        start_time_unix_nano="startTimeUnixNano",
                                        end_time_unix_nano="endTimeUnixNano",
                                    )
                                ],
                            )
                        ],
                    )
                ],
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.send_traces(
            resource_spans=resource_spans, request_options=request_options
        )
        return _response.data
