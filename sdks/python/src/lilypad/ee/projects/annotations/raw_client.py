# This file was auto-generated by Fern from our API Definition.

import typing
from json.decoder import JSONDecodeError

from ....core.api_error import ApiError
from ....core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ....core.http_response import AsyncHttpResponse, HttpResponse
from ....core.jsonable_encoder import jsonable_encoder
from ....core.request_options import RequestOptions
from ....core.serialization import convert_and_respect_annotation_metadata
from ....core.unchecked_base_model import construct_type
from ....errors.unprocessable_entity_error import UnprocessableEntityError
from ....types.annotation_create import AnnotationCreate
from ....types.annotation_public import AnnotationPublic
from ....types.evaluation_type import EvaluationType
from ....types.http_validation_error import HttpValidationError
from ....types.label import Label

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class RawAnnotationsClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def list(
        self, project_uuid: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> HttpResponse[typing.List[AnnotationPublic]]:
        """
        Get annotations by project.

        Parameters
        ----------
        project_uuid : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[typing.List[AnnotationPublic]]
            Successful Response
        """
        _response = self._client_wrapper.httpx_client.request(
            f"ee/projects/{jsonable_encoder(project_uuid)}/annotations",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    typing.List[AnnotationPublic],
                    construct_type(
                        type_=typing.List[AnnotationPublic],  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        HttpValidationError,
                        construct_type(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    def create(
        self,
        project_uuid: str,
        *,
        request: typing.Sequence[AnnotationCreate],
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HttpResponse[typing.List[AnnotationPublic]]:
        """
        Create an annotation.

        Args:
            project_uuid: The project UUID.
            annotations_service: The annotation service.
            project_service: The project service.
            annotations_create: The annotation create model.

        Returns:
            AnnotationPublic: The created annotation.

        Raises:
            HTTPException: If the span has already been assigned to a user and has
            not been labeled yet.

        Parameters
        ----------
        project_uuid : str

        request : typing.Sequence[AnnotationCreate]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[typing.List[AnnotationPublic]]
            Successful Response
        """
        _response = self._client_wrapper.httpx_client.request(
            f"ee/projects/{jsonable_encoder(project_uuid)}/annotations",
            method="POST",
            json=convert_and_respect_annotation_metadata(
                object_=request, annotation=typing.Sequence[AnnotationCreate], direction="write"
            ),
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    typing.List[AnnotationPublic],
                    construct_type(
                        type_=typing.List[AnnotationPublic],  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        HttpValidationError,
                        construct_type(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    def delete(
        self, annotation_uuid: str, project_uuid: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> HttpResponse[bool]:
        """
        Delete an annotation.

        Parameters
        ----------
        annotation_uuid : str

        project_uuid : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[bool]
            Successful Response
        """
        _response = self._client_wrapper.httpx_client.request(
            f"ee/projects/{jsonable_encoder(project_uuid)}/annotations/{jsonable_encoder(annotation_uuid)}",
            method="DELETE",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    bool,
                    construct_type(
                        type_=bool,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        HttpValidationError,
                        construct_type(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    def update(
        self,
        annotation_uuid: str,
        project_uuid: str,
        *,
        label: typing.Optional[Label] = OMIT,
        reasoning: typing.Optional[str] = OMIT,
        type: typing.Optional[EvaluationType] = OMIT,
        data: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = OMIT,
        assigned_to: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HttpResponse[AnnotationPublic]:
        """
        Update an annotation.

        Parameters
        ----------
        annotation_uuid : str

        project_uuid : str

        label : typing.Optional[Label]

        reasoning : typing.Optional[str]

        type : typing.Optional[EvaluationType]

        data : typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]]

        assigned_to : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[AnnotationPublic]
            Successful Response
        """
        _response = self._client_wrapper.httpx_client.request(
            f"ee/projects/{jsonable_encoder(project_uuid)}/annotations/{jsonable_encoder(annotation_uuid)}",
            method="PATCH",
            json={
                "label": label,
                "reasoning": reasoning,
                "type": type,
                "data": data,
                "assigned_to": assigned_to,
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    AnnotationPublic,
                    construct_type(
                        type_=AnnotationPublic,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        HttpValidationError,
                        construct_type(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)


class AsyncRawAnnotationsClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def list(
        self, project_uuid: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> AsyncHttpResponse[typing.List[AnnotationPublic]]:
        """
        Get annotations by project.

        Parameters
        ----------
        project_uuid : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[typing.List[AnnotationPublic]]
            Successful Response
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"ee/projects/{jsonable_encoder(project_uuid)}/annotations",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    typing.List[AnnotationPublic],
                    construct_type(
                        type_=typing.List[AnnotationPublic],  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        HttpValidationError,
                        construct_type(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    async def create(
        self,
        project_uuid: str,
        *,
        request: typing.Sequence[AnnotationCreate],
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncHttpResponse[typing.List[AnnotationPublic]]:
        """
        Create an annotation.

        Args:
            project_uuid: The project UUID.
            annotations_service: The annotation service.
            project_service: The project service.
            annotations_create: The annotation create model.

        Returns:
            AnnotationPublic: The created annotation.

        Raises:
            HTTPException: If the span has already been assigned to a user and has
            not been labeled yet.

        Parameters
        ----------
        project_uuid : str

        request : typing.Sequence[AnnotationCreate]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[typing.List[AnnotationPublic]]
            Successful Response
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"ee/projects/{jsonable_encoder(project_uuid)}/annotations",
            method="POST",
            json=convert_and_respect_annotation_metadata(
                object_=request, annotation=typing.Sequence[AnnotationCreate], direction="write"
            ),
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    typing.List[AnnotationPublic],
                    construct_type(
                        type_=typing.List[AnnotationPublic],  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        HttpValidationError,
                        construct_type(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    async def delete(
        self, annotation_uuid: str, project_uuid: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> AsyncHttpResponse[bool]:
        """
        Delete an annotation.

        Parameters
        ----------
        annotation_uuid : str

        project_uuid : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[bool]
            Successful Response
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"ee/projects/{jsonable_encoder(project_uuid)}/annotations/{jsonable_encoder(annotation_uuid)}",
            method="DELETE",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    bool,
                    construct_type(
                        type_=bool,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        HttpValidationError,
                        construct_type(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    async def update(
        self,
        annotation_uuid: str,
        project_uuid: str,
        *,
        label: typing.Optional[Label] = OMIT,
        reasoning: typing.Optional[str] = OMIT,
        type: typing.Optional[EvaluationType] = OMIT,
        data: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = OMIT,
        assigned_to: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncHttpResponse[AnnotationPublic]:
        """
        Update an annotation.

        Parameters
        ----------
        annotation_uuid : str

        project_uuid : str

        label : typing.Optional[Label]

        reasoning : typing.Optional[str]

        type : typing.Optional[EvaluationType]

        data : typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]]

        assigned_to : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[AnnotationPublic]
            Successful Response
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"ee/projects/{jsonable_encoder(project_uuid)}/annotations/{jsonable_encoder(annotation_uuid)}",
            method="PATCH",
            json={
                "label": label,
                "reasoning": reasoning,
                "type": type,
                "data": data,
                "assigned_to": assigned_to,
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    AnnotationPublic,
                    construct_type(
                        type_=AnnotationPublic,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        HttpValidationError,
                        construct_type(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)
