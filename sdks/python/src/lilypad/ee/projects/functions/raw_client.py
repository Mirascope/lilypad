# This file was auto-generated by Fern from our API Definition.

import typing
from json.decoder import JSONDecodeError

from ....core.api_error import ApiError
from ....core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ....core.http_response import AsyncHttpResponse, HttpResponse
from ....core.jsonable_encoder import jsonable_encoder
from ....core.request_options import RequestOptions
from ....core.serialization import convert_and_respect_annotation_metadata
from ....core.unchecked_base_model import construct_type
from ....errors.bad_request_error import BadRequestError
from ....errors.internal_server_error import InternalServerError
from ....errors.not_found_error import NotFoundError
from ....errors.request_timeout_error import RequestTimeoutError
from ....errors.unprocessable_entity_error import UnprocessableEntityError
from ....types.common_call_params import CommonCallParams
from ....types.http_validation_error import HttpValidationError
from ....types.playground_error_response import PlaygroundErrorResponse
from ....types.playground_success_response import PlaygroundSuccessResponse
from ....types.provider import Provider
from .types.playground_parameters_arg_values_value import PlaygroundParametersArgValuesValue

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class RawFunctionsClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def run_playground(
        self,
        project_uuid: str,
        function_uuid: str,
        *,
        arg_values: typing.Dict[str, PlaygroundParametersArgValuesValue],
        provider: Provider,
        model: str,
        prompt_template: str,
        arg_types: typing.Optional[typing.Dict[str, typing.Optional[str]]] = OMIT,
        call_params: typing.Optional[CommonCallParams] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HttpResponse[PlaygroundSuccessResponse]:
        """
        Executes a function with specified parameters in a secure playground environment.

        Parameters
        ----------
        project_uuid : str

        function_uuid : str

        arg_values : typing.Dict[str, PlaygroundParametersArgValuesValue]

        provider : Provider

        model : str

        prompt_template : str

        arg_types : typing.Optional[typing.Dict[str, typing.Optional[str]]]

        call_params : typing.Optional[CommonCallParams]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[PlaygroundSuccessResponse]
            Function executed successfully.
        """
        _response = self._client_wrapper.httpx_client.request(
            f"ee/projects/{jsonable_encoder(project_uuid)}/functions/{jsonable_encoder(function_uuid)}/playground",
            method="POST",
            json={
                "arg_values": convert_and_respect_annotation_metadata(
                    object_=arg_values,
                    annotation=typing.Dict[str, PlaygroundParametersArgValuesValue],
                    direction="write",
                ),
                "arg_types": arg_types,
                "provider": provider,
                "model": model,
                "prompt_template": prompt_template,
                "call_params": convert_and_respect_annotation_metadata(
                    object_=call_params, annotation=CommonCallParams, direction="write"
                ),
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    PlaygroundSuccessResponse,
                    construct_type(
                        type_=PlaygroundSuccessResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            if _response.status_code == 400:
                raise BadRequestError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        PlaygroundErrorResponse,
                        construct_type(
                            type_=PlaygroundErrorResponse,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        PlaygroundErrorResponse,
                        construct_type(
                            type_=PlaygroundErrorResponse,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 408:
                raise RequestTimeoutError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        PlaygroundErrorResponse,
                        construct_type(
                            type_=PlaygroundErrorResponse,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        HttpValidationError,
                        construct_type(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 500:
                raise InternalServerError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        PlaygroundErrorResponse,
                        construct_type(
                            type_=PlaygroundErrorResponse,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)


class AsyncRawFunctionsClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def run_playground(
        self,
        project_uuid: str,
        function_uuid: str,
        *,
        arg_values: typing.Dict[str, PlaygroundParametersArgValuesValue],
        provider: Provider,
        model: str,
        prompt_template: str,
        arg_types: typing.Optional[typing.Dict[str, typing.Optional[str]]] = OMIT,
        call_params: typing.Optional[CommonCallParams] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncHttpResponse[PlaygroundSuccessResponse]:
        """
        Executes a function with specified parameters in a secure playground environment.

        Parameters
        ----------
        project_uuid : str

        function_uuid : str

        arg_values : typing.Dict[str, PlaygroundParametersArgValuesValue]

        provider : Provider

        model : str

        prompt_template : str

        arg_types : typing.Optional[typing.Dict[str, typing.Optional[str]]]

        call_params : typing.Optional[CommonCallParams]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[PlaygroundSuccessResponse]
            Function executed successfully.
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"ee/projects/{jsonable_encoder(project_uuid)}/functions/{jsonable_encoder(function_uuid)}/playground",
            method="POST",
            json={
                "arg_values": convert_and_respect_annotation_metadata(
                    object_=arg_values,
                    annotation=typing.Dict[str, PlaygroundParametersArgValuesValue],
                    direction="write",
                ),
                "arg_types": arg_types,
                "provider": provider,
                "model": model,
                "prompt_template": prompt_template,
                "call_params": convert_and_respect_annotation_metadata(
                    object_=call_params, annotation=CommonCallParams, direction="write"
                ),
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    PlaygroundSuccessResponse,
                    construct_type(
                        type_=PlaygroundSuccessResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            if _response.status_code == 400:
                raise BadRequestError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        PlaygroundErrorResponse,
                        construct_type(
                            type_=PlaygroundErrorResponse,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        PlaygroundErrorResponse,
                        construct_type(
                            type_=PlaygroundErrorResponse,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 408:
                raise RequestTimeoutError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        PlaygroundErrorResponse,
                        construct_type(
                            type_=PlaygroundErrorResponse,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        HttpValidationError,
                        construct_type(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 500:
                raise InternalServerError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        PlaygroundErrorResponse,
                        construct_type(
                            type_=PlaygroundErrorResponse,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)
