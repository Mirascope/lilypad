/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as core from "../../../../../../core/index.mjs";
import * as MirascopeApi from "../../../../../index.mjs";
import { Spans } from "../resources/spans/client/Client.mjs";
export declare namespace Functions {
    interface Options {
        environment: core.Supplier<string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        token?: core.Supplier<core.BearerToken | undefined>;
        /** Override the X-API-Key header */
        apiKey: core.Supplier<string>;
        /** Additional headers to include in requests. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }
    interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Override the X-API-Key header */
        apiKey?: string;
        /** Additional headers to include in the request. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }
}
export declare class Functions {
    protected readonly _options: Functions.Options;
    protected _spans: Spans | undefined;
    constructor(_options: Functions.Options);
    get spans(): Spans;
    /**
     * Get function by name.
     *
     * @param {string} projectUuid
     * @param {string} functionName
     * @param {number} versionNum
     * @param {Functions.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link MirascopeApi.UnprocessableEntityError}
     *
     * @example
     *     await client.projects.functions.getByVersion("project_uuid", "function_name", 1)
     */
    getByVersion(projectUuid: string, functionName: string, versionNum: number, requestOptions?: Functions.RequestOptions): core.HttpResponsePromise<MirascopeApi.FunctionPublic>;
    private __getByVersion;
    /**
     * Get function by name.
     *
     * @param {string} projectUuid
     * @param {string} functionName
     * @param {Functions.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link MirascopeApi.UnprocessableEntityError}
     *
     * @example
     *     await client.projects.functions.getByName("project_uuid", "function_name")
     */
    getByName(projectUuid: string, functionName: string, requestOptions?: Functions.RequestOptions): core.HttpResponsePromise<MirascopeApi.FunctionPublic[]>;
    private __getByName;
    /**
     * Get the deployed function by function name and environment name.
     *
     * @param {string} projectUuid
     * @param {string} functionName
     * @param {Functions.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link MirascopeApi.UnprocessableEntityError}
     *
     * @example
     *     await client.projects.functions.getDeployedEnvironments("project_uuid", "function_name")
     */
    getDeployedEnvironments(projectUuid: string, functionName: string, requestOptions?: Functions.RequestOptions): core.HttpResponsePromise<MirascopeApi.FunctionPublic>;
    private __getDeployedEnvironments;
    /**
     * Create a managed function.
     *
     * @param {string} projectUuid
     * @param {MirascopeApi.FunctionCreate} request
     * @param {Functions.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link MirascopeApi.UnprocessableEntityError}
     *
     * @example
     *     await client.projects.functions.createVersioned("project_uuid", {
     *         name: "name",
     *         signature: "signature",
     *         code: "code",
     *         hash: "hash"
     *     })
     */
    createVersioned(projectUuid: string, request: MirascopeApi.FunctionCreate, requestOptions?: Functions.RequestOptions): core.HttpResponsePromise<MirascopeApi.FunctionPublic>;
    private __createVersioned;
    /**
     * Get all unique function names.
     *
     * @param {string} projectUuid
     * @param {Functions.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link MirascopeApi.UnprocessableEntityError}
     *
     * @example
     *     await client.projects.functions.getUniqueNames("project_uuid")
     */
    getUniqueNames(projectUuid: string, requestOptions?: Functions.RequestOptions): core.HttpResponsePromise<string[]>;
    private __getUniqueNames;
    /**
     * Get all unique function names.
     *
     * @param {string} projectUuid
     * @param {Functions.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link MirascopeApi.UnprocessableEntityError}
     *
     * @example
     *     await client.projects.functions.getLatestVersions("project_uuid")
     */
    getLatestVersions(projectUuid: string, requestOptions?: Functions.RequestOptions): core.HttpResponsePromise<MirascopeApi.FunctionPublic[]>;
    private __getLatestVersions;
    /**
     * Get function by hash.
     *
     * @param {string} projectUuid
     * @param {string} functionHash
     * @param {Functions.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link MirascopeApi.UnprocessableEntityError}
     *
     * @example
     *     await client.projects.functions.getByHash("project_uuid", "function_hash")
     */
    getByHash(projectUuid: string, functionHash: string, requestOptions?: Functions.RequestOptions): core.HttpResponsePromise<MirascopeApi.FunctionPublic>;
    private __getByHash;
    /**
     * Grab all functions.
     *
     * @param {string} projectUuid
     * @param {Functions.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link MirascopeApi.UnprocessableEntityError}
     *
     * @example
     *     await client.projects.functions.list("project_uuid")
     */
    list(projectUuid: string, requestOptions?: Functions.RequestOptions): core.HttpResponsePromise<MirascopeApi.FunctionPublic[]>;
    private __list;
    /**
     * Create a new function version.
     *
     * @param {string} projectUuid
     * @param {MirascopeApi.FunctionCreate} request
     * @param {Functions.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link MirascopeApi.UnprocessableEntityError}
     *
     * @example
     *     await client.projects.functions.create("project_uuid", {
     *         name: "name",
     *         signature: "signature",
     *         code: "code",
     *         hash: "hash"
     *     })
     */
    create(projectUuid: string, request: MirascopeApi.FunctionCreate, requestOptions?: Functions.RequestOptions): core.HttpResponsePromise<MirascopeApi.FunctionPublic>;
    private __create;
    /**
     * Grab function by UUID.
     *
     * @param {string} projectUuid
     * @param {string} functionUuid
     * @param {Functions.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link MirascopeApi.UnprocessableEntityError}
     *
     * @example
     *     await client.projects.functions.get("project_uuid", "function_uuid")
     */
    get(projectUuid: string, functionUuid: string, requestOptions?: Functions.RequestOptions): core.HttpResponsePromise<MirascopeApi.FunctionPublic>;
    private __get;
    /**
     * Archive a function and delete spans by function UUID.
     *
     * @param {string} projectUuid
     * @param {string} functionUuid
     * @param {Functions.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link MirascopeApi.UnprocessableEntityError}
     *
     * @example
     *     await client.projects.functions.archive("project_uuid", "function_uuid")
     */
    archive(projectUuid: string, functionUuid: string, requestOptions?: Functions.RequestOptions): core.HttpResponsePromise<boolean>;
    private __archive;
    /**
     * Update a function.
     *
     * @param {string} projectUuid
     * @param {string} functionUuid
     * @param {MirascopeApi.projects.FunctionUpdate} request
     * @param {Functions.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link MirascopeApi.UnprocessableEntityError}
     *
     * @example
     *     await client.projects.functions.update("project_uuid", "function_uuid")
     */
    update(projectUuid: string, functionUuid: string, request?: MirascopeApi.projects.FunctionUpdate, requestOptions?: Functions.RequestOptions): core.HttpResponsePromise<MirascopeApi.FunctionPublic>;
    private __update;
    /**
     * Archive a function by name and delete spans by function name.
     *
     * @param {string} projectUuid
     * @param {string} functionName
     * @param {Functions.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link MirascopeApi.UnprocessableEntityError}
     *
     * @example
     *     await client.projects.functions.archiveByName("project_uuid", "function_name")
     */
    archiveByName(projectUuid: string, functionName: string, requestOptions?: Functions.RequestOptions): core.HttpResponsePromise<boolean>;
    private __archiveByName;
    protected _getAuthorizationHeader(): Promise<string | undefined>;
}
