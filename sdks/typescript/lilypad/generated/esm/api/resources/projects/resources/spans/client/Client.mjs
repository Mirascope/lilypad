/**
 * This file was auto-generated by Fern from our API Definition.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import * as core from "../../../../../../core/index.mjs";
import * as MirascopeApi from "../../../../../index.mjs";
import { mergeHeaders, mergeOnlyDefinedHeaders } from "../../../../../../core/headers.mjs";
import * as errors from "../../../../../../errors/index.mjs";
export class Spans {
    constructor(_options) {
        this._options = _options;
    }
    /**
     * Get aggregated span by project uuid.
     *
     * @param {string} projectUuid
     * @param {MirascopeApi.projects.SpansGetAggregatesRequest} request
     * @param {Spans.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link MirascopeApi.UnprocessableEntityError}
     *
     * @example
     *     await client.projects.spans.getAggregates("project_uuid", {
     *         time_frame: "day"
     *     })
     */
    getAggregates(projectUuid, request, requestOptions) {
        return core.HttpResponsePromise.fromPromise(this.__getAggregates(projectUuid, request, requestOptions));
    }
    __getAggregates(projectUuid, request, requestOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            var _a, _b;
            const { time_frame: timeFrame } = request;
            const _queryParams = {};
            _queryParams["time_frame"] = timeFrame;
            const _response = yield core.fetcher({
                url: core.joinUrl((_a = (yield core.Supplier.get(this._options.baseUrl))) !== null && _a !== void 0 ? _a : (yield core.Supplier.get(this._options.environment)), `projects/${encodeURIComponent(projectUuid)}/spans/metadata`),
                method: "GET",
                headers: mergeHeaders((_b = this._options) === null || _b === void 0 ? void 0 : _b.headers, mergeOnlyDefinedHeaders({
                    Authorization: yield this._getAuthorizationHeader(),
                    "X-API-Key": requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.apiKey,
                }), requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.headers),
                queryParameters: _queryParams,
                timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
                maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries,
                abortSignal: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.abortSignal,
            });
            if (_response.ok) {
                return { data: _response.body, rawResponse: _response.rawResponse };
            }
            if (_response.error.reason === "status-code") {
                switch (_response.error.statusCode) {
                    case 422:
                        throw new MirascopeApi.UnprocessableEntityError(_response.error.body, _response.rawResponse);
                    default:
                        throw new errors.MirascopeApiError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.body,
                            rawResponse: _response.rawResponse,
                        });
                }
            }
            switch (_response.error.reason) {
                case "non-json":
                    throw new errors.MirascopeApiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.rawBody,
                        rawResponse: _response.rawResponse,
                    });
                case "timeout":
                    throw new errors.MirascopeApiTimeoutError("Timeout exceeded when calling GET /projects/{project_uuid}/spans/metadata.");
                case "unknown":
                    throw new errors.MirascopeApiError({
                        message: _response.error.errorMessage,
                        rawResponse: _response.rawResponse,
                    });
            }
        });
    }
    /**
     * Get spans created recently for real-time polling.
     *
     * If no 'since' parameter is provided, returns spans from the last 30 seconds.
     *
     * @param {string} projectUuid
     * @param {MirascopeApi.projects.SpansGetRecentRequest} request
     * @param {Spans.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link MirascopeApi.UnprocessableEntityError}
     *
     * @example
     *     await client.projects.spans.getRecent("project_uuid")
     */
    getRecent(projectUuid, request = {}, requestOptions) {
        return core.HttpResponsePromise.fromPromise(this.__getRecent(projectUuid, request, requestOptions));
    }
    __getRecent(projectUuid_1) {
        return __awaiter(this, arguments, void 0, function* (projectUuid, request = {}, requestOptions) {
            var _a, _b;
            const { since } = request;
            const _queryParams = {};
            if (since != null) {
                _queryParams["since"] = since;
            }
            const _response = yield core.fetcher({
                url: core.joinUrl((_a = (yield core.Supplier.get(this._options.baseUrl))) !== null && _a !== void 0 ? _a : (yield core.Supplier.get(this._options.environment)), `projects/${encodeURIComponent(projectUuid)}/spans/recent`),
                method: "GET",
                headers: mergeHeaders((_b = this._options) === null || _b === void 0 ? void 0 : _b.headers, mergeOnlyDefinedHeaders({
                    Authorization: yield this._getAuthorizationHeader(),
                    "X-API-Key": requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.apiKey,
                }), requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.headers),
                queryParameters: _queryParams,
                timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
                maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries,
                abortSignal: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.abortSignal,
            });
            if (_response.ok) {
                return { data: _response.body, rawResponse: _response.rawResponse };
            }
            if (_response.error.reason === "status-code") {
                switch (_response.error.statusCode) {
                    case 422:
                        throw new MirascopeApi.UnprocessableEntityError(_response.error.body, _response.rawResponse);
                    default:
                        throw new errors.MirascopeApiError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.body,
                            rawResponse: _response.rawResponse,
                        });
                }
            }
            switch (_response.error.reason) {
                case "non-json":
                    throw new errors.MirascopeApiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.rawBody,
                        rawResponse: _response.rawResponse,
                    });
                case "timeout":
                    throw new errors.MirascopeApiTimeoutError("Timeout exceeded when calling GET /projects/{project_uuid}/spans/recent.");
                case "unknown":
                    throw new errors.MirascopeApiError({
                        message: _response.error.errorMessage,
                        rawResponse: _response.rawResponse,
                    });
            }
        });
    }
    /**
     * Get span by project_uuid and span_id.
     *
     * @param {string} projectUuid
     * @param {string} spanId
     * @param {Spans.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link MirascopeApi.UnprocessableEntityError}
     *
     * @example
     *     await client.projects.spans.getById("project_uuid", "span_id")
     */
    getById(projectUuid, spanId, requestOptions) {
        return core.HttpResponsePromise.fromPromise(this.__getById(projectUuid, spanId, requestOptions));
    }
    __getById(projectUuid, spanId, requestOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            var _a, _b;
            const _response = yield core.fetcher({
                url: core.joinUrl((_a = (yield core.Supplier.get(this._options.baseUrl))) !== null && _a !== void 0 ? _a : (yield core.Supplier.get(this._options.environment)), `projects/${encodeURIComponent(projectUuid)}/spans/${encodeURIComponent(spanId)}`),
                method: "GET",
                headers: mergeHeaders((_b = this._options) === null || _b === void 0 ? void 0 : _b.headers, mergeOnlyDefinedHeaders({
                    Authorization: yield this._getAuthorizationHeader(),
                    "X-API-Key": requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.apiKey,
                }), requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.headers),
                timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
                maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries,
                abortSignal: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.abortSignal,
            });
            if (_response.ok) {
                return { data: _response.body, rawResponse: _response.rawResponse };
            }
            if (_response.error.reason === "status-code") {
                switch (_response.error.statusCode) {
                    case 422:
                        throw new MirascopeApi.UnprocessableEntityError(_response.error.body, _response.rawResponse);
                    default:
                        throw new errors.MirascopeApiError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.body,
                            rawResponse: _response.rawResponse,
                        });
                }
            }
            switch (_response.error.reason) {
                case "non-json":
                    throw new errors.MirascopeApiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.rawBody,
                        rawResponse: _response.rawResponse,
                    });
                case "timeout":
                    throw new errors.MirascopeApiTimeoutError("Timeout exceeded when calling GET /projects/{project_uuid}/spans/{span_id}.");
                case "unknown":
                    throw new errors.MirascopeApiError({
                        message: _response.error.errorMessage,
                        rawResponse: _response.rawResponse,
                    });
            }
        });
    }
    /**
     * Search for traces in OpenSearch.
     *
     * @param {string} projectUuid
     * @param {MirascopeApi.projects.SpansSearchRequest} request
     * @param {Spans.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link MirascopeApi.UnprocessableEntityError}
     *
     * @example
     *     await client.projects.spans.search("project_uuid")
     */
    search(projectUuid, request = {}, requestOptions) {
        return core.HttpResponsePromise.fromPromise(this.__search(projectUuid, request, requestOptions));
    }
    __search(projectUuid_1) {
        return __awaiter(this, arguments, void 0, function* (projectUuid, request = {}, requestOptions) {
            var _a, _b;
            const { query_string: queryString, time_range_start: timeRangeStart, time_range_end: timeRangeEnd, limit, scope, type: type_, } = request;
            const _queryParams = {};
            if (queryString != null) {
                _queryParams["query_string"] = queryString;
            }
            if (timeRangeStart != null) {
                _queryParams["time_range_start"] = timeRangeStart.toString();
            }
            if (timeRangeEnd != null) {
                _queryParams["time_range_end"] = timeRangeEnd.toString();
            }
            if (limit != null) {
                _queryParams["limit"] = limit.toString();
            }
            if (scope != null) {
                _queryParams["scope"] = scope;
            }
            if (type_ != null) {
                _queryParams["type"] = type_;
            }
            const _response = yield core.fetcher({
                url: core.joinUrl((_a = (yield core.Supplier.get(this._options.baseUrl))) !== null && _a !== void 0 ? _a : (yield core.Supplier.get(this._options.environment)), `projects/${encodeURIComponent(projectUuid)}/spans`),
                method: "GET",
                headers: mergeHeaders((_b = this._options) === null || _b === void 0 ? void 0 : _b.headers, mergeOnlyDefinedHeaders({
                    Authorization: yield this._getAuthorizationHeader(),
                    "X-API-Key": requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.apiKey,
                }), requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.headers),
                queryParameters: _queryParams,
                timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
                maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries,
                abortSignal: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.abortSignal,
            });
            if (_response.ok) {
                return { data: _response.body, rawResponse: _response.rawResponse };
            }
            if (_response.error.reason === "status-code") {
                switch (_response.error.statusCode) {
                    case 422:
                        throw new MirascopeApi.UnprocessableEntityError(_response.error.body, _response.rawResponse);
                    default:
                        throw new errors.MirascopeApiError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.body,
                            rawResponse: _response.rawResponse,
                        });
                }
            }
            switch (_response.error.reason) {
                case "non-json":
                    throw new errors.MirascopeApiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.rawBody,
                        rawResponse: _response.rawResponse,
                    });
                case "timeout":
                    throw new errors.MirascopeApiTimeoutError("Timeout exceeded when calling GET /projects/{project_uuid}/spans.");
                case "unknown":
                    throw new errors.MirascopeApiError({
                        message: _response.error.errorMessage,
                        rawResponse: _response.rawResponse,
                    });
            }
        });
    }
    /**
     * Delete spans by UUID.
     *
     * @param {string} projectUuid
     * @param {string} spanUuid
     * @param {Spans.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link MirascopeApi.UnprocessableEntityError}
     *
     * @example
     *     await client.projects.spans.delete("project_uuid", "span_uuid")
     */
    delete(projectUuid, spanUuid, requestOptions) {
        return core.HttpResponsePromise.fromPromise(this.__delete(projectUuid, spanUuid, requestOptions));
    }
    __delete(projectUuid, spanUuid, requestOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            var _a, _b;
            const _response = yield core.fetcher({
                url: core.joinUrl((_a = (yield core.Supplier.get(this._options.baseUrl))) !== null && _a !== void 0 ? _a : (yield core.Supplier.get(this._options.environment)), `projects/${encodeURIComponent(projectUuid)}/spans/${encodeURIComponent(spanUuid)}`),
                method: "DELETE",
                headers: mergeHeaders((_b = this._options) === null || _b === void 0 ? void 0 : _b.headers, mergeOnlyDefinedHeaders({
                    Authorization: yield this._getAuthorizationHeader(),
                    "X-API-Key": requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.apiKey,
                }), requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.headers),
                timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
                maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries,
                abortSignal: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.abortSignal,
            });
            if (_response.ok) {
                return { data: _response.body, rawResponse: _response.rawResponse };
            }
            if (_response.error.reason === "status-code") {
                switch (_response.error.statusCode) {
                    case 422:
                        throw new MirascopeApi.UnprocessableEntityError(_response.error.body, _response.rawResponse);
                    default:
                        throw new errors.MirascopeApiError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.body,
                            rawResponse: _response.rawResponse,
                        });
                }
            }
            switch (_response.error.reason) {
                case "non-json":
                    throw new errors.MirascopeApiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.rawBody,
                        rawResponse: _response.rawResponse,
                    });
                case "timeout":
                    throw new errors.MirascopeApiTimeoutError("Timeout exceeded when calling DELETE /projects/{project_uuid}/spans/{span_uuid}.");
                case "unknown":
                    throw new errors.MirascopeApiError({
                        message: _response.error.errorMessage,
                        rawResponse: _response.rawResponse,
                    });
            }
        });
    }
    _getAuthorizationHeader() {
        return __awaiter(this, void 0, void 0, function* () {
            const bearer = yield core.Supplier.get(this._options.token);
            if (bearer != null) {
                return `Bearer ${bearer}`;
            }
            return undefined;
        });
    }
}
