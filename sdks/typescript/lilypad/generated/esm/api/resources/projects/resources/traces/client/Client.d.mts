/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as core from "../../../../../../core/index.mjs";
import * as Lilypad from "../../../../../index.mjs";
export declare namespace Traces {
    interface Options {
        environment: core.Supplier<string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        token?: core.Supplier<core.BearerToken | undefined>;
        /** Override the X-API-Key header */
        apiKey: core.Supplier<string>;
        /** Additional headers to include in requests. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }
    interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Override the X-API-Key header */
        apiKey?: string;
        /** Additional headers to include in the request. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }
}
export declare class Traces {
    protected readonly _options: Traces.Options;
    constructor(_options: Traces.Options);
    /**
     * Get traces by project UUID.
     *
     * @param {string} projectUuid
     * @param {string} spanId
     * @param {Traces.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Lilypad.UnprocessableEntityError}
     *
     * @example
     *     await client.projects.traces.getRoot("project_uuid", "span_id")
     */
    getRoot(projectUuid: string, spanId: string, requestOptions?: Traces.RequestOptions): core.HttpResponsePromise<Lilypad.SpanPublic>;
    private __getRoot;
    /**
     * Get traces by project UUID.
     *
     * @param {string} projectUuid
     * @param {Lilypad.projects.TracesListRequest} request
     * @param {Traces.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Lilypad.UnprocessableEntityError}
     *
     * @example
     *     await client.projects.traces.list("project_uuid")
     */
    list(projectUuid: string, request?: Lilypad.projects.TracesListRequest, requestOptions?: Traces.RequestOptions): core.HttpResponsePromise<Lilypad.PaginatedSpanPublic>;
    private __list;
    /**
     * Create span traces using queue-based processing.
     *
     * @param {string} projectUuid
     * @param {Traces.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Lilypad.UnprocessableEntityError}
     *
     * @example
     *     await client.projects.traces.create("project_uuid")
     */
    create(projectUuid: string, requestOptions?: Traces.RequestOptions): core.HttpResponsePromise<Lilypad.TracesQueueResponse>;
    private __create;
    protected _getAuthorizationHeader(): Promise<string | undefined>;
}
