/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as core from "../../../../core/index.mjs";
import * as MirascopeApi from "../../../index.mjs";
export declare namespace Comments {
    interface Options {
        environment: core.Supplier<string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        token?: core.Supplier<core.BearerToken | undefined>;
        /** Override the X-API-Key header */
        apiKey: core.Supplier<string>;
        /** Additional headers to include in requests. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }
    interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Override the X-API-Key header */
        apiKey?: string;
        /** Additional headers to include in the request. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }
}
export declare class Comments {
    protected readonly _options: Comments.Options;
    constructor(_options: Comments.Options);
    /**
     * Get all comments.
     *
     * @param {Comments.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.comments.list()
     */
    list(requestOptions?: Comments.RequestOptions): core.HttpResponsePromise<MirascopeApi.CommentPublic[]>;
    private __list;
    /**
     * Create a comment
     *
     * @param {MirascopeApi.CommentCreate} request
     * @param {Comments.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link MirascopeApi.UnprocessableEntityError}
     *
     * @example
     *     await client.comments.create({
     *         text: "text",
     *         span_uuid: "span_uuid"
     *     })
     */
    create(request: MirascopeApi.CommentCreate, requestOptions?: Comments.RequestOptions): core.HttpResponsePromise<MirascopeApi.CommentPublic>;
    private __create;
    /**
     * Get a comment.
     *
     * @param {string} commentUuid
     * @param {Comments.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link MirascopeApi.UnprocessableEntityError}
     *
     * @example
     *     await client.comments.get("comment_uuid")
     */
    get(commentUuid: string, requestOptions?: Comments.RequestOptions): core.HttpResponsePromise<MirascopeApi.CommentPublic>;
    private __get;
    /**
     * Delete a comment
     *
     * @param {string} commentUuid
     * @param {Comments.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link MirascopeApi.UnprocessableEntityError}
     *
     * @example
     *     await client.comments.delete("comment_uuid")
     */
    delete(commentUuid: string, requestOptions?: Comments.RequestOptions): core.HttpResponsePromise<boolean>;
    private __delete;
    /**
     * Update a comment.
     *
     * @param {string} commentUuid
     * @param {MirascopeApi.CommentUpdate} request
     * @param {Comments.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link MirascopeApi.UnprocessableEntityError}
     *
     * @example
     *     await client.comments.update("comment_uuid")
     */
    update(commentUuid: string, request?: MirascopeApi.CommentUpdate, requestOptions?: Comments.RequestOptions): core.HttpResponsePromise<MirascopeApi.CommentPublic>;
    private __update;
    protected _getAuthorizationHeader(): Promise<string | undefined>;
}
