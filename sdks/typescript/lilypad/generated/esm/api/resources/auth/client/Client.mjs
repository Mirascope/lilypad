/**
 * This file was auto-generated by Fern from our API Definition.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import * as core from "../../../../core/index.mjs";
import * as MirascopeApi from "../../../index.mjs";
import { mergeHeaders, mergeOnlyDefinedHeaders } from "../../../../core/headers.mjs";
import * as errors from "../../../../errors/index.mjs";
export class Auth {
    constructor(_options) {
        this._options = _options;
    }
    /**
     * Callback for GitHub OAuth.
     *
     * Saves the user and organization or retrieves the user after authenticating
     * with GitHub.
     *
     * @param {MirascopeApi.AuthHandleGithubCallbackRequest} request
     * @param {Auth.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link MirascopeApi.UnprocessableEntityError}
     *
     * @example
     *     await client.auth.handleGithubCallback({
     *         code: "code"
     *     })
     */
    handleGithubCallback(request, requestOptions) {
        return core.HttpResponsePromise.fromPromise(this.__handleGithubCallback(request, requestOptions));
    }
    __handleGithubCallback(request, requestOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            var _a, _b;
            const { code } = request;
            const _queryParams = {};
            _queryParams["code"] = code;
            const _response = yield core.fetcher({
                url: core.joinUrl((_a = (yield core.Supplier.get(this._options.baseUrl))) !== null && _a !== void 0 ? _a : (yield core.Supplier.get(this._options.environment)), "auth/github/callback"),
                method: "GET",
                headers: mergeHeaders((_b = this._options) === null || _b === void 0 ? void 0 : _b.headers, mergeOnlyDefinedHeaders({
                    Authorization: yield this._getAuthorizationHeader(),
                    "X-API-Key": requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.apiKey,
                }), requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.headers),
                queryParameters: _queryParams,
                timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
                maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries,
                abortSignal: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.abortSignal,
            });
            if (_response.ok) {
                return { data: _response.body, rawResponse: _response.rawResponse };
            }
            if (_response.error.reason === "status-code") {
                switch (_response.error.statusCode) {
                    case 422:
                        throw new MirascopeApi.UnprocessableEntityError(_response.error.body, _response.rawResponse);
                    default:
                        throw new errors.MirascopeApiError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.body,
                            rawResponse: _response.rawResponse,
                        });
                }
            }
            switch (_response.error.reason) {
                case "non-json":
                    throw new errors.MirascopeApiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.rawBody,
                        rawResponse: _response.rawResponse,
                    });
                case "timeout":
                    throw new errors.MirascopeApiTimeoutError("Timeout exceeded when calling GET /auth/github/callback.");
                case "unknown":
                    throw new errors.MirascopeApiError({
                        message: _response.error.errorMessage,
                        rawResponse: _response.rawResponse,
                    });
            }
        });
    }
    /**
     * Callback for Google OAuth.
     *
     * Saves the user and organization or retrieves the user after authenticating
     * with Google.
     *
     * @param {MirascopeApi.AuthHandleGoogleCallbackRequest} request
     * @param {Auth.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link MirascopeApi.UnprocessableEntityError}
     *
     * @example
     *     await client.auth.handleGoogleCallback({
     *         code: "code"
     *     })
     */
    handleGoogleCallback(request, requestOptions) {
        return core.HttpResponsePromise.fromPromise(this.__handleGoogleCallback(request, requestOptions));
    }
    __handleGoogleCallback(request, requestOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            var _a, _b;
            const { code } = request;
            const _queryParams = {};
            _queryParams["code"] = code;
            const _response = yield core.fetcher({
                url: core.joinUrl((_a = (yield core.Supplier.get(this._options.baseUrl))) !== null && _a !== void 0 ? _a : (yield core.Supplier.get(this._options.environment)), "auth/google/callback"),
                method: "GET",
                headers: mergeHeaders((_b = this._options) === null || _b === void 0 ? void 0 : _b.headers, mergeOnlyDefinedHeaders({
                    Authorization: yield this._getAuthorizationHeader(),
                    "X-API-Key": requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.apiKey,
                }), requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.headers),
                queryParameters: _queryParams,
                timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
                maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries,
                abortSignal: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.abortSignal,
            });
            if (_response.ok) {
                return { data: _response.body, rawResponse: _response.rawResponse };
            }
            if (_response.error.reason === "status-code") {
                switch (_response.error.statusCode) {
                    case 422:
                        throw new MirascopeApi.UnprocessableEntityError(_response.error.body, _response.rawResponse);
                    default:
                        throw new errors.MirascopeApiError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.body,
                            rawResponse: _response.rawResponse,
                        });
                }
            }
            switch (_response.error.reason) {
                case "non-json":
                    throw new errors.MirascopeApiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.rawBody,
                        rawResponse: _response.rawResponse,
                    });
                case "timeout":
                    throw new errors.MirascopeApiTimeoutError("Timeout exceeded when calling GET /auth/google/callback.");
                case "unknown":
                    throw new errors.MirascopeApiError({
                        message: _response.error.errorMessage,
                        rawResponse: _response.rawResponse,
                    });
            }
        });
    }
    _getAuthorizationHeader() {
        return __awaiter(this, void 0, void 0, function* () {
            const bearer = yield core.Supplier.get(this._options.token);
            if (bearer != null) {
                return `Bearer ${bearer}`;
            }
            return undefined;
        });
    }
}
