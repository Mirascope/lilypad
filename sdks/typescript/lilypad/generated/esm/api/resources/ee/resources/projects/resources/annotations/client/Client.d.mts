/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as core from "../../../../../../../../core/index.mjs";
import * as MirascopeApi from "../../../../../../../index.mjs";
export declare namespace Annotations {
    interface Options {
        environment: core.Supplier<string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        token?: core.Supplier<core.BearerToken | undefined>;
        /** Override the X-API-Key header */
        apiKey: core.Supplier<string>;
        /** Additional headers to include in requests. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }
    interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Override the X-API-Key header */
        apiKey?: string;
        /** Additional headers to include in the request. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }
}
export declare class Annotations {
    protected readonly _options: Annotations.Options;
    constructor(_options: Annotations.Options);
    /**
     * Get annotations by project.
     *
     * @param {string} projectUuid
     * @param {Annotations.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link MirascopeApi.UnprocessableEntityError}
     *
     * @example
     *     await client.ee.projects.annotations.list("project_uuid")
     */
    list(projectUuid: string, requestOptions?: Annotations.RequestOptions): core.HttpResponsePromise<MirascopeApi.AnnotationPublic[]>;
    private __list;
    /**
     * Create an annotation.
     *
     * Args:
     *     project_uuid: The project UUID.
     *     annotations_service: The annotation service.
     *     project_service: The project service.
     *     annotations_create: The annotation create model.
     *
     * Returns:
     *     AnnotationPublic: The created annotation.
     *
     * Raises:
     *     HTTPException: If the span has already been assigned to a user and has
     *     not been labeled yet.
     *
     * @param {string} projectUuid
     * @param {MirascopeApi.AnnotationCreate[]} request
     * @param {Annotations.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link MirascopeApi.UnprocessableEntityError}
     *
     * @example
     *     await client.ee.projects.annotations.create("project_uuid", [{}])
     */
    create(projectUuid: string, request: MirascopeApi.AnnotationCreate[], requestOptions?: Annotations.RequestOptions): core.HttpResponsePromise<MirascopeApi.AnnotationPublic[]>;
    private __create;
    /**
     * Delete an annotation.
     *
     * @param {string} annotationUuid
     * @param {string} projectUuid
     * @param {Annotations.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link MirascopeApi.UnprocessableEntityError}
     *
     * @example
     *     await client.ee.projects.annotations.delete("annotation_uuid", "project_uuid")
     */
    delete(annotationUuid: string, projectUuid: string, requestOptions?: Annotations.RequestOptions): core.HttpResponsePromise<boolean>;
    private __delete;
    /**
     * Update an annotation.
     *
     * @param {string} annotationUuid
     * @param {string} projectUuid
     * @param {MirascopeApi.ee.projects.AnnotationUpdate} request
     * @param {Annotations.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link MirascopeApi.UnprocessableEntityError}
     *
     * @example
     *     await client.ee.projects.annotations.update("annotation_uuid", "project_uuid")
     */
    update(annotationUuid: string, projectUuid: string, request?: MirascopeApi.ee.projects.AnnotationUpdate, requestOptions?: Annotations.RequestOptions): core.HttpResponsePromise<MirascopeApi.AnnotationPublic>;
    private __update;
    protected _getAuthorizationHeader(): Promise<string | undefined>;
}
