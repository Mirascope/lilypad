/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as core from "../../../../../../core/index.mjs";
import * as Lilypad from "../../../../../index.mjs";
export declare namespace Invites {
    interface Options {
        environment: core.Supplier<string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        token?: core.Supplier<core.BearerToken | undefined>;
        /** Override the X-API-Key header */
        apiKey: core.Supplier<string>;
        /** Additional headers to include in requests. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }
    interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Override the X-API-Key header */
        apiKey?: string;
        /** Additional headers to include in the request. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }
}
export declare class Invites {
    protected readonly _options: Invites.Options;
    constructor(_options: Invites.Options);
    /**
     * Get an organization invite.
     *
     * @param {Invites.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.organizations.invites.list()
     */
    list(requestOptions?: Invites.RequestOptions): core.HttpResponsePromise<Lilypad.OrganizationInvitePublic[]>;
    private __list;
    /**
     * Get an organization invite.
     *
     * @param {string} inviteToken
     * @param {Invites.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Lilypad.UnprocessableEntityError}
     *
     * @example
     *     await client.organizations.invites.get("invite_token")
     */
    get(inviteToken: string, requestOptions?: Invites.RequestOptions): core.HttpResponsePromise<Lilypad.OrganizationInvitePublic>;
    private __get;
    /**
     * Create an organization invite.
     *
     * @param {Lilypad.organizations.OrganizationInviteCreate} request
     * @param {Invites.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Lilypad.UnprocessableEntityError}
     *
     * @example
     *     await client.organizations.invites.create({
     *         invited_by: "invited_by",
     *         email: "email"
     *     })
     */
    create(request: Lilypad.organizations.OrganizationInviteCreate, requestOptions?: Invites.RequestOptions): core.HttpResponsePromise<Lilypad.OrganizationInvitePublic>;
    private __create;
    /**
     * Remove an organization invite.
     *
     * @param {string} organizationInviteUuid
     * @param {Invites.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Lilypad.UnprocessableEntityError}
     *
     * @example
     *     await client.organizations.invites.remove("organization_invite_uuid")
     */
    remove(organizationInviteUuid: string, requestOptions?: Invites.RequestOptions): core.HttpResponsePromise<boolean>;
    private __remove;
    protected _getAuthorizationHeader(): Promise<string | undefined>;
}
