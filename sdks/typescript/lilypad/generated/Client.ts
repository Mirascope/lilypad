/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as core from "./core/index.js";
import { mergeHeaders, mergeOnlyDefinedHeaders } from "./core/headers.js";
import * as errors from "./errors/index.js";
import * as Lilypad from "./api/index.js";
import { Organizations } from "./api/resources/organizations/client/Client.js";
import { ApiKeys } from "./api/resources/apiKeys/client/Client.js";
import { Webhooks } from "./api/resources/webhooks/client/Client.js";
import { Projects } from "./api/resources/projects/client/Client.js";
import { Spans } from "./api/resources/spans/client/Client.js";
import { Auth } from "./api/resources/auth/client/Client.js";
import { Users } from "./api/resources/users/client/Client.js";
import { ExternalApiKeys } from "./api/resources/externalApiKeys/client/Client.js";
import { Environments } from "./api/resources/environments/client/Client.js";
import { UserConsents } from "./api/resources/userConsents/client/Client.js";
import { Tags } from "./api/resources/tags/client/Client.js";
import { Comments } from "./api/resources/comments/client/Client.js";
import { Settings } from "./api/resources/settings/client/Client.js";
import { Ee } from "./api/resources/ee/client/Client.js";

export declare namespace LilypadClient {
    export interface Options {
        environment: core.Supplier<string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        token?: core.Supplier<core.BearerToken | undefined>;
        /** Override the X-API-Key header */
        apiKey: core.Supplier<string>;
        /** Additional headers to include in requests. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Override the X-API-Key header */
        apiKey?: string;
        /** Additional headers to include in the request. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }
}

export class LilypadClient {
    protected readonly _options: LilypadClient.Options;
    protected _organizations: Organizations | undefined;
    protected _apiKeys: ApiKeys | undefined;
    protected _webhooks: Webhooks | undefined;
    protected _projects: Projects | undefined;
    protected _spans: Spans | undefined;
    protected _auth: Auth | undefined;
    protected _users: Users | undefined;
    protected _externalApiKeys: ExternalApiKeys | undefined;
    protected _environments: Environments | undefined;
    protected _userConsents: UserConsents | undefined;
    protected _tags: Tags | undefined;
    protected _comments: Comments | undefined;
    protected _settings: Settings | undefined;
    protected _ee: Ee | undefined;

    constructor(_options: LilypadClient.Options) {
        this._options = {
            ..._options,
            headers: mergeHeaders(
                {
                    "X-API-Key": _options?.apiKey,
                    "X-Fern-Language": "JavaScript",
                    "X-Fern-Runtime": core.RUNTIME.type,
                    "X-Fern-Runtime-Version": core.RUNTIME.version,
                },
                _options?.headers,
            ),
        };
    }

    public get organizations(): Organizations {
        return (this._organizations ??= new Organizations(this._options));
    }

    public get apiKeys(): ApiKeys {
        return (this._apiKeys ??= new ApiKeys(this._options));
    }

    public get webhooks(): Webhooks {
        return (this._webhooks ??= new Webhooks(this._options));
    }

    public get projects(): Projects {
        return (this._projects ??= new Projects(this._options));
    }

    public get spans(): Spans {
        return (this._spans ??= new Spans(this._options));
    }

    public get auth(): Auth {
        return (this._auth ??= new Auth(this._options));
    }

    public get users(): Users {
        return (this._users ??= new Users(this._options));
    }

    public get externalApiKeys(): ExternalApiKeys {
        return (this._externalApiKeys ??= new ExternalApiKeys(this._options));
    }

    public get environments(): Environments {
        return (this._environments ??= new Environments(this._options));
    }

    public get userConsents(): UserConsents {
        return (this._userConsents ??= new UserConsents(this._options));
    }

    public get tags(): Tags {
        return (this._tags ??= new Tags(this._options));
    }

    public get comments(): Comments {
        return (this._comments ??= new Comments(this._options));
    }

    public get settings(): Settings {
        return (this._settings ??= new Settings(this._options));
    }

    public get ee(): Ee {
        return (this._ee ??= new Ee(this._options));
    }

    /**
     * @param {LilypadClient.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.createCustomerPortalStripeCustomerPortalPost()
     */
    public createCustomerPortalStripeCustomerPortalPost(
        requestOptions?: LilypadClient.RequestOptions,
    ): core.HttpResponsePromise<string> {
        return core.HttpResponsePromise.fromPromise(
            this.__createCustomerPortalStripeCustomerPortalPost(requestOptions),
        );
    }

    private async __createCustomerPortalStripeCustomerPortalPost(
        requestOptions?: LilypadClient.RequestOptions,
    ): Promise<core.WithRawResponse<string>> {
        const _response = await core.fetcher({
            url: core.joinUrl(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)),
                "stripe/customer-portal",
            ),
            method: "POST",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({
                    Authorization: await this._getAuthorizationHeader(),
                    "X-API-Key": requestOptions?.apiKey,
                }),
                requestOptions?.headers,
            ),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as string, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.LilypadError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.LilypadError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.LilypadTimeoutError("Timeout exceeded when calling POST /stripe/customer-portal.");
            case "unknown":
                throw new errors.LilypadError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * @param {Lilypad.StripeCheckoutSession} request
     * @param {LilypadClient.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Lilypad.UnprocessableEntityError}
     *
     * @example
     *     await client.createCheckoutSessionStripeCreateCheckoutSessionPost({
     *         tier: 1
     *     })
     */
    public createCheckoutSessionStripeCreateCheckoutSessionPost(
        request: Lilypad.StripeCheckoutSession,
        requestOptions?: LilypadClient.RequestOptions,
    ): core.HttpResponsePromise<string> {
        return core.HttpResponsePromise.fromPromise(
            this.__createCheckoutSessionStripeCreateCheckoutSessionPost(request, requestOptions),
        );
    }

    private async __createCheckoutSessionStripeCreateCheckoutSessionPost(
        request: Lilypad.StripeCheckoutSession,
        requestOptions?: LilypadClient.RequestOptions,
    ): Promise<core.WithRawResponse<string>> {
        const _response = await core.fetcher({
            url: core.joinUrl(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)),
                "stripe/create-checkout-session",
            ),
            method: "POST",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({
                    Authorization: await this._getAuthorizationHeader(),
                    "X-API-Key": requestOptions?.apiKey,
                }),
                requestOptions?.headers,
            ),
            contentType: "application/json",
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as string, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 422:
                    throw new Lilypad.UnprocessableEntityError(
                        _response.error.body as Lilypad.HttpValidationError,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.LilypadError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.LilypadError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.LilypadTimeoutError(
                    "Timeout exceeded when calling POST /stripe/create-checkout-session.",
                );
            case "unknown":
                throw new errors.LilypadError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * @param {LilypadClient.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.getEventSummariesStripeEventSummariesGet()
     */
    public getEventSummariesStripeEventSummariesGet(
        requestOptions?: LilypadClient.RequestOptions,
    ): core.HttpResponsePromise<Lilypad.EventSummaryResponse> {
        return core.HttpResponsePromise.fromPromise(this.__getEventSummariesStripeEventSummariesGet(requestOptions));
    }

    private async __getEventSummariesStripeEventSummariesGet(
        requestOptions?: LilypadClient.RequestOptions,
    ): Promise<core.WithRawResponse<Lilypad.EventSummaryResponse>> {
        const _response = await core.fetcher({
            url: core.joinUrl(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)),
                "stripe/event-summaries",
            ),
            method: "GET",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({
                    Authorization: await this._getAuthorizationHeader(),
                    "X-API-Key": requestOptions?.apiKey,
                }),
                requestOptions?.headers,
            ),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Lilypad.EventSummaryResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.LilypadError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.LilypadError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.LilypadTimeoutError("Timeout exceeded when calling GET /stripe/event-summaries.");
            case "unknown":
                throw new errors.LilypadError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Get span by uuid or span_id.
     *
     * @param {string} projectUuid
     * @param {string} spanIdentifier
     * @param {Lilypad.GetSpanProjectsProjectUuidSpansSpanIdentifierGetRequest} request
     * @param {LilypadClient.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Lilypad.UnprocessableEntityError}
     *
     * @example
     *     await client.getSpanProjectsProjectUuidSpansSpanIdentifierGet("project_uuid", "span_identifier", {
     *         environment_uuid: "environment_uuid"
     *     })
     */
    public getSpanProjectsProjectUuidSpansSpanIdentifierGet(
        projectUuid: string,
        spanIdentifier: string,
        request: Lilypad.GetSpanProjectsProjectUuidSpansSpanIdentifierGetRequest,
        requestOptions?: LilypadClient.RequestOptions,
    ): core.HttpResponsePromise<Lilypad.SpanMoreDetails> {
        return core.HttpResponsePromise.fromPromise(
            this.__getSpanProjectsProjectUuidSpansSpanIdentifierGet(
                projectUuid,
                spanIdentifier,
                request,
                requestOptions,
            ),
        );
    }

    private async __getSpanProjectsProjectUuidSpansSpanIdentifierGet(
        projectUuid: string,
        spanIdentifier: string,
        request: Lilypad.GetSpanProjectsProjectUuidSpansSpanIdentifierGetRequest,
        requestOptions?: LilypadClient.RequestOptions,
    ): Promise<core.WithRawResponse<Lilypad.SpanMoreDetails>> {
        const { environment_uuid: environmentUuid } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        _queryParams["environment_uuid"] = environmentUuid;
        const _response = await core.fetcher({
            url: core.joinUrl(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)),
                `projects/${encodeURIComponent(projectUuid)}/spans/${encodeURIComponent(spanIdentifier)}`,
            ),
            method: "GET",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({
                    Authorization: await this._getAuthorizationHeader(),
                    "X-API-Key": requestOptions?.apiKey,
                }),
                requestOptions?.headers,
            ),
            queryParameters: _queryParams,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Lilypad.SpanMoreDetails, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 422:
                    throw new Lilypad.UnprocessableEntityError(
                        _response.error.body as Lilypad.HttpValidationError,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.LilypadError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.LilypadError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.LilypadTimeoutError(
                    "Timeout exceeded when calling GET /projects/{project_uuid}/spans/{span_identifier}.",
                );
            case "unknown":
                throw new errors.LilypadError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Get all spans for a given trace ID.
     *
     * @param {string} projectUuid
     * @param {string} traceId
     * @param {Lilypad.GetSpansByTraceIdProjectsProjectUuidTracesByTraceIdTraceIdGetRequest} request
     * @param {LilypadClient.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Lilypad.UnprocessableEntityError}
     *
     * @example
     *     await client.getSpansByTraceIdProjectsProjectUuidTracesByTraceIdTraceIdGet("project_uuid", "trace_id", {
     *         environment_uuid: "environment_uuid"
     *     })
     */
    public getSpansByTraceIdProjectsProjectUuidTracesByTraceIdTraceIdGet(
        projectUuid: string,
        traceId: string,
        request: Lilypad.GetSpansByTraceIdProjectsProjectUuidTracesByTraceIdTraceIdGetRequest,
        requestOptions?: LilypadClient.RequestOptions,
    ): core.HttpResponsePromise<Lilypad.SpanPublic[]> {
        return core.HttpResponsePromise.fromPromise(
            this.__getSpansByTraceIdProjectsProjectUuidTracesByTraceIdTraceIdGet(
                projectUuid,
                traceId,
                request,
                requestOptions,
            ),
        );
    }

    private async __getSpansByTraceIdProjectsProjectUuidTracesByTraceIdTraceIdGet(
        projectUuid: string,
        traceId: string,
        request: Lilypad.GetSpansByTraceIdProjectsProjectUuidTracesByTraceIdTraceIdGetRequest,
        requestOptions?: LilypadClient.RequestOptions,
    ): Promise<core.WithRawResponse<Lilypad.SpanPublic[]>> {
        const { environment_uuid: environmentUuid } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        _queryParams["environment_uuid"] = environmentUuid;
        const _response = await core.fetcher({
            url: core.joinUrl(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)),
                `projects/${encodeURIComponent(projectUuid)}/traces/by-trace-id/${encodeURIComponent(traceId)}`,
            ),
            method: "GET",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({
                    Authorization: await this._getAuthorizationHeader(),
                    "X-API-Key": requestOptions?.apiKey,
                }),
                requestOptions?.headers,
            ),
            queryParameters: _queryParams,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Lilypad.SpanPublic[], rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 422:
                    throw new Lilypad.UnprocessableEntityError(
                        _response.error.body as Lilypad.HttpValidationError,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.LilypadError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.LilypadError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.LilypadTimeoutError(
                    "Timeout exceeded when calling GET /projects/{project_uuid}/traces/by-trace-id/{trace_id}.",
                );
            case "unknown":
                throw new errors.LilypadError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    protected async _getAuthorizationHeader(): Promise<string | undefined> {
        const bearer = await core.Supplier.get(this._options.token);
        if (bearer != null) {
            return `Bearer ${bearer}`;
        }

        return undefined;
    }
}
