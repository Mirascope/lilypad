/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as core from "../../../../../../core/index.js";
import * as Lilypad from "../../../../../index.js";
import { mergeHeaders, mergeOnlyDefinedHeaders } from "../../../../../../core/headers.js";
import * as errors from "../../../../../../errors/index.js";

export declare namespace Environments {
    export interface Options {
        environment: core.Supplier<string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        token?: core.Supplier<core.BearerToken | undefined>;
        /** Override the X-API-Key header */
        apiKey: core.Supplier<string>;
        /** Additional headers to include in requests. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Override the X-API-Key header */
        apiKey?: string;
        /** Additional headers to include in the request. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }
}

export class Environments {
    protected readonly _options: Environments.Options;

    constructor(_options: Environments.Options) {
        this._options = _options;
    }

    /**
     * Deploy a function to an environment.
     *
     * @param {string} projectUuid
     * @param {string} environmentUuid
     * @param {Lilypad.projects.EnvironmentsDeployRequest} request
     * @param {Environments.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Lilypad.UnprocessableEntityError}
     *
     * @example
     *     await client.projects.environments.deploy("project_uuid", "environment_uuid", {
     *         function_uuid: "function_uuid"
     *     })
     */
    public deploy(
        projectUuid: string,
        environmentUuid: string,
        request: Lilypad.projects.EnvironmentsDeployRequest,
        requestOptions?: Environments.RequestOptions,
    ): core.HttpResponsePromise<Lilypad.DeploymentPublic> {
        return core.HttpResponsePromise.fromPromise(
            this.__deploy(projectUuid, environmentUuid, request, requestOptions),
        );
    }

    private async __deploy(
        projectUuid: string,
        environmentUuid: string,
        request: Lilypad.projects.EnvironmentsDeployRequest,
        requestOptions?: Environments.RequestOptions,
    ): Promise<core.WithRawResponse<Lilypad.DeploymentPublic>> {
        const { function_uuid: functionUuid, notes } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        _queryParams["function_uuid"] = functionUuid;
        if (notes != null) {
            _queryParams["notes"] = notes;
        }

        const _response = await core.fetcher({
            url: core.joinUrl(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)),
                `projects/${encodeURIComponent(projectUuid)}/environments/${encodeURIComponent(environmentUuid)}/deploy`,
            ),
            method: "POST",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({
                    Authorization: await this._getAuthorizationHeader(),
                    "X-API-Key": requestOptions?.apiKey,
                }),
                requestOptions?.headers,
            ),
            queryParameters: _queryParams,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Lilypad.DeploymentPublic, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 422:
                    throw new Lilypad.UnprocessableEntityError(
                        _response.error.body as Lilypad.HttpValidationError,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.LilypadError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.LilypadError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.LilypadTimeoutError(
                    "Timeout exceeded when calling POST /projects/{project_uuid}/environments/{environment_uuid}/deploy.",
                );
            case "unknown":
                throw new errors.LilypadError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Get active deployment for an environment.
     *
     * @param {string} projectUuid
     * @param {string} environmentUuid
     * @param {Environments.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Lilypad.UnprocessableEntityError}
     *
     * @example
     *     await client.projects.environments.getActiveDeployment("project_uuid", "environment_uuid")
     */
    public getActiveDeployment(
        projectUuid: string,
        environmentUuid: string,
        requestOptions?: Environments.RequestOptions,
    ): core.HttpResponsePromise<Lilypad.DeploymentPublic> {
        return core.HttpResponsePromise.fromPromise(
            this.__getActiveDeployment(projectUuid, environmentUuid, requestOptions),
        );
    }

    private async __getActiveDeployment(
        projectUuid: string,
        environmentUuid: string,
        requestOptions?: Environments.RequestOptions,
    ): Promise<core.WithRawResponse<Lilypad.DeploymentPublic>> {
        const _response = await core.fetcher({
            url: core.joinUrl(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)),
                `projects/${encodeURIComponent(projectUuid)}/environments/${encodeURIComponent(environmentUuid)}/deployment`,
            ),
            method: "GET",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({
                    Authorization: await this._getAuthorizationHeader(),
                    "X-API-Key": requestOptions?.apiKey,
                }),
                requestOptions?.headers,
            ),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Lilypad.DeploymentPublic, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 422:
                    throw new Lilypad.UnprocessableEntityError(
                        _response.error.body as Lilypad.HttpValidationError,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.LilypadError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.LilypadError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.LilypadTimeoutError(
                    "Timeout exceeded when calling GET /projects/{project_uuid}/environments/{environment_uuid}/deployment.",
                );
            case "unknown":
                throw new errors.LilypadError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Get the currently active function for an environment.
     *
     * @param {string} projectUuid
     * @param {string} environmentUuid
     * @param {Environments.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Lilypad.UnprocessableEntityError}
     *
     * @example
     *     await client.projects.environments.getFunction("project_uuid", "environment_uuid")
     */
    public getFunction(
        projectUuid: string,
        environmentUuid: string,
        requestOptions?: Environments.RequestOptions,
    ): core.HttpResponsePromise<Lilypad.FunctionPublic> {
        return core.HttpResponsePromise.fromPromise(this.__getFunction(projectUuid, environmentUuid, requestOptions));
    }

    private async __getFunction(
        projectUuid: string,
        environmentUuid: string,
        requestOptions?: Environments.RequestOptions,
    ): Promise<core.WithRawResponse<Lilypad.FunctionPublic>> {
        const _response = await core.fetcher({
            url: core.joinUrl(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)),
                `projects/${encodeURIComponent(projectUuid)}/environments/${encodeURIComponent(environmentUuid)}/function`,
            ),
            method: "GET",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({
                    Authorization: await this._getAuthorizationHeader(),
                    "X-API-Key": requestOptions?.apiKey,
                }),
                requestOptions?.headers,
            ),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Lilypad.FunctionPublic, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 422:
                    throw new Lilypad.UnprocessableEntityError(
                        _response.error.body as Lilypad.HttpValidationError,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.LilypadError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.LilypadError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.LilypadTimeoutError(
                    "Timeout exceeded when calling GET /projects/{project_uuid}/environments/{environment_uuid}/function.",
                );
            case "unknown":
                throw new errors.LilypadError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Get deployment history for an environment.
     *
     * @param {string} projectUuid
     * @param {string} environmentUuid
     * @param {Environments.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Lilypad.UnprocessableEntityError}
     *
     * @example
     *     await client.projects.environments.getDeploymentHistory("project_uuid", "environment_uuid")
     */
    public getDeploymentHistory(
        projectUuid: string,
        environmentUuid: string,
        requestOptions?: Environments.RequestOptions,
    ): core.HttpResponsePromise<Lilypad.DeploymentPublic[]> {
        return core.HttpResponsePromise.fromPromise(
            this.__getDeploymentHistory(projectUuid, environmentUuid, requestOptions),
        );
    }

    private async __getDeploymentHistory(
        projectUuid: string,
        environmentUuid: string,
        requestOptions?: Environments.RequestOptions,
    ): Promise<core.WithRawResponse<Lilypad.DeploymentPublic[]>> {
        const _response = await core.fetcher({
            url: core.joinUrl(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)),
                `projects/${encodeURIComponent(projectUuid)}/environments/${encodeURIComponent(environmentUuid)}/history`,
            ),
            method: "GET",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({
                    Authorization: await this._getAuthorizationHeader(),
                    "X-API-Key": requestOptions?.apiKey,
                }),
                requestOptions?.headers,
            ),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Lilypad.DeploymentPublic[], rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 422:
                    throw new Lilypad.UnprocessableEntityError(
                        _response.error.body as Lilypad.HttpValidationError,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.LilypadError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.LilypadError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.LilypadTimeoutError(
                    "Timeout exceeded when calling GET /projects/{project_uuid}/environments/{environment_uuid}/history.",
                );
            case "unknown":
                throw new errors.LilypadError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    protected async _getAuthorizationHeader(): Promise<string | undefined> {
        const bearer = await core.Supplier.get(this._options.token);
        if (bearer != null) {
            return `Bearer ${bearer}`;
        }

        return undefined;
    }
}
