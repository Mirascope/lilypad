/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as core from "../../../../core/index.js";
import * as Lilypad from "../../../index.js";
import { mergeHeaders, mergeOnlyDefinedHeaders } from "../../../../core/headers.js";
import * as errors from "../../../../errors/index.js";

export declare namespace Tags {
    export interface Options {
        environment: core.Supplier<string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        token?: core.Supplier<core.BearerToken | undefined>;
        /** Override the X-API-Key header */
        apiKey: core.Supplier<string>;
        /** Additional headers to include in requests. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Override the X-API-Key header */
        apiKey?: string;
        /** Additional headers to include in the request. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }
}

export class Tags {
    protected readonly _options: Tags.Options;

    constructor(_options: Tags.Options) {
        this._options = _options;
    }

    /**
     * Get all tags.
     *
     * @param {Tags.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.tags.list()
     */
    public list(requestOptions?: Tags.RequestOptions): core.HttpResponsePromise<Lilypad.TagPublic[]> {
        return core.HttpResponsePromise.fromPromise(this.__list(requestOptions));
    }

    private async __list(requestOptions?: Tags.RequestOptions): Promise<core.WithRawResponse<Lilypad.TagPublic[]>> {
        const _response = await core.fetcher({
            url: core.joinUrl(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)),
                "tags",
            ),
            method: "GET",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({
                    Authorization: await this._getAuthorizationHeader(),
                    "X-API-Key": requestOptions?.apiKey,
                }),
                requestOptions?.headers,
            ),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Lilypad.TagPublic[], rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.LilypadError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.LilypadError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.LilypadTimeoutError("Timeout exceeded when calling GET /tags.");
            case "unknown":
                throw new errors.LilypadError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Create a tag
     *
     * @param {Lilypad.TagCreate} request
     * @param {Tags.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Lilypad.UnprocessableEntityError}
     *
     * @example
     *     await client.tags.create({
     *         name: "name"
     *     })
     */
    public create(
        request: Lilypad.TagCreate,
        requestOptions?: Tags.RequestOptions,
    ): core.HttpResponsePromise<Lilypad.TagPublic> {
        return core.HttpResponsePromise.fromPromise(this.__create(request, requestOptions));
    }

    private async __create(
        request: Lilypad.TagCreate,
        requestOptions?: Tags.RequestOptions,
    ): Promise<core.WithRawResponse<Lilypad.TagPublic>> {
        const _response = await core.fetcher({
            url: core.joinUrl(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)),
                "tags",
            ),
            method: "POST",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({
                    Authorization: await this._getAuthorizationHeader(),
                    "X-API-Key": requestOptions?.apiKey,
                }),
                requestOptions?.headers,
            ),
            contentType: "application/json",
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Lilypad.TagPublic, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 422:
                    throw new Lilypad.UnprocessableEntityError(
                        _response.error.body as Lilypad.HttpValidationError,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.LilypadError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.LilypadError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.LilypadTimeoutError("Timeout exceeded when calling POST /tags.");
            case "unknown":
                throw new errors.LilypadError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Get a tag.
     *
     * @param {string} tagUuid
     * @param {Tags.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Lilypad.UnprocessableEntityError}
     *
     * @example
     *     await client.tags.get("tag_uuid")
     */
    public get(tagUuid: string, requestOptions?: Tags.RequestOptions): core.HttpResponsePromise<Lilypad.TagPublic> {
        return core.HttpResponsePromise.fromPromise(this.__get(tagUuid, requestOptions));
    }

    private async __get(
        tagUuid: string,
        requestOptions?: Tags.RequestOptions,
    ): Promise<core.WithRawResponse<Lilypad.TagPublic>> {
        const _response = await core.fetcher({
            url: core.joinUrl(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)),
                `tags/${encodeURIComponent(tagUuid)}`,
            ),
            method: "GET",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({
                    Authorization: await this._getAuthorizationHeader(),
                    "X-API-Key": requestOptions?.apiKey,
                }),
                requestOptions?.headers,
            ),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Lilypad.TagPublic, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 422:
                    throw new Lilypad.UnprocessableEntityError(
                        _response.error.body as Lilypad.HttpValidationError,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.LilypadError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.LilypadError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.LilypadTimeoutError("Timeout exceeded when calling GET /tags/{tag_uuid}.");
            case "unknown":
                throw new errors.LilypadError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Delete a tag
     *
     * @param {string} tagUuid
     * @param {Tags.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Lilypad.UnprocessableEntityError}
     *
     * @example
     *     await client.tags.delete("tag_uuid")
     */
    public delete(tagUuid: string, requestOptions?: Tags.RequestOptions): core.HttpResponsePromise<boolean> {
        return core.HttpResponsePromise.fromPromise(this.__delete(tagUuid, requestOptions));
    }

    private async __delete(
        tagUuid: string,
        requestOptions?: Tags.RequestOptions,
    ): Promise<core.WithRawResponse<boolean>> {
        const _response = await core.fetcher({
            url: core.joinUrl(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)),
                `tags/${encodeURIComponent(tagUuid)}`,
            ),
            method: "DELETE",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({
                    Authorization: await this._getAuthorizationHeader(),
                    "X-API-Key": requestOptions?.apiKey,
                }),
                requestOptions?.headers,
            ),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as boolean, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 422:
                    throw new Lilypad.UnprocessableEntityError(
                        _response.error.body as Lilypad.HttpValidationError,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.LilypadError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.LilypadError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.LilypadTimeoutError("Timeout exceeded when calling DELETE /tags/{tag_uuid}.");
            case "unknown":
                throw new errors.LilypadError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Update a tag.
     *
     * @param {string} tagUuid
     * @param {Lilypad.TagCreate} request
     * @param {Tags.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Lilypad.UnprocessableEntityError}
     *
     * @example
     *     await client.tags.update("tag_uuid", {
     *         name: "name"
     *     })
     */
    public update(
        tagUuid: string,
        request: Lilypad.TagCreate,
        requestOptions?: Tags.RequestOptions,
    ): core.HttpResponsePromise<Lilypad.TagPublic> {
        return core.HttpResponsePromise.fromPromise(this.__update(tagUuid, request, requestOptions));
    }

    private async __update(
        tagUuid: string,
        request: Lilypad.TagCreate,
        requestOptions?: Tags.RequestOptions,
    ): Promise<core.WithRawResponse<Lilypad.TagPublic>> {
        const _response = await core.fetcher({
            url: core.joinUrl(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)),
                `tags/${encodeURIComponent(tagUuid)}`,
            ),
            method: "PATCH",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({
                    Authorization: await this._getAuthorizationHeader(),
                    "X-API-Key": requestOptions?.apiKey,
                }),
                requestOptions?.headers,
            ),
            contentType: "application/json",
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Lilypad.TagPublic, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 422:
                    throw new Lilypad.UnprocessableEntityError(
                        _response.error.body as Lilypad.HttpValidationError,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.LilypadError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.LilypadError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.LilypadTimeoutError("Timeout exceeded when calling PATCH /tags/{tag_uuid}.");
            case "unknown":
                throw new errors.LilypadError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    protected async _getAuthorizationHeader(): Promise<string | undefined> {
        const bearer = await core.Supplier.get(this._options.token);
        if (bearer != null) {
            return `Bearer ${bearer}`;
        }

        return undefined;
    }
}
