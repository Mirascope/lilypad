/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as core from "../../../../../../../../../../core/index.js";
import * as Lilypad from "../../../../../../../../../index.js";
import { mergeHeaders, mergeOnlyDefinedHeaders } from "../../../../../../../../../../core/headers.js";
import * as errors from "../../../../../../../../../../errors/index.js";

export declare namespace Annotations {
    export interface Options {
        environment: core.Supplier<string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        token?: core.Supplier<core.BearerToken | undefined>;
        /** Override the X-API-Key header */
        apiKey: core.Supplier<string>;
        /** Additional headers to include in requests. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Override the X-API-Key header */
        apiKey?: string;
        /** Additional headers to include in the request. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }
}

export class Annotations {
    protected readonly _options: Annotations.Options;

    constructor(_options: Annotations.Options) {
        this._options = _options;
    }

    /**
     * Get annotations by functions.
     *
     * @param {string} projectUuid
     * @param {string} spanUuid
     * @param {Lilypad.ee.projects.spans.AnnotationsListRequest} request
     * @param {Annotations.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Lilypad.UnprocessableEntityError}
     *
     * @example
     *     await client.ee.projects.spans.annotations.list("project_uuid", "span_uuid", {
     *         environment_uuid: "environment_uuid"
     *     })
     */
    public list(
        projectUuid: string,
        spanUuid: string,
        request: Lilypad.ee.projects.spans.AnnotationsListRequest,
        requestOptions?: Annotations.RequestOptions,
    ): core.HttpResponsePromise<Lilypad.AnnotationPublic[]> {
        return core.HttpResponsePromise.fromPromise(this.__list(projectUuid, spanUuid, request, requestOptions));
    }

    private async __list(
        projectUuid: string,
        spanUuid: string,
        request: Lilypad.ee.projects.spans.AnnotationsListRequest,
        requestOptions?: Annotations.RequestOptions,
    ): Promise<core.WithRawResponse<Lilypad.AnnotationPublic[]>> {
        const { environment_uuid: environmentUuid } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        _queryParams["environment_uuid"] = environmentUuid;
        const _response = await core.fetcher({
            url: core.joinUrl(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)),
                `ee/projects/${encodeURIComponent(projectUuid)}/spans/${encodeURIComponent(spanUuid)}/annotations`,
            ),
            method: "GET",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({
                    Authorization: await this._getAuthorizationHeader(),
                    "X-API-Key": requestOptions?.apiKey,
                }),
                requestOptions?.headers,
            ),
            queryParameters: _queryParams,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Lilypad.AnnotationPublic[], rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 422:
                    throw new Lilypad.UnprocessableEntityError(
                        _response.error.body as Lilypad.HttpValidationError,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.LilypadError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.LilypadError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.LilypadTimeoutError(
                    "Timeout exceeded when calling GET /ee/projects/{project_uuid}/spans/{span_uuid}/annotations.",
                );
            case "unknown":
                throw new errors.LilypadError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    protected async _getAuthorizationHeader(): Promise<string | undefined> {
        const bearer = await core.Supplier.get(this._options.token);
        if (bearer != null) {
            return `Bearer ${bearer}`;
        }

        return undefined;
    }
}
