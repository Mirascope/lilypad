"use strict";
/**
 * This file was auto-generated by Fern from our API Definition.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.LilypadClient = void 0;
const core = __importStar(require("./core/index.js"));
const headers_js_1 = require("./core/headers.js");
const errors = __importStar(require("./errors/index.js"));
const Lilypad = __importStar(require("./api/index.js"));
const Client_js_1 = require("./api/resources/organizations/client/Client.js");
const Client_js_2 = require("./api/resources/apiKeys/client/Client.js");
const Client_js_3 = require("./api/resources/webhooks/client/Client.js");
const Client_js_4 = require("./api/resources/projects/client/Client.js");
const Client_js_5 = require("./api/resources/spans/client/Client.js");
const Client_js_6 = require("./api/resources/auth/client/Client.js");
const Client_js_7 = require("./api/resources/users/client/Client.js");
const Client_js_8 = require("./api/resources/externalApiKeys/client/Client.js");
const Client_js_9 = require("./api/resources/environments/client/Client.js");
const Client_js_10 = require("./api/resources/userConsents/client/Client.js");
const Client_js_11 = require("./api/resources/tags/client/Client.js");
const Client_js_12 = require("./api/resources/comments/client/Client.js");
const Client_js_13 = require("./api/resources/settings/client/Client.js");
const Client_js_14 = require("./api/resources/ee/client/Client.js");
class LilypadClient {
    constructor(_options) {
        this._options = Object.assign(Object.assign({}, _options), { headers: (0, headers_js_1.mergeHeaders)({
                "X-API-Key": _options === null || _options === void 0 ? void 0 : _options.apiKey,
                "X-Fern-Language": "JavaScript",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
            }, _options === null || _options === void 0 ? void 0 : _options.headers) });
    }
    get organizations() {
        var _a;
        return ((_a = this._organizations) !== null && _a !== void 0 ? _a : (this._organizations = new Client_js_1.Organizations(this._options)));
    }
    get apiKeys() {
        var _a;
        return ((_a = this._apiKeys) !== null && _a !== void 0 ? _a : (this._apiKeys = new Client_js_2.ApiKeys(this._options)));
    }
    get webhooks() {
        var _a;
        return ((_a = this._webhooks) !== null && _a !== void 0 ? _a : (this._webhooks = new Client_js_3.Webhooks(this._options)));
    }
    get projects() {
        var _a;
        return ((_a = this._projects) !== null && _a !== void 0 ? _a : (this._projects = new Client_js_4.Projects(this._options)));
    }
    get spans() {
        var _a;
        return ((_a = this._spans) !== null && _a !== void 0 ? _a : (this._spans = new Client_js_5.Spans(this._options)));
    }
    get auth() {
        var _a;
        return ((_a = this._auth) !== null && _a !== void 0 ? _a : (this._auth = new Client_js_6.Auth(this._options)));
    }
    get users() {
        var _a;
        return ((_a = this._users) !== null && _a !== void 0 ? _a : (this._users = new Client_js_7.Users(this._options)));
    }
    get externalApiKeys() {
        var _a;
        return ((_a = this._externalApiKeys) !== null && _a !== void 0 ? _a : (this._externalApiKeys = new Client_js_8.ExternalApiKeys(this._options)));
    }
    get environments() {
        var _a;
        return ((_a = this._environments) !== null && _a !== void 0 ? _a : (this._environments = new Client_js_9.Environments(this._options)));
    }
    get userConsents() {
        var _a;
        return ((_a = this._userConsents) !== null && _a !== void 0 ? _a : (this._userConsents = new Client_js_10.UserConsents(this._options)));
    }
    get tags() {
        var _a;
        return ((_a = this._tags) !== null && _a !== void 0 ? _a : (this._tags = new Client_js_11.Tags(this._options)));
    }
    get comments() {
        var _a;
        return ((_a = this._comments) !== null && _a !== void 0 ? _a : (this._comments = new Client_js_12.Comments(this._options)));
    }
    get settings() {
        var _a;
        return ((_a = this._settings) !== null && _a !== void 0 ? _a : (this._settings = new Client_js_13.Settings(this._options)));
    }
    get ee() {
        var _a;
        return ((_a = this._ee) !== null && _a !== void 0 ? _a : (this._ee = new Client_js_14.Ee(this._options)));
    }
    /**
     * @param {LilypadClient.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.createCustomerPortalStripeCustomerPortalPost()
     */
    createCustomerPortalStripeCustomerPortalPost(requestOptions) {
        return core.HttpResponsePromise.fromPromise(this.__createCustomerPortalStripeCustomerPortalPost(requestOptions));
    }
    __createCustomerPortalStripeCustomerPortalPost(requestOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            var _a, _b;
            const _response = yield core.fetcher({
                url: core.joinUrl((_a = (yield core.Supplier.get(this._options.baseUrl))) !== null && _a !== void 0 ? _a : (yield core.Supplier.get(this._options.environment)), "stripe/customer-portal"),
                method: "POST",
                headers: (0, headers_js_1.mergeHeaders)((_b = this._options) === null || _b === void 0 ? void 0 : _b.headers, (0, headers_js_1.mergeOnlyDefinedHeaders)({
                    Authorization: yield this._getAuthorizationHeader(),
                    "X-API-Key": requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.apiKey,
                }), requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.headers),
                timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
                maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries,
                abortSignal: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.abortSignal,
            });
            if (_response.ok) {
                return { data: _response.body, rawResponse: _response.rawResponse };
            }
            if (_response.error.reason === "status-code") {
                throw new errors.LilypadError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.body,
                    rawResponse: _response.rawResponse,
                });
            }
            switch (_response.error.reason) {
                case "non-json":
                    throw new errors.LilypadError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.rawBody,
                        rawResponse: _response.rawResponse,
                    });
                case "timeout":
                    throw new errors.LilypadTimeoutError("Timeout exceeded when calling POST /stripe/customer-portal.");
                case "unknown":
                    throw new errors.LilypadError({
                        message: _response.error.errorMessage,
                        rawResponse: _response.rawResponse,
                    });
            }
        });
    }
    /**
     * @param {Lilypad.StripeCheckoutSession} request
     * @param {LilypadClient.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Lilypad.UnprocessableEntityError}
     *
     * @example
     *     await client.createCheckoutSessionStripeCreateCheckoutSessionPost({
     *         tier: 1
     *     })
     */
    createCheckoutSessionStripeCreateCheckoutSessionPost(request, requestOptions) {
        return core.HttpResponsePromise.fromPromise(this.__createCheckoutSessionStripeCreateCheckoutSessionPost(request, requestOptions));
    }
    __createCheckoutSessionStripeCreateCheckoutSessionPost(request, requestOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            var _a, _b;
            const _response = yield core.fetcher({
                url: core.joinUrl((_a = (yield core.Supplier.get(this._options.baseUrl))) !== null && _a !== void 0 ? _a : (yield core.Supplier.get(this._options.environment)), "stripe/create-checkout-session"),
                method: "POST",
                headers: (0, headers_js_1.mergeHeaders)((_b = this._options) === null || _b === void 0 ? void 0 : _b.headers, (0, headers_js_1.mergeOnlyDefinedHeaders)({
                    Authorization: yield this._getAuthorizationHeader(),
                    "X-API-Key": requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.apiKey,
                }), requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.headers),
                contentType: "application/json",
                requestType: "json",
                body: request,
                timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
                maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries,
                abortSignal: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.abortSignal,
            });
            if (_response.ok) {
                return { data: _response.body, rawResponse: _response.rawResponse };
            }
            if (_response.error.reason === "status-code") {
                switch (_response.error.statusCode) {
                    case 422:
                        throw new Lilypad.UnprocessableEntityError(_response.error.body, _response.rawResponse);
                    default:
                        throw new errors.LilypadError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.body,
                            rawResponse: _response.rawResponse,
                        });
                }
            }
            switch (_response.error.reason) {
                case "non-json":
                    throw new errors.LilypadError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.rawBody,
                        rawResponse: _response.rawResponse,
                    });
                case "timeout":
                    throw new errors.LilypadTimeoutError("Timeout exceeded when calling POST /stripe/create-checkout-session.");
                case "unknown":
                    throw new errors.LilypadError({
                        message: _response.error.errorMessage,
                        rawResponse: _response.rawResponse,
                    });
            }
        });
    }
    /**
     * @param {LilypadClient.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.getEventSummariesStripeEventSummariesGet()
     */
    getEventSummariesStripeEventSummariesGet(requestOptions) {
        return core.HttpResponsePromise.fromPromise(this.__getEventSummariesStripeEventSummariesGet(requestOptions));
    }
    __getEventSummariesStripeEventSummariesGet(requestOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            var _a, _b;
            const _response = yield core.fetcher({
                url: core.joinUrl((_a = (yield core.Supplier.get(this._options.baseUrl))) !== null && _a !== void 0 ? _a : (yield core.Supplier.get(this._options.environment)), "stripe/event-summaries"),
                method: "GET",
                headers: (0, headers_js_1.mergeHeaders)((_b = this._options) === null || _b === void 0 ? void 0 : _b.headers, (0, headers_js_1.mergeOnlyDefinedHeaders)({
                    Authorization: yield this._getAuthorizationHeader(),
                    "X-API-Key": requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.apiKey,
                }), requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.headers),
                timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
                maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries,
                abortSignal: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.abortSignal,
            });
            if (_response.ok) {
                return { data: _response.body, rawResponse: _response.rawResponse };
            }
            if (_response.error.reason === "status-code") {
                throw new errors.LilypadError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.body,
                    rawResponse: _response.rawResponse,
                });
            }
            switch (_response.error.reason) {
                case "non-json":
                    throw new errors.LilypadError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.rawBody,
                        rawResponse: _response.rawResponse,
                    });
                case "timeout":
                    throw new errors.LilypadTimeoutError("Timeout exceeded when calling GET /stripe/event-summaries.");
                case "unknown":
                    throw new errors.LilypadError({
                        message: _response.error.errorMessage,
                        rawResponse: _response.rawResponse,
                    });
            }
        });
    }
    /**
     * Get all spans for a given trace ID.
     *
     * @param {string} projectUuid
     * @param {string} traceId
     * @param {LilypadClient.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Lilypad.UnprocessableEntityError}
     *
     * @example
     *     await client.getSpansByTraceIdProjectsProjectUuidTracesByTraceIdTraceIdGet("project_uuid", "trace_id")
     */
    getSpansByTraceIdProjectsProjectUuidTracesByTraceIdTraceIdGet(projectUuid, traceId, requestOptions) {
        return core.HttpResponsePromise.fromPromise(this.__getSpansByTraceIdProjectsProjectUuidTracesByTraceIdTraceIdGet(projectUuid, traceId, requestOptions));
    }
    __getSpansByTraceIdProjectsProjectUuidTracesByTraceIdTraceIdGet(projectUuid, traceId, requestOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            var _a, _b;
            const _response = yield core.fetcher({
                url: core.joinUrl((_a = (yield core.Supplier.get(this._options.baseUrl))) !== null && _a !== void 0 ? _a : (yield core.Supplier.get(this._options.environment)), `projects/${encodeURIComponent(projectUuid)}/traces/by-trace-id/${encodeURIComponent(traceId)}`),
                method: "GET",
                headers: (0, headers_js_1.mergeHeaders)((_b = this._options) === null || _b === void 0 ? void 0 : _b.headers, (0, headers_js_1.mergeOnlyDefinedHeaders)({
                    Authorization: yield this._getAuthorizationHeader(),
                    "X-API-Key": requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.apiKey,
                }), requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.headers),
                timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
                maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries,
                abortSignal: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.abortSignal,
            });
            if (_response.ok) {
                return { data: _response.body, rawResponse: _response.rawResponse };
            }
            if (_response.error.reason === "status-code") {
                switch (_response.error.statusCode) {
                    case 422:
                        throw new Lilypad.UnprocessableEntityError(_response.error.body, _response.rawResponse);
                    default:
                        throw new errors.LilypadError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.body,
                            rawResponse: _response.rawResponse,
                        });
                }
            }
            switch (_response.error.reason) {
                case "non-json":
                    throw new errors.LilypadError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.rawBody,
                        rawResponse: _response.rawResponse,
                    });
                case "timeout":
                    throw new errors.LilypadTimeoutError("Timeout exceeded when calling GET /projects/{project_uuid}/traces/by-trace-id/{trace_id}.");
                case "unknown":
                    throw new errors.LilypadError({
                        message: _response.error.errorMessage,
                        rawResponse: _response.rawResponse,
                    });
            }
        });
    }
    _getAuthorizationHeader() {
        return __awaiter(this, void 0, void 0, function* () {
            const bearer = yield core.Supplier.get(this._options.token);
            if (bearer != null) {
                return `Bearer ${bearer}`;
            }
            return undefined;
        });
    }
}
exports.LilypadClient = LilypadClient;
