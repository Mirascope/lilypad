/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as core from "../../../../core/index.js";
import * as Lilypad from "../../../index.js";
export declare namespace UserConsents {
    interface Options {
        environment: core.Supplier<string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        token?: core.Supplier<core.BearerToken | undefined>;
        /** Override the X-API-Key header */
        apiKey: core.Supplier<string>;
        /** Additional headers to include in requests. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }
    interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Override the X-API-Key header */
        apiKey?: string;
        /** Additional headers to include in the request. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }
}
export declare class UserConsents {
    protected readonly _options: UserConsents.Options;
    constructor(_options: UserConsents.Options);
    /**
     * Store user consent.
     *
     * @param {Lilypad.UserConsentCreate} request
     * @param {UserConsents.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Lilypad.UnprocessableEntityError}
     *
     * @example
     *     await client.userConsents.create({
     *         privacy_policy_version: "privacy_policy_version",
     *         tos_version: "tos_version"
     *     })
     */
    create(request: Lilypad.UserConsentCreate, requestOptions?: UserConsents.RequestOptions): core.HttpResponsePromise<Lilypad.UserConsentPublic>;
    private __create;
    /**
     * Update user consent.
     *
     * @param {string} userConsentUuid
     * @param {Lilypad.UserConsentUpdate} request
     * @param {UserConsents.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Lilypad.UnprocessableEntityError}
     *
     * @example
     *     await client.userConsents.update("user_consent_uuid")
     */
    update(userConsentUuid: string, request?: Lilypad.UserConsentUpdate, requestOptions?: UserConsents.RequestOptions): core.HttpResponsePromise<Lilypad.UserConsentPublic>;
    private __update;
    protected _getAuthorizationHeader(): Promise<string | undefined>;
}
