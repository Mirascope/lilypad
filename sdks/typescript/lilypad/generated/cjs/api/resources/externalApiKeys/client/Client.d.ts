/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as core from "../../../../core/index.js";
import * as Lilypad from "../../../index.js";
export declare namespace ExternalApiKeys {
    interface Options {
        environment: core.Supplier<string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        token?: core.Supplier<core.BearerToken | undefined>;
        /** Override the X-API-Key header */
        apiKey: core.Supplier<string>;
        /** Additional headers to include in requests. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }
    interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Override the X-API-Key header */
        apiKey?: string;
        /** Additional headers to include in the request. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }
}
export declare class ExternalApiKeys {
    protected readonly _options: ExternalApiKeys.Options;
    constructor(_options: ExternalApiKeys.Options);
    /**
     * List all external API keys for the user with masked values.
     *
     * @param {ExternalApiKeys.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.externalApiKeys.list()
     */
    list(requestOptions?: ExternalApiKeys.RequestOptions): core.HttpResponsePromise<Lilypad.ExternalApiKeyPublic[]>;
    private __list;
    /**
     * Store an external API key for a given service.
     *
     * @param {Lilypad.ExternalApiKeyCreate} request
     * @param {ExternalApiKeys.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Lilypad.UnprocessableEntityError}
     *
     * @example
     *     await client.externalApiKeys.create({
     *         service_name: "service_name",
     *         api_key: "api_key"
     *     })
     */
    create(request: Lilypad.ExternalApiKeyCreate, requestOptions?: ExternalApiKeys.RequestOptions): core.HttpResponsePromise<Lilypad.ExternalApiKeyPublic>;
    private __create;
    /**
     * Retrieve an external API key for a given service.
     *
     * @param {string} serviceName
     * @param {ExternalApiKeys.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Lilypad.UnprocessableEntityError}
     *
     * @example
     *     await client.externalApiKeys.get("service_name")
     */
    get(serviceName: string, requestOptions?: ExternalApiKeys.RequestOptions): core.HttpResponsePromise<Lilypad.ExternalApiKeyPublic>;
    private __get;
    /**
     * Delete an external API key for a given service.
     *
     * @param {string} serviceName
     * @param {ExternalApiKeys.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Lilypad.UnprocessableEntityError}
     *
     * @example
     *     await client.externalApiKeys.delete("service_name")
     */
    delete(serviceName: string, requestOptions?: ExternalApiKeys.RequestOptions): core.HttpResponsePromise<boolean>;
    private __delete;
    /**
     * Update users keys.
     *
     * @param {string} serviceName
     * @param {Lilypad.ExternalApiKeyUpdate} request
     * @param {ExternalApiKeys.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Lilypad.UnprocessableEntityError}
     *
     * @example
     *     await client.externalApiKeys.update("service_name", {
     *         api_key: "api_key"
     *     })
     */
    update(serviceName: string, request: Lilypad.ExternalApiKeyUpdate, requestOptions?: ExternalApiKeys.RequestOptions): core.HttpResponsePromise<Lilypad.ExternalApiKeyPublic>;
    private __update;
    protected _getAuthorizationHeader(): Promise<string | undefined>;
}
