"use strict";
/**
 * This file was auto-generated by Fern from our API Definition.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Functions = void 0;
const core = __importStar(require("../../../../../../core/index.js"));
const Lilypad = __importStar(require("../../../../../index.js"));
const headers_js_1 = require("../../../../../../core/headers.js");
const errors = __importStar(require("../../../../../../errors/index.js"));
const Client_js_1 = require("../resources/spans/client/Client.js");
class Functions {
    constructor(_options) {
        this._options = _options;
    }
    get spans() {
        var _a;
        return ((_a = this._spans) !== null && _a !== void 0 ? _a : (this._spans = new Client_js_1.Spans(this._options)));
    }
    /**
     * Get function by name.
     *
     * @param {string} projectUuid
     * @param {string} functionName
     * @param {number} versionNum
     * @param {Functions.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Lilypad.UnprocessableEntityError}
     *
     * @example
     *     await client.projects.functions.getByVersion("project_uuid", "function_name", 1)
     */
    getByVersion(projectUuid, functionName, versionNum, requestOptions) {
        return core.HttpResponsePromise.fromPromise(this.__getByVersion(projectUuid, functionName, versionNum, requestOptions));
    }
    __getByVersion(projectUuid, functionName, versionNum, requestOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            var _a, _b;
            const _response = yield core.fetcher({
                url: core.joinUrl((_a = (yield core.Supplier.get(this._options.baseUrl))) !== null && _a !== void 0 ? _a : (yield core.Supplier.get(this._options.environment)), `projects/${encodeURIComponent(projectUuid)}/functions/name/${encodeURIComponent(functionName)}/version/${encodeURIComponent(versionNum)}`),
                method: "GET",
                headers: (0, headers_js_1.mergeHeaders)((_b = this._options) === null || _b === void 0 ? void 0 : _b.headers, (0, headers_js_1.mergeOnlyDefinedHeaders)({
                    Authorization: yield this._getAuthorizationHeader(),
                    "X-API-Key": requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.apiKey,
                }), requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.headers),
                timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
                maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries,
                abortSignal: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.abortSignal,
            });
            if (_response.ok) {
                return { data: _response.body, rawResponse: _response.rawResponse };
            }
            if (_response.error.reason === "status-code") {
                switch (_response.error.statusCode) {
                    case 422:
                        throw new Lilypad.UnprocessableEntityError(_response.error.body, _response.rawResponse);
                    default:
                        throw new errors.LilypadError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.body,
                            rawResponse: _response.rawResponse,
                        });
                }
            }
            switch (_response.error.reason) {
                case "non-json":
                    throw new errors.LilypadError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.rawBody,
                        rawResponse: _response.rawResponse,
                    });
                case "timeout":
                    throw new errors.LilypadTimeoutError("Timeout exceeded when calling GET /projects/{project_uuid}/functions/name/{function_name}/version/{version_num}.");
                case "unknown":
                    throw new errors.LilypadError({
                        message: _response.error.errorMessage,
                        rawResponse: _response.rawResponse,
                    });
            }
        });
    }
    /**
     * Get function by name.
     *
     * @param {string} projectUuid
     * @param {string} functionName
     * @param {Functions.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Lilypad.UnprocessableEntityError}
     *
     * @example
     *     await client.projects.functions.getByName("project_uuid", "function_name")
     */
    getByName(projectUuid, functionName, requestOptions) {
        return core.HttpResponsePromise.fromPromise(this.__getByName(projectUuid, functionName, requestOptions));
    }
    __getByName(projectUuid, functionName, requestOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            var _a, _b;
            const _response = yield core.fetcher({
                url: core.joinUrl((_a = (yield core.Supplier.get(this._options.baseUrl))) !== null && _a !== void 0 ? _a : (yield core.Supplier.get(this._options.environment)), `projects/${encodeURIComponent(projectUuid)}/functions/name/${encodeURIComponent(functionName)}`),
                method: "GET",
                headers: (0, headers_js_1.mergeHeaders)((_b = this._options) === null || _b === void 0 ? void 0 : _b.headers, (0, headers_js_1.mergeOnlyDefinedHeaders)({
                    Authorization: yield this._getAuthorizationHeader(),
                    "X-API-Key": requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.apiKey,
                }), requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.headers),
                timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
                maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries,
                abortSignal: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.abortSignal,
            });
            if (_response.ok) {
                return { data: _response.body, rawResponse: _response.rawResponse };
            }
            if (_response.error.reason === "status-code") {
                switch (_response.error.statusCode) {
                    case 422:
                        throw new Lilypad.UnprocessableEntityError(_response.error.body, _response.rawResponse);
                    default:
                        throw new errors.LilypadError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.body,
                            rawResponse: _response.rawResponse,
                        });
                }
            }
            switch (_response.error.reason) {
                case "non-json":
                    throw new errors.LilypadError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.rawBody,
                        rawResponse: _response.rawResponse,
                    });
                case "timeout":
                    throw new errors.LilypadTimeoutError("Timeout exceeded when calling GET /projects/{project_uuid}/functions/name/{function_name}.");
                case "unknown":
                    throw new errors.LilypadError({
                        message: _response.error.errorMessage,
                        rawResponse: _response.rawResponse,
                    });
            }
        });
    }
    /**
     * Get the deployed function by function name and environment name.
     *
     * @param {string} projectUuid
     * @param {string} functionName
     * @param {Functions.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Lilypad.UnprocessableEntityError}
     *
     * @example
     *     await client.projects.functions.getDeployedEnvironments("project_uuid", "function_name")
     */
    getDeployedEnvironments(projectUuid, functionName, requestOptions) {
        return core.HttpResponsePromise.fromPromise(this.__getDeployedEnvironments(projectUuid, functionName, requestOptions));
    }
    __getDeployedEnvironments(projectUuid, functionName, requestOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            var _a, _b;
            const _response = yield core.fetcher({
                url: core.joinUrl((_a = (yield core.Supplier.get(this._options.baseUrl))) !== null && _a !== void 0 ? _a : (yield core.Supplier.get(this._options.environment)), `projects/${encodeURIComponent(projectUuid)}/functions/name/${encodeURIComponent(functionName)}/environments`),
                method: "GET",
                headers: (0, headers_js_1.mergeHeaders)((_b = this._options) === null || _b === void 0 ? void 0 : _b.headers, (0, headers_js_1.mergeOnlyDefinedHeaders)({
                    Authorization: yield this._getAuthorizationHeader(),
                    "X-API-Key": requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.apiKey,
                }), requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.headers),
                timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
                maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries,
                abortSignal: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.abortSignal,
            });
            if (_response.ok) {
                return { data: _response.body, rawResponse: _response.rawResponse };
            }
            if (_response.error.reason === "status-code") {
                switch (_response.error.statusCode) {
                    case 422:
                        throw new Lilypad.UnprocessableEntityError(_response.error.body, _response.rawResponse);
                    default:
                        throw new errors.LilypadError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.body,
                            rawResponse: _response.rawResponse,
                        });
                }
            }
            switch (_response.error.reason) {
                case "non-json":
                    throw new errors.LilypadError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.rawBody,
                        rawResponse: _response.rawResponse,
                    });
                case "timeout":
                    throw new errors.LilypadTimeoutError("Timeout exceeded when calling GET /projects/{project_uuid}/functions/name/{function_name}/environments.");
                case "unknown":
                    throw new errors.LilypadError({
                        message: _response.error.errorMessage,
                        rawResponse: _response.rawResponse,
                    });
            }
        });
    }
    /**
     * Create a managed function.
     *
     * @param {string} projectUuid
     * @param {Lilypad.FunctionCreate} request
     * @param {Functions.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Lilypad.UnprocessableEntityError}
     *
     * @example
     *     await client.projects.functions.createVersioned("project_uuid", {
     *         name: "name",
     *         signature: "signature",
     *         code: "code",
     *         hash: "hash"
     *     })
     */
    createVersioned(projectUuid, request, requestOptions) {
        return core.HttpResponsePromise.fromPromise(this.__createVersioned(projectUuid, request, requestOptions));
    }
    __createVersioned(projectUuid, request, requestOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            var _a, _b;
            const _response = yield core.fetcher({
                url: core.joinUrl((_a = (yield core.Supplier.get(this._options.baseUrl))) !== null && _a !== void 0 ? _a : (yield core.Supplier.get(this._options.environment)), `projects/${encodeURIComponent(projectUuid)}/versioned-functions`),
                method: "POST",
                headers: (0, headers_js_1.mergeHeaders)((_b = this._options) === null || _b === void 0 ? void 0 : _b.headers, (0, headers_js_1.mergeOnlyDefinedHeaders)({
                    Authorization: yield this._getAuthorizationHeader(),
                    "X-API-Key": requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.apiKey,
                }), requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.headers),
                contentType: "application/json",
                requestType: "json",
                body: request,
                timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
                maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries,
                abortSignal: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.abortSignal,
            });
            if (_response.ok) {
                return { data: _response.body, rawResponse: _response.rawResponse };
            }
            if (_response.error.reason === "status-code") {
                switch (_response.error.statusCode) {
                    case 422:
                        throw new Lilypad.UnprocessableEntityError(_response.error.body, _response.rawResponse);
                    default:
                        throw new errors.LilypadError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.body,
                            rawResponse: _response.rawResponse,
                        });
                }
            }
            switch (_response.error.reason) {
                case "non-json":
                    throw new errors.LilypadError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.rawBody,
                        rawResponse: _response.rawResponse,
                    });
                case "timeout":
                    throw new errors.LilypadTimeoutError("Timeout exceeded when calling POST /projects/{project_uuid}/versioned-functions.");
                case "unknown":
                    throw new errors.LilypadError({
                        message: _response.error.errorMessage,
                        rawResponse: _response.rawResponse,
                    });
            }
        });
    }
    /**
     * Get all unique function names.
     *
     * @param {string} projectUuid
     * @param {Functions.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Lilypad.UnprocessableEntityError}
     *
     * @example
     *     await client.projects.functions.getUniqueNames("project_uuid")
     */
    getUniqueNames(projectUuid, requestOptions) {
        return core.HttpResponsePromise.fromPromise(this.__getUniqueNames(projectUuid, requestOptions));
    }
    __getUniqueNames(projectUuid, requestOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            var _a, _b;
            const _response = yield core.fetcher({
                url: core.joinUrl((_a = (yield core.Supplier.get(this._options.baseUrl))) !== null && _a !== void 0 ? _a : (yield core.Supplier.get(this._options.environment)), `projects/${encodeURIComponent(projectUuid)}/functions/metadata/names`),
                method: "GET",
                headers: (0, headers_js_1.mergeHeaders)((_b = this._options) === null || _b === void 0 ? void 0 : _b.headers, (0, headers_js_1.mergeOnlyDefinedHeaders)({
                    Authorization: yield this._getAuthorizationHeader(),
                    "X-API-Key": requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.apiKey,
                }), requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.headers),
                timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
                maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries,
                abortSignal: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.abortSignal,
            });
            if (_response.ok) {
                return { data: _response.body, rawResponse: _response.rawResponse };
            }
            if (_response.error.reason === "status-code") {
                switch (_response.error.statusCode) {
                    case 422:
                        throw new Lilypad.UnprocessableEntityError(_response.error.body, _response.rawResponse);
                    default:
                        throw new errors.LilypadError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.body,
                            rawResponse: _response.rawResponse,
                        });
                }
            }
            switch (_response.error.reason) {
                case "non-json":
                    throw new errors.LilypadError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.rawBody,
                        rawResponse: _response.rawResponse,
                    });
                case "timeout":
                    throw new errors.LilypadTimeoutError("Timeout exceeded when calling GET /projects/{project_uuid}/functions/metadata/names.");
                case "unknown":
                    throw new errors.LilypadError({
                        message: _response.error.errorMessage,
                        rawResponse: _response.rawResponse,
                    });
            }
        });
    }
    /**
     * Get all unique function names.
     *
     * @param {string} projectUuid
     * @param {Functions.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Lilypad.UnprocessableEntityError}
     *
     * @example
     *     await client.projects.functions.getLatestVersions("project_uuid")
     */
    getLatestVersions(projectUuid, requestOptions) {
        return core.HttpResponsePromise.fromPromise(this.__getLatestVersions(projectUuid, requestOptions));
    }
    __getLatestVersions(projectUuid, requestOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            var _a, _b;
            const _response = yield core.fetcher({
                url: core.joinUrl((_a = (yield core.Supplier.get(this._options.baseUrl))) !== null && _a !== void 0 ? _a : (yield core.Supplier.get(this._options.environment)), `projects/${encodeURIComponent(projectUuid)}/functions/metadata/names/versions`),
                method: "GET",
                headers: (0, headers_js_1.mergeHeaders)((_b = this._options) === null || _b === void 0 ? void 0 : _b.headers, (0, headers_js_1.mergeOnlyDefinedHeaders)({
                    Authorization: yield this._getAuthorizationHeader(),
                    "X-API-Key": requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.apiKey,
                }), requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.headers),
                timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
                maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries,
                abortSignal: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.abortSignal,
            });
            if (_response.ok) {
                return { data: _response.body, rawResponse: _response.rawResponse };
            }
            if (_response.error.reason === "status-code") {
                switch (_response.error.statusCode) {
                    case 422:
                        throw new Lilypad.UnprocessableEntityError(_response.error.body, _response.rawResponse);
                    default:
                        throw new errors.LilypadError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.body,
                            rawResponse: _response.rawResponse,
                        });
                }
            }
            switch (_response.error.reason) {
                case "non-json":
                    throw new errors.LilypadError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.rawBody,
                        rawResponse: _response.rawResponse,
                    });
                case "timeout":
                    throw new errors.LilypadTimeoutError("Timeout exceeded when calling GET /projects/{project_uuid}/functions/metadata/names/versions.");
                case "unknown":
                    throw new errors.LilypadError({
                        message: _response.error.errorMessage,
                        rawResponse: _response.rawResponse,
                    });
            }
        });
    }
    /**
     * Get function by hash.
     *
     * @param {string} projectUuid
     * @param {string} functionHash
     * @param {Functions.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Lilypad.UnprocessableEntityError}
     *
     * @example
     *     await client.projects.functions.getByHash("project_uuid", "function_hash")
     */
    getByHash(projectUuid, functionHash, requestOptions) {
        return core.HttpResponsePromise.fromPromise(this.__getByHash(projectUuid, functionHash, requestOptions));
    }
    __getByHash(projectUuid, functionHash, requestOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            var _a, _b;
            const _response = yield core.fetcher({
                url: core.joinUrl((_a = (yield core.Supplier.get(this._options.baseUrl))) !== null && _a !== void 0 ? _a : (yield core.Supplier.get(this._options.environment)), `projects/${encodeURIComponent(projectUuid)}/functions/hash/${encodeURIComponent(functionHash)}`),
                method: "GET",
                headers: (0, headers_js_1.mergeHeaders)((_b = this._options) === null || _b === void 0 ? void 0 : _b.headers, (0, headers_js_1.mergeOnlyDefinedHeaders)({
                    Authorization: yield this._getAuthorizationHeader(),
                    "X-API-Key": requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.apiKey,
                }), requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.headers),
                timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
                maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries,
                abortSignal: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.abortSignal,
            });
            if (_response.ok) {
                return { data: _response.body, rawResponse: _response.rawResponse };
            }
            if (_response.error.reason === "status-code") {
                switch (_response.error.statusCode) {
                    case 422:
                        throw new Lilypad.UnprocessableEntityError(_response.error.body, _response.rawResponse);
                    default:
                        throw new errors.LilypadError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.body,
                            rawResponse: _response.rawResponse,
                        });
                }
            }
            switch (_response.error.reason) {
                case "non-json":
                    throw new errors.LilypadError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.rawBody,
                        rawResponse: _response.rawResponse,
                    });
                case "timeout":
                    throw new errors.LilypadTimeoutError("Timeout exceeded when calling GET /projects/{project_uuid}/functions/hash/{function_hash}.");
                case "unknown":
                    throw new errors.LilypadError({
                        message: _response.error.errorMessage,
                        rawResponse: _response.rawResponse,
                    });
            }
        });
    }
    /**
     * Grab all functions.
     *
     * @param {string} projectUuid
     * @param {Functions.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Lilypad.UnprocessableEntityError}
     *
     * @example
     *     await client.projects.functions.list("project_uuid")
     */
    list(projectUuid, requestOptions) {
        return core.HttpResponsePromise.fromPromise(this.__list(projectUuid, requestOptions));
    }
    __list(projectUuid, requestOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            var _a, _b;
            const _response = yield core.fetcher({
                url: core.joinUrl((_a = (yield core.Supplier.get(this._options.baseUrl))) !== null && _a !== void 0 ? _a : (yield core.Supplier.get(this._options.environment)), `projects/${encodeURIComponent(projectUuid)}/functions`),
                method: "GET",
                headers: (0, headers_js_1.mergeHeaders)((_b = this._options) === null || _b === void 0 ? void 0 : _b.headers, (0, headers_js_1.mergeOnlyDefinedHeaders)({
                    Authorization: yield this._getAuthorizationHeader(),
                    "X-API-Key": requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.apiKey,
                }), requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.headers),
                timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
                maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries,
                abortSignal: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.abortSignal,
            });
            if (_response.ok) {
                return { data: _response.body, rawResponse: _response.rawResponse };
            }
            if (_response.error.reason === "status-code") {
                switch (_response.error.statusCode) {
                    case 422:
                        throw new Lilypad.UnprocessableEntityError(_response.error.body, _response.rawResponse);
                    default:
                        throw new errors.LilypadError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.body,
                            rawResponse: _response.rawResponse,
                        });
                }
            }
            switch (_response.error.reason) {
                case "non-json":
                    throw new errors.LilypadError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.rawBody,
                        rawResponse: _response.rawResponse,
                    });
                case "timeout":
                    throw new errors.LilypadTimeoutError("Timeout exceeded when calling GET /projects/{project_uuid}/functions.");
                case "unknown":
                    throw new errors.LilypadError({
                        message: _response.error.errorMessage,
                        rawResponse: _response.rawResponse,
                    });
            }
        });
    }
    /**
     * Create a new function version.
     *
     * @param {string} projectUuid
     * @param {Lilypad.FunctionCreate} request
     * @param {Functions.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Lilypad.UnprocessableEntityError}
     *
     * @example
     *     await client.projects.functions.create("project_uuid", {
     *         name: "name",
     *         signature: "signature",
     *         code: "code",
     *         hash: "hash"
     *     })
     */
    create(projectUuid, request, requestOptions) {
        return core.HttpResponsePromise.fromPromise(this.__create(projectUuid, request, requestOptions));
    }
    __create(projectUuid, request, requestOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            var _a, _b;
            const _response = yield core.fetcher({
                url: core.joinUrl((_a = (yield core.Supplier.get(this._options.baseUrl))) !== null && _a !== void 0 ? _a : (yield core.Supplier.get(this._options.environment)), `projects/${encodeURIComponent(projectUuid)}/functions`),
                method: "POST",
                headers: (0, headers_js_1.mergeHeaders)((_b = this._options) === null || _b === void 0 ? void 0 : _b.headers, (0, headers_js_1.mergeOnlyDefinedHeaders)({
                    Authorization: yield this._getAuthorizationHeader(),
                    "X-API-Key": requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.apiKey,
                }), requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.headers),
                contentType: "application/json",
                requestType: "json",
                body: request,
                timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
                maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries,
                abortSignal: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.abortSignal,
            });
            if (_response.ok) {
                return { data: _response.body, rawResponse: _response.rawResponse };
            }
            if (_response.error.reason === "status-code") {
                switch (_response.error.statusCode) {
                    case 422:
                        throw new Lilypad.UnprocessableEntityError(_response.error.body, _response.rawResponse);
                    default:
                        throw new errors.LilypadError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.body,
                            rawResponse: _response.rawResponse,
                        });
                }
            }
            switch (_response.error.reason) {
                case "non-json":
                    throw new errors.LilypadError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.rawBody,
                        rawResponse: _response.rawResponse,
                    });
                case "timeout":
                    throw new errors.LilypadTimeoutError("Timeout exceeded when calling POST /projects/{project_uuid}/functions.");
                case "unknown":
                    throw new errors.LilypadError({
                        message: _response.error.errorMessage,
                        rawResponse: _response.rawResponse,
                    });
            }
        });
    }
    /**
     * Grab function by UUID.
     *
     * @param {string} projectUuid
     * @param {string} functionUuid
     * @param {Functions.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Lilypad.UnprocessableEntityError}
     *
     * @example
     *     await client.projects.functions.get("project_uuid", "function_uuid")
     */
    get(projectUuid, functionUuid, requestOptions) {
        return core.HttpResponsePromise.fromPromise(this.__get(projectUuid, functionUuid, requestOptions));
    }
    __get(projectUuid, functionUuid, requestOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            var _a, _b;
            const _response = yield core.fetcher({
                url: core.joinUrl((_a = (yield core.Supplier.get(this._options.baseUrl))) !== null && _a !== void 0 ? _a : (yield core.Supplier.get(this._options.environment)), `projects/${encodeURIComponent(projectUuid)}/functions/${encodeURIComponent(functionUuid)}`),
                method: "GET",
                headers: (0, headers_js_1.mergeHeaders)((_b = this._options) === null || _b === void 0 ? void 0 : _b.headers, (0, headers_js_1.mergeOnlyDefinedHeaders)({
                    Authorization: yield this._getAuthorizationHeader(),
                    "X-API-Key": requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.apiKey,
                }), requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.headers),
                timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
                maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries,
                abortSignal: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.abortSignal,
            });
            if (_response.ok) {
                return { data: _response.body, rawResponse: _response.rawResponse };
            }
            if (_response.error.reason === "status-code") {
                switch (_response.error.statusCode) {
                    case 422:
                        throw new Lilypad.UnprocessableEntityError(_response.error.body, _response.rawResponse);
                    default:
                        throw new errors.LilypadError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.body,
                            rawResponse: _response.rawResponse,
                        });
                }
            }
            switch (_response.error.reason) {
                case "non-json":
                    throw new errors.LilypadError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.rawBody,
                        rawResponse: _response.rawResponse,
                    });
                case "timeout":
                    throw new errors.LilypadTimeoutError("Timeout exceeded when calling GET /projects/{project_uuid}/functions/{function_uuid}.");
                case "unknown":
                    throw new errors.LilypadError({
                        message: _response.error.errorMessage,
                        rawResponse: _response.rawResponse,
                    });
            }
        });
    }
    /**
     * Archive a function and delete spans by function UUID.
     *
     * @param {string} projectUuid
     * @param {string} functionUuid
     * @param {Functions.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Lilypad.UnprocessableEntityError}
     *
     * @example
     *     await client.projects.functions.archive("project_uuid", "function_uuid")
     */
    archive(projectUuid, functionUuid, requestOptions) {
        return core.HttpResponsePromise.fromPromise(this.__archive(projectUuid, functionUuid, requestOptions));
    }
    __archive(projectUuid, functionUuid, requestOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            var _a, _b;
            const _response = yield core.fetcher({
                url: core.joinUrl((_a = (yield core.Supplier.get(this._options.baseUrl))) !== null && _a !== void 0 ? _a : (yield core.Supplier.get(this._options.environment)), `projects/${encodeURIComponent(projectUuid)}/functions/${encodeURIComponent(functionUuid)}`),
                method: "DELETE",
                headers: (0, headers_js_1.mergeHeaders)((_b = this._options) === null || _b === void 0 ? void 0 : _b.headers, (0, headers_js_1.mergeOnlyDefinedHeaders)({
                    Authorization: yield this._getAuthorizationHeader(),
                    "X-API-Key": requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.apiKey,
                }), requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.headers),
                timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
                maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries,
                abortSignal: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.abortSignal,
            });
            if (_response.ok) {
                return { data: _response.body, rawResponse: _response.rawResponse };
            }
            if (_response.error.reason === "status-code") {
                switch (_response.error.statusCode) {
                    case 422:
                        throw new Lilypad.UnprocessableEntityError(_response.error.body, _response.rawResponse);
                    default:
                        throw new errors.LilypadError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.body,
                            rawResponse: _response.rawResponse,
                        });
                }
            }
            switch (_response.error.reason) {
                case "non-json":
                    throw new errors.LilypadError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.rawBody,
                        rawResponse: _response.rawResponse,
                    });
                case "timeout":
                    throw new errors.LilypadTimeoutError("Timeout exceeded when calling DELETE /projects/{project_uuid}/functions/{function_uuid}.");
                case "unknown":
                    throw new errors.LilypadError({
                        message: _response.error.errorMessage,
                        rawResponse: _response.rawResponse,
                    });
            }
        });
    }
    /**
     * Update a function.
     *
     * @param {string} projectUuid
     * @param {string} functionUuid
     * @param {Lilypad.projects.FunctionUpdate} request
     * @param {Functions.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Lilypad.UnprocessableEntityError}
     *
     * @example
     *     await client.projects.functions.update("project_uuid", "function_uuid")
     */
    update(projectUuid, functionUuid, request = {}, requestOptions) {
        return core.HttpResponsePromise.fromPromise(this.__update(projectUuid, functionUuid, request, requestOptions));
    }
    __update(projectUuid_1, functionUuid_1) {
        return __awaiter(this, arguments, void 0, function* (projectUuid, functionUuid, request = {}, requestOptions) {
            var _a, _b;
            const _response = yield core.fetcher({
                url: core.joinUrl((_a = (yield core.Supplier.get(this._options.baseUrl))) !== null && _a !== void 0 ? _a : (yield core.Supplier.get(this._options.environment)), `projects/${encodeURIComponent(projectUuid)}/functions/${encodeURIComponent(functionUuid)}`),
                method: "PATCH",
                headers: (0, headers_js_1.mergeHeaders)((_b = this._options) === null || _b === void 0 ? void 0 : _b.headers, (0, headers_js_1.mergeOnlyDefinedHeaders)({
                    Authorization: yield this._getAuthorizationHeader(),
                    "X-API-Key": requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.apiKey,
                }), requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.headers),
                contentType: "application/json",
                requestType: "json",
                body: request,
                timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
                maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries,
                abortSignal: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.abortSignal,
            });
            if (_response.ok) {
                return { data: _response.body, rawResponse: _response.rawResponse };
            }
            if (_response.error.reason === "status-code") {
                switch (_response.error.statusCode) {
                    case 422:
                        throw new Lilypad.UnprocessableEntityError(_response.error.body, _response.rawResponse);
                    default:
                        throw new errors.LilypadError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.body,
                            rawResponse: _response.rawResponse,
                        });
                }
            }
            switch (_response.error.reason) {
                case "non-json":
                    throw new errors.LilypadError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.rawBody,
                        rawResponse: _response.rawResponse,
                    });
                case "timeout":
                    throw new errors.LilypadTimeoutError("Timeout exceeded when calling PATCH /projects/{project_uuid}/functions/{function_uuid}.");
                case "unknown":
                    throw new errors.LilypadError({
                        message: _response.error.errorMessage,
                        rawResponse: _response.rawResponse,
                    });
            }
        });
    }
    /**
     * Archive a function by name and delete spans by function name.
     *
     * @param {string} projectUuid
     * @param {string} functionName
     * @param {Functions.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Lilypad.UnprocessableEntityError}
     *
     * @example
     *     await client.projects.functions.archiveByName("project_uuid", "function_name")
     */
    archiveByName(projectUuid, functionName, requestOptions) {
        return core.HttpResponsePromise.fromPromise(this.__archiveByName(projectUuid, functionName, requestOptions));
    }
    __archiveByName(projectUuid, functionName, requestOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            var _a, _b;
            const _response = yield core.fetcher({
                url: core.joinUrl((_a = (yield core.Supplier.get(this._options.baseUrl))) !== null && _a !== void 0 ? _a : (yield core.Supplier.get(this._options.environment)), `projects/${encodeURIComponent(projectUuid)}/functions/names/${encodeURIComponent(functionName)}`),
                method: "DELETE",
                headers: (0, headers_js_1.mergeHeaders)((_b = this._options) === null || _b === void 0 ? void 0 : _b.headers, (0, headers_js_1.mergeOnlyDefinedHeaders)({
                    Authorization: yield this._getAuthorizationHeader(),
                    "X-API-Key": requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.apiKey,
                }), requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.headers),
                timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
                maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries,
                abortSignal: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.abortSignal,
            });
            if (_response.ok) {
                return { data: _response.body, rawResponse: _response.rawResponse };
            }
            if (_response.error.reason === "status-code") {
                switch (_response.error.statusCode) {
                    case 422:
                        throw new Lilypad.UnprocessableEntityError(_response.error.body, _response.rawResponse);
                    default:
                        throw new errors.LilypadError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.body,
                            rawResponse: _response.rawResponse,
                        });
                }
            }
            switch (_response.error.reason) {
                case "non-json":
                    throw new errors.LilypadError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.rawBody,
                        rawResponse: _response.rawResponse,
                    });
                case "timeout":
                    throw new errors.LilypadTimeoutError("Timeout exceeded when calling DELETE /projects/{project_uuid}/functions/names/{function_name}.");
                case "unknown":
                    throw new errors.LilypadError({
                        message: _response.error.errorMessage,
                        rawResponse: _response.rawResponse,
                    });
            }
        });
    }
    _getAuthorizationHeader() {
        return __awaiter(this, void 0, void 0, function* () {
            const bearer = yield core.Supplier.get(this._options.token);
            if (bearer != null) {
                return `Bearer ${bearer}`;
            }
            return undefined;
        });
    }
}
exports.Functions = Functions;
