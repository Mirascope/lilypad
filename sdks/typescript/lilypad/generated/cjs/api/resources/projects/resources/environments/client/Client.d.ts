/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as core from "../../../../../../core/index.js";
import * as MirascopeApi from "../../../../../index.js";
export declare namespace Environments {
    interface Options {
        environment: core.Supplier<string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        token?: core.Supplier<core.BearerToken | undefined>;
        /** Override the X-API-Key header */
        apiKey: core.Supplier<string>;
        /** Additional headers to include in requests. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }
    interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Override the X-API-Key header */
        apiKey?: string;
        /** Additional headers to include in the request. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }
}
export declare class Environments {
    protected readonly _options: Environments.Options;
    constructor(_options: Environments.Options);
    /**
     * Deploy a function to an environment.
     *
     * @param {string} projectUuid
     * @param {string} environmentUuid
     * @param {MirascopeApi.projects.EnvironmentsDeployRequest} request
     * @param {Environments.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link MirascopeApi.UnprocessableEntityError}
     *
     * @example
     *     await client.projects.environments.deploy("project_uuid", "environment_uuid", {
     *         function_uuid: "function_uuid"
     *     })
     */
    deploy(projectUuid: string, environmentUuid: string, request: MirascopeApi.projects.EnvironmentsDeployRequest, requestOptions?: Environments.RequestOptions): core.HttpResponsePromise<MirascopeApi.DeploymentPublic>;
    private __deploy;
    /**
     * Get active deployment for an environment.
     *
     * @param {string} projectUuid
     * @param {string} environmentUuid
     * @param {Environments.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link MirascopeApi.UnprocessableEntityError}
     *
     * @example
     *     await client.projects.environments.getActiveDeployment("project_uuid", "environment_uuid")
     */
    getActiveDeployment(projectUuid: string, environmentUuid: string, requestOptions?: Environments.RequestOptions): core.HttpResponsePromise<MirascopeApi.DeploymentPublic>;
    private __getActiveDeployment;
    /**
     * Get the currently active function for an environment.
     *
     * @param {string} projectUuid
     * @param {string} environmentUuid
     * @param {Environments.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link MirascopeApi.UnprocessableEntityError}
     *
     * @example
     *     await client.projects.environments.getFunction("project_uuid", "environment_uuid")
     */
    getFunction(projectUuid: string, environmentUuid: string, requestOptions?: Environments.RequestOptions): core.HttpResponsePromise<MirascopeApi.FunctionPublic>;
    private __getFunction;
    /**
     * Get deployment history for an environment.
     *
     * @param {string} projectUuid
     * @param {string} environmentUuid
     * @param {Environments.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link MirascopeApi.UnprocessableEntityError}
     *
     * @example
     *     await client.projects.environments.getDeploymentHistory("project_uuid", "environment_uuid")
     */
    getDeploymentHistory(projectUuid: string, environmentUuid: string, requestOptions?: Environments.RequestOptions): core.HttpResponsePromise<MirascopeApi.DeploymentPublic[]>;
    private __getDeploymentHistory;
    protected _getAuthorizationHeader(): Promise<string | undefined>;
}
