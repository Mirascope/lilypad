/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as core from "../../../../../../core/index.js";
import * as Lilypad from "../../../../../index.js";
export declare namespace Spans {
    interface Options {
        environment: core.Supplier<string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        token?: core.Supplier<core.BearerToken | undefined>;
        /** Override the X-API-Key header */
        apiKey: core.Supplier<string>;
        /** Additional headers to include in requests. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }
    interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Override the X-API-Key header */
        apiKey?: string;
        /** Additional headers to include in the request. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }
}
export declare class Spans {
    protected readonly _options: Spans.Options;
    constructor(_options: Spans.Options);
    /**
     * Get aggregated span by project uuid.
     *
     * @param {string} projectUuid
     * @param {Lilypad.projects.SpansGetAggregatesRequest} request
     * @param {Spans.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Lilypad.UnprocessableEntityError}
     *
     * @example
     *     await client.projects.spans.getAggregates("project_uuid", {
     *         time_frame: "day"
     *     })
     */
    getAggregates(projectUuid: string, request: Lilypad.projects.SpansGetAggregatesRequest, requestOptions?: Spans.RequestOptions): core.HttpResponsePromise<Lilypad.AggregateMetrics[]>;
    private __getAggregates;
    /**
     * Get spans created recently for real-time polling.
     *
     * If no 'since' parameter is provided, returns spans from the last 30 seconds.
     *
     * @param {string} projectUuid
     * @param {Lilypad.projects.SpansGetRecentRequest} request
     * @param {Spans.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Lilypad.UnprocessableEntityError}
     *
     * @example
     *     await client.projects.spans.getRecent("project_uuid")
     */
    getRecent(projectUuid: string, request?: Lilypad.projects.SpansGetRecentRequest, requestOptions?: Spans.RequestOptions): core.HttpResponsePromise<Lilypad.RecentSpansResponse>;
    private __getRecent;
    /**
     * Get span by project_uuid and span_id.
     *
     * @param {string} projectUuid
     * @param {string} spanId
     * @param {Spans.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Lilypad.UnprocessableEntityError}
     *
     * @example
     *     await client.projects.spans.getById("project_uuid", "span_id")
     */
    getById(projectUuid: string, spanId: string, requestOptions?: Spans.RequestOptions): core.HttpResponsePromise<Lilypad.SpanMoreDetails>;
    private __getById;
    /**
     * Search for traces in OpenSearch.
     *
     * @param {string} projectUuid
     * @param {Lilypad.projects.SpansSearchRequest} request
     * @param {Spans.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Lilypad.UnprocessableEntityError}
     *
     * @example
     *     await client.projects.spans.search("project_uuid")
     */
    search(projectUuid: string, request?: Lilypad.projects.SpansSearchRequest, requestOptions?: Spans.RequestOptions): core.HttpResponsePromise<Lilypad.SpanPublic[]>;
    private __search;
    /**
     * Delete spans by UUID.
     *
     * @param {string} projectUuid
     * @param {string} spanUuid
     * @param {Spans.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Lilypad.UnprocessableEntityError}
     *
     * @example
     *     await client.projects.spans.delete("project_uuid", "span_uuid")
     */
    delete(projectUuid: string, spanUuid: string, requestOptions?: Spans.RequestOptions): core.HttpResponsePromise<boolean>;
    private __delete;
    protected _getAuthorizationHeader(): Promise<string | undefined>;
}
