/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as core from "../../../../core/index.js";
import * as MirascopeApi from "../../../index.js";
import { Functions } from "../resources/functions/client/Client.js";
import { Spans } from "../resources/spans/client/Client.js";
import { Traces } from "../resources/traces/client/Client.js";
import { Environments } from "../resources/environments/client/Client.js";
import { Tags } from "../resources/tags/client/Client.js";
export declare namespace Projects {
    interface Options {
        environment: core.Supplier<string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        token?: core.Supplier<core.BearerToken | undefined>;
        /** Override the X-API-Key header */
        apiKey: core.Supplier<string>;
        /** Additional headers to include in requests. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }
    interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Override the X-API-Key header */
        apiKey?: string;
        /** Additional headers to include in the request. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }
}
export declare class Projects {
    protected readonly _options: Projects.Options;
    protected _functions: Functions | undefined;
    protected _spans: Spans | undefined;
    protected _traces: Traces | undefined;
    protected _environments: Environments | undefined;
    protected _tags: Tags | undefined;
    constructor(_options: Projects.Options);
    get functions(): Functions;
    get spans(): Spans;
    get traces(): Traces;
    get environments(): Environments;
    get tags(): Tags;
    /**
     * Get all projects.
     *
     * @param {Projects.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.projects.list()
     */
    list(requestOptions?: Projects.RequestOptions): core.HttpResponsePromise<MirascopeApi.ProjectPublic[]>;
    private __list;
    /**
     * Create a project
     *
     * @param {MirascopeApi.ProjectCreate} request
     * @param {Projects.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link MirascopeApi.UnprocessableEntityError}
     *
     * @example
     *     await client.projects.create({
     *         name: "name"
     *     })
     */
    create(request: MirascopeApi.ProjectCreate, requestOptions?: Projects.RequestOptions): core.HttpResponsePromise<MirascopeApi.ProjectPublic>;
    private __create;
    /**
     * Get a project.
     *
     * @param {string} projectUuid
     * @param {Projects.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link MirascopeApi.UnprocessableEntityError}
     *
     * @example
     *     await client.projects.get("project_uuid")
     */
    get(projectUuid: string, requestOptions?: Projects.RequestOptions): core.HttpResponsePromise<MirascopeApi.ProjectPublic>;
    private __get;
    /**
     * Delete a project
     *
     * @param {string} projectUuid
     * @param {Projects.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link MirascopeApi.UnprocessableEntityError}
     *
     * @example
     *     await client.projects.delete("project_uuid")
     */
    delete(projectUuid: string, requestOptions?: Projects.RequestOptions): core.HttpResponsePromise<boolean>;
    private __delete;
    /**
     * Update a project.
     *
     * @param {string} projectUuid
     * @param {MirascopeApi.ProjectCreate} request
     * @param {Projects.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link MirascopeApi.UnprocessableEntityError}
     *
     * @example
     *     await client.projects.update("project_uuid", {
     *         name: "name"
     *     })
     */
    update(projectUuid: string, request: MirascopeApi.ProjectCreate, requestOptions?: Projects.RequestOptions): core.HttpResponsePromise<MirascopeApi.ProjectPublic>;
    private __update;
    protected _getAuthorizationHeader(): Promise<string | undefined>;
}
