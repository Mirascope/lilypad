/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as core from "../../../../core/index.js";
import * as Lilypad from "../../../index.js";
export declare namespace Users {
    interface Options {
        environment: core.Supplier<string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        token?: core.Supplier<core.BearerToken | undefined>;
        /** Override the X-API-Key header */
        apiKey: core.Supplier<string>;
        /** Additional headers to include in requests. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }
    interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Override the X-API-Key header */
        apiKey?: string;
        /** Additional headers to include in the request. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }
}
export declare class Users {
    protected readonly _options: Users.Options;
    constructor(_options: Users.Options);
    /**
     * Update users active organization uuid.
     *
     * @param {string} activeOrganizationUuid
     * @param {Users.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Lilypad.UnprocessableEntityError}
     *
     * @example
     *     await client.users.setActiveOrganization("activeOrganizationUuid")
     */
    setActiveOrganization(activeOrganizationUuid: string, requestOptions?: Users.RequestOptions): core.HttpResponsePromise<Lilypad.UserPublic>;
    private __setActiveOrganization;
    /**
     * Update users keys.
     *
     * @param {Record<string, unknown>} request
     * @param {Users.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Lilypad.UnprocessableEntityError}
     *
     * @example
     *     await client.users.updateApiKeys({
     *         "key": "value"
     *     })
     */
    updateApiKeys(request: Record<string, unknown>, requestOptions?: Users.RequestOptions): core.HttpResponsePromise<Lilypad.UserPublic>;
    private __updateApiKeys;
    /**
     * Get user.
     *
     * @param {Users.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.users.getCurrentUser()
     */
    getCurrentUser(requestOptions?: Users.RequestOptions): core.HttpResponsePromise<Lilypad.UserPublic>;
    private __getCurrentUser;
    protected _getAuthorizationHeader(): Promise<string | undefined>;
}
