{
  "version": "1.0.0",
  "buildTime": "2025-07-22T11:41:31.949Z",
  "functions": {
    "72a04d3349899f9dab107b558bf240a784896382a1bc3a4e2c8305f34d47ad88": {
      "name": "getUserInfo",
      "hash": "72a04d3349899f9dab107b558bf240a784896382a1bc3a4e2c8305f34d47ad88",
      "sourceCode": "async (userId: number): Promise<User> => {\n    console.log(`Fetching user info for ID: ${userId}`);\n    \n    // Simulate API call\n    const user: User = {\n      id: userId,\n      name: `User ${userId}`,\n      email: `user${userId}@example.com`,\n      role: userId === 1 ? 'admin' : 'user',\n    };\n    \n    return user;\n  }",
      "signature": "async (userId: number) => ...",
      "filePath": "examples/test-typescript-extraction.ts",
      "startLine": 32,
      "endLine": 44,
      "dependencies": {
        "../src/index": "*",
        "../src/versioning/metadata-loader": "*"
      }
    },
    "d71179822c0c108fa884146a6d60b0f234974d67b0167c29a3c1b32b97809591": {
      "name": "processArray",
      "hash": "d71179822c0c108fa884146a6d60b0f234974d67b0167c29a3c1b32b97809591",
      "sourceCode": "<T extends { id: number }>(items: T[]): T[] => {\n    console.log(`Processing ${items.length} items`);\n    return items.sort((a, b) => a.id - b.id);\n  }",
      "signature": "(items: T[]) => ...",
      "filePath": "examples/test-typescript-extraction.ts",
      "startLine": 50,
      "endLine": 53,
      "dependencies": {
        "../src/index": "*",
        "../src/versioning/metadata-loader": "*"
      }
    },
    "6d6b7101e321575932e0e413cd222189e3c04b6765d1fa4f91f6f7f3ba04db9f": {
      "name": "calculatePrice",
      "hash": "6d6b7101e321575932e0e413cd222189e3c04b6765d1fa4f91f6f7f3ba04db9f",
      "sourceCode": "({ basePrice, tax = 0.08, discount = 0 }: {\n    basePrice: number;\n    tax?: number;\n    discount?: number;\n  }): number => {\n    const discountedPrice = basePrice * (1 - discount);\n    const finalPrice = discountedPrice * (1 + tax);\n    return Math.round(finalPrice * 100) / 100;\n  }",
      "signature": "({ basePrice, tax = 0.08, discount = 0 }: {\n    basePrice: number;\n    tax?: number;\n    discount?: number;\n  }) => ...",
      "filePath": "examples/test-typescript-extraction.ts",
      "startLine": 59,
      "endLine": 67,
      "dependencies": {
        "../src/index": "*",
        "../src/versioning/metadata-loader": "*"
      }
    },
    "698ad8e2083348aeb26d588618784fd34db522873d8598e71e740ac51c091627": {
      "name": "formatUserGreeting",
      "hash": "698ad8e2083348aeb26d588618784fd34db522873d8598e71e740ac51c091627",
      "sourceCode": "(user: User, time: 'morning' | 'afternoon' | 'evening' = 'morning'): string => {\n    const greetings = {\n      morning: 'Good morning',\n      afternoon: 'Good afternoon',\n      evening: 'Good evening',\n    };\n    \n    return `${greetings[time]}, ${user.name}!`;\n  }",
      "signature": "(user: User, time: 'morning' | 'afternoon' | 'evening' = 'morning') => ...",
      "filePath": "examples/test-typescript-extraction.ts",
      "startLine": 73,
      "endLine": 81,
      "dependencies": {
        "../src/index": "*",
        "../src/versioning/metadata-loader": "*"
      }
    },
    "2817dad7d0ef2b683b66303ffad0013c39ac4e02663df3b6ad2bc4d3c1d386dd": {
      "name": "calculateTax",
      "hash": "2817dad7d0ef2b683b66303ffad0013c39ac4e02663df3b6ad2bc4d3c1d386dd",
      "sourceCode": "async function calculateTax(\n    amount: number,\n    region: string,\n  ): Promise<{ tax: number; total: number }> {\n    console.log(`Calculating tax for ${region} (v${version})`);\n\n    // Different tax rates based on version\n    let taxRate = 0;\n    switch (region) {\n      case 'US':\n        taxRate = version === 1 ? 0.08 : 0.085; // Version 2 has higher rate\n        break;\n      case 'UK':\n        taxRate = 0.2;\n        break;\n      case 'JP':\n        taxRate = version === 1 ? 0.08 : 0.1; // Version 2 updates Japan tax\n        break;\n      default:\n        taxRate = 0.15;\n    }\n\n    const tax = amount * taxRate;\n    return { tax, total: amount + tax };\n  }",
      "signature": "async function calculateTax(amount: number, region: string)",
      "filePath": "examples/test-version-methods.ts",
      "startLine": 18,
      "endLine": 42,
      "dependencies": {
        "../src/index": "*"
      }
    },
    "6bd60edfa9d54eb89a3d46637866682b4468759a543ab3e29de3ef9e91adb698": {
      "name": "add",
      "hash": "6bd60edfa9d54eb89a3d46637866682b4468759a543ab3e29de3ef9e91adb698",
      "sourceCode": "async (a: number, b: number): Promise<number> => {\n    console.log(`Adding ${a} + ${b}`);\n    return a + b;\n  }",
      "signature": "async (a: number, b: number) => ...",
      "filePath": "examples/versioning-basic.ts",
      "startLine": 18,
      "endLine": 21,
      "dependencies": {
        "../src/index": "*"
      }
    },
    "e54324699cc075426628c84b48357a97a346a92bda8c7468d65c3fb5e2ae57cb": {
      "name": "processData",
      "hash": "e54324699cc075426628c84b48357a97a346a92bda8c7468d65c3fb5e2ae57cb",
      "sourceCode": "async function processData(data: {\n    items: number[];\n    operation: 'sum' | 'average' | 'max';\n  }): Promise<number> {\n    console.log(`Processing ${data.items.length} items with operation: ${data.operation}`);\n\n    switch (data.operation) {\n      case 'sum':\n        return data.items.reduce((acc, val) => acc + val, 0);\n      case 'average':\n        return data.items.reduce((acc, val) => acc + val, 0) / data.items.length;\n      case 'max':\n        return Math.max(...data.items);\n      default:\n        throw new Error(`Unknown operation: ${data.operation}`);\n    }\n  }",
      "signature": "async function processData(data: {\n    items: number[];\n    operation: 'sum' | 'average' | 'max';\n  })",
      "filePath": "examples/versioning-complete.ts",
      "startLine": 18,
      "endLine": 34,
      "dependencies": {
        "../src/index": "*"
      }
    },
    "eff7b673830cb68c20fd7c704dd3d20eb52177d616725d068cdbb8e9179f3807": {
      "name": "analyzeResults",
      "hash": "eff7b673830cb68c20fd7c704dd3d20eb52177d616725d068cdbb8e9179f3807",
      "sourceCode": "async function analyzeResults(\n    results: number[],\n  ): Promise<{ min: number; max: number; avg: number }> {\n    console.log(`Analyzing ${results.length} results`);\n\n    const min = Math.min(...results);\n    const max = Math.max(...results);\n    const avg = results.reduce((acc, val) => acc + val, 0) / results.length;\n\n    return { min, max, avg };\n  }",
      "signature": "async function analyzeResults(results: number[])",
      "filePath": "examples/versioning-complete.ts",
      "startLine": 40,
      "endLine": 50,
      "dependencies": {
        "../src/index": "*"
      }
    },
    "75a3021d217b0b9c683f3963f580c2097d33442443032ec45c694c6b146f1f60": {
      "name": "calculatePrice",
      "hash": "75a3021d217b0b9c683f3963f580c2097d33442443032ec45c694c6b146f1f60",
      "sourceCode": "async function calculatePrice(\n    basePrice: number,\n    taxRate: number,\n  ): Promise<{ price: number; tax: number; total: number }> {\n    const tax = basePrice * taxRate;\n    const total = basePrice + tax;\n    return { price: basePrice, tax, total };\n  }",
      "signature": "async function calculatePrice(basePrice: number, taxRate: number)",
      "filePath": "examples/versioning-example.ts",
      "startLine": 21,
      "endLine": 28,
      "dependencies": {
        "../src/index": "*",
        "../src/constants": "*"
      }
    },
    "680d6b7fd928b3231c4fc29aedce1a864d4468dfc49a6d13158035895c41f573": {
      "name": "calculatePrice",
      "hash": "680d6b7fd928b3231c4fc29aedce1a864d4468dfc49a6d13158035895c41f573",
      "sourceCode": "async function calculatePrice(\n    items: Array<{ name: string; price: number; quantity: number }>,\n  ): Promise<number> {\n    console.log('Calculating price for', items.length, 'items');\n    const subtotal = items.reduce((sum, item) => sum + item.price * item.quantity, 0);\n    const tax = subtotal * 0.08; // 8% tax\n    return subtotal + tax;\n  }",
      "signature": "async function calculatePrice(items: Array<{ name: string; price: number; quantity: number }>)",
      "filePath": "examples/versioning-no-decorators.ts",
      "startLine": 18,
      "endLine": 25,
      "dependencies": {
        "openai": "*",
        "../src/index": "*"
      }
    },
    "afea806ca1453f471d990ad345ce17194bd5d8e65560feac3299bf3ea677c80e": {
      "name": "analyzeText",
      "hash": "afea806ca1453f471d990ad345ce17194bd5d8e65560feac3299bf3ea677c80e",
      "sourceCode": "async function analyzeText(text: string): Promise<{ sentiment: string; keywords: string[] }> {\n    const openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });\n\n    console.log('Analyzing text:', text.substring(0, 50) + '...');\n\n    const response = await openai.chat.completions.create({\n      model: 'gpt-3.5-turbo',\n      messages: [\n        {\n          role: 'system',\n          content: 'Analyze the sentiment and extract keywords from the text.',\n        },\n        { role: 'user', content: text },\n      ],\n      temperature: 0.3,\n    });\n\n    // Parse response\n    const analysis = response.choices[0].message.content || '';\n    return {\n      sentiment: 'positive', // Simplified for demo\n      keywords: ['example', 'demo'], // Simplified for demo\n    };\n  }",
      "signature": "async function analyzeText(text: string)",
      "filePath": "examples/versioning-no-decorators.ts",
      "startLine": 31,
      "endLine": 54,
      "dependencies": {
        "openai": "*",
        "../src/index": "*"
      }
    },
    "0b67ff13a012f88a41fea9c0991aa8edd3dffcb8b87403274a129e62ef71ffab": {
      "name": "testFunction",
      "hash": "0b67ff13a012f88a41fea9c0991aa8edd3dffcb8b87403274a129e62ef71ffab",
      "sourceCode": "async (name: string, age: number): Promise<{ greeting: string; isAdult: boolean }> => {\n    const greeting = `Hello ${name}, you are ${age} years old`;\n    return {\n      greeting,\n      isAdult: age >= 18,\n    };\n  }",
      "signature": "async (name: string, age: number) => ...",
      "filePath": "examples/typescript-extraction-demo/test-closure.ts",
      "startLine": 20,
      "endLine": 26,
      "dependencies": {
        "@lilypad/typescript-sdk": "*",
        "../../src/utils/closure": "*"
      }
    },
    "61c375a7cb727fcdd9057aaba2cea3833492ee03e0bad081625008a4b252c4fb": {
      "name": "calculateDiscount",
      "hash": "61c375a7cb727fcdd9057aaba2cea3833492ee03e0bad081625008a4b252c4fb",
      "sourceCode": "async (params: PricingParams): Promise<{\n    originalTotal: number;\n    discountPercentage: number;\n    discountAmount: number;\n    finalPrice: number;\n  }> => {\n    const { originalPrice, customerTier, quantity } = params;\n    \n    // Calculate base total\n    const originalTotal = originalPrice * quantity;\n    \n    // Determine discount percentage based on tier\n    let discountPercentage = 0;\n    switch (customerTier) {\n      case 'bronze':\n        discountPercentage = 5;\n        break;\n      case 'silver':\n        discountPercentage = 10;\n        break;\n      case 'gold':\n        discountPercentage = 15;\n        break;\n      case 'platinum':\n        discountPercentage = 20;\n        break;\n    }\n    \n    // Apply quantity discount\n    if (quantity >= 10) {\n      discountPercentage += 5;\n    } else if (quantity >= 5) {\n      discountPercentage += 2;\n    }\n    \n    // Calculate final amounts\n    const discountAmount = originalTotal * (discountPercentage / 100);\n    const finalPrice = originalTotal - discountAmount;\n    \n    return {\n      originalTotal: Math.round(originalTotal * 100) / 100,\n      discountPercentage,\n      discountAmount: Math.round(discountAmount * 100) / 100,\n      finalPrice: Math.round(finalPrice * 100) / 100,\n    };\n  }",
      "signature": "async (params: PricingParams) => ...",
      "filePath": "examples/typescript-extraction-demo/src/services/business-logic.ts",
      "startLine": 42,
      "endLine": 87,
      "dependencies": {
        "@lilypad/typescript-sdk": "*"
      }
    },
    "a583f4c656c2bc1ed618c60e0e1493b9df03a55a5192ee38587f6cbb580143a0": {
      "name": "processOrder",
      "hash": "a583f4c656c2bc1ed618c60e0e1493b9df03a55a5192ee38587f6cbb580143a0",
      "sourceCode": "async function processOrderWithShipping(\n    request: OrderRequest\n  ): Promise<{\n    orderId: string;\n    items: OrderItem[];\n    subtotal: number;\n    shipping: number;\n    tax: number;\n    total: number;\n    estimatedDelivery: Date;\n  }> {\n    // Calculate subtotal\n    const subtotal = request.items.reduce(\n      (sum, item) => sum + item.price * item.quantity,\n      0\n    );\n    \n    // Calculate shipping based on method\n    const shippingRates = {\n      standard: 5.99,\n      express: 15.99,\n      overnight: 29.99,\n    };\n    const shipping = shippingRates[request.shippingMethod];\n    \n    // Calculate tax (8.5%)\n    const tax = (subtotal + shipping) * 0.085;\n    \n    // Calculate total\n    const total = subtotal + shipping + tax;\n    \n    // Estimate delivery\n    const today = new Date();\n    const deliveryDays = {\n      standard: 5,\n      express: 2,\n      overnight: 1,\n    };\n    const estimatedDelivery = new Date(today);\n    estimatedDelivery.setDate(today.getDate() + deliveryDays[request.shippingMethod]);\n    \n    return {\n      orderId: `ORD-${Date.now()}-${request.customerId}`,\n      items: request.items,\n      subtotal: Math.round(subtotal * 100) / 100,\n      shipping,\n      tax: Math.round(tax * 100) / 100,\n      total: Math.round(total * 100) / 100,\n      estimatedDelivery,\n    };\n  }",
      "signature": "async function processOrderWithShipping(request: OrderRequest)",
      "filePath": "examples/typescript-extraction-demo/src/services/business-logic.ts",
      "startLine": 99,
      "endLine": 149,
      "dependencies": {
        "@lilypad/typescript-sdk": "*"
      }
    },
    "679ca2c078832a97dae248e230cf3d4753ef41047c43f4b9574f314c84fdda78": {
      "name": "validateUser",
      "hash": "679ca2c078832a97dae248e230cf3d4753ef41047c43f4b9574f314c84fdda78",
      "sourceCode": "<T extends { email: string; age: number }>(\n    userData: T & { country: string }\n  ): ValidationResult<T> => {\n    const errors: string[] = [];\n    \n    // Email validation\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    if (!emailRegex.test(userData.email)) {\n      errors.push('Invalid email format');\n    }\n    \n    // Age validation\n    if (userData.age < 18) {\n      errors.push('User must be 18 or older');\n    }\n    \n    if (userData.age > 120) {\n      errors.push('Invalid age');\n    }\n    \n    // Country validation\n    const allowedCountries = ['US', 'CA', 'UK', 'AU', 'NZ'];\n    if (!allowedCountries.includes(userData.country)) {\n      errors.push(`Country must be one of: ${allowedCountries.join(', ')}`);\n    }\n    \n    return {\n      isValid: errors.length === 0,\n      data: errors.length === 0 ? userData : undefined,\n      errors: errors.length > 0 ? errors : undefined,\n    };\n  }",
      "signature": "(userData: T & { country: string }) => ...",
      "filePath": "examples/typescript-extraction-demo/src/services/business-logic.ts",
      "startLine": 157,
      "endLine": 188,
      "dependencies": {
        "@lilypad/typescript-sdk": "*"
      }
    },
    "cab0405a54c6b576948e704f675c5ae92f37fe919edd5477ed4121c01e121e70": {
      "name": "generateReport",
      "hash": "cab0405a54c6b576948e704f675c5ae92f37fe919edd5477ed4121c01e121e70",
      "sourceCode": "async (data: number[]): Promise<{\n    count: number;\n    sum: number;\n    average: number;\n    min: number;\n    max: number;\n    median: number;\n    standardDeviation: number;\n  }> => {\n    // Basic statistics\n    const count = data.length;\n    const sum = data.reduce((acc, val) => acc + val, 0);\n    const average = sum / count;\n    const min = Math.min(...data);\n    const max = Math.max(...data);\n    \n    // Calculate median\n    const sorted = [...data].sort((a, b) => a - b);\n    const median = count % 2 === 0\n      ? (sorted[count / 2 - 1] + sorted[count / 2]) / 2\n      : sorted[Math.floor(count / 2)];\n    \n    // Calculate standard deviation\n    const squaredDifferences = data.map(value => Math.pow(value - average, 2));\n    const avgSquaredDiff = squaredDifferences.reduce((acc, val) => acc + val, 0) / count;\n    const standardDeviation = Math.sqrt(avgSquaredDiff);\n    \n    // Simulate async operation\n    await new Promise(resolve => setTimeout(resolve, 100));\n    \n    return {\n      count,\n      sum,\n      average: Math.round(average * 100) / 100,\n      min,\n      max,\n      median,\n      standardDeviation: Math.round(standardDeviation * 100) / 100,\n    };\n  }",
      "signature": "async (data: number[]) => ...",
      "filePath": "examples/typescript-extraction-demo/src/services/business-logic.ts",
      "startLine": 196,
      "endLine": 235,
      "dependencies": {
        "@lilypad/typescript-sdk": "*"
      }
    },
    "e65ec0dd400af65343930a236891facb87f1aad44ee54869c162fb3b82cec7af": {
      "name": "answerQuestion",
      "hash": "e65ec0dd400af65343930a236891facb87f1aad44ee54869c162fb3b82cec7af",
      "sourceCode": "async (question: string): Promise<string> => {\n    console.log(`Answering question: ${question}`);\n    \n    // This OpenAI call will be automatically traced with auto_llm\n    const completion = await openai.chat.completions.create({\n      model: 'gpt-4o-mini',\n      messages: [\n        { \n          role: 'user', \n          content: `Answer this question concisely: ${question}` \n        }\n      ],\n    });\n    \n    return completion.choices[0].message.content || 'No answer available';\n  }",
      "signature": "async (question: string) => ...",
      "filePath": "examples/typescript-extraction-demo/src/index.ts",
      "startLine": 39,
      "endLine": 54,
      "dependencies": {
        "dotenv": "*",
        "@lilypad/typescript-sdk": "*",
        "openai": "*",
        "./utils/display": "*"
      }
    },
    "a0ca04a8ce79c0f5136102dde70fe6f2acc90c0d19c82d284fa96e69fb1adfcd": {
      "name": "analyzeOrderSentiment",
      "hash": "a0ca04a8ce79c0f5136102dde70fe6f2acc90c0d19c82d284fa96e69fb1adfcd",
      "sourceCode": "async (orderFeedback: string): Promise<{\n    sentiment: 'positive' | 'neutral' | 'negative';\n    confidence: number;\n    summary: string;\n  }> => {\n    const response = await openai.chat.completions.create({\n      model: 'gpt-4o-mini',\n      messages: [\n        {\n          role: 'system',\n          content: 'Analyze the sentiment of customer feedback. Return JSON with sentiment (positive/neutral/negative), confidence (0-1), and a brief summary.'\n        },\n        {\n          role: 'user',\n          content: orderFeedback\n        }\n      ],\n      response_format: { type: 'json_object' },\n    });\n\n    const result = JSON.parse(response.choices[0].message.content || '{}');\n    return {\n      sentiment: result.sentiment || 'neutral',\n      confidence: result.confidence || 0.5,\n      summary: result.summary || 'No analysis available',\n    };\n  }",
      "signature": "async (orderFeedback: string) => ...",
      "filePath": "examples/typescript-extraction-demo/src/index.ts",
      "startLine": 64,
      "endLine": 90,
      "dependencies": {
        "dotenv": "*",
        "@lilypad/typescript-sdk": "*",
        "openai": "*",
        "./utils/display": "*"
      }
    },
    "045db28998aa798312e1a768315b2e4df2cf8fe9b754ac86d5d2785d995154f4": {
      "name": "calculateOrderTotal",
      "hash": "045db28998aa798312e1a768315b2e4df2cf8fe9b754ac86d5d2785d995154f4",
      "sourceCode": "async (order: Order): Promise<{\n    subtotal: number;\n    discount: number;\n    tax: number;\n    total: number;\n  }> => {\n    console.log(`Calculating total for order ${order.id}`);\n\n    // Calculate subtotal\n    const subtotal = order.items.reduce(\n      (sum, item) => sum + item.product.price * item.quantity,\n      0\n    );\n\n    // Apply customer tier discount\n    let discountRate = 0;\n    switch (order.customer.tier) {\n      case 'bronze':\n        discountRate = 0.05;\n        break;\n      case 'silver':\n        discountRate = 0.10;\n        break;\n      case 'gold':\n        discountRate = 0.15;\n        break;\n    }\n    const discount = subtotal * discountRate;\n\n    // Calculate tax (8%)\n    const taxableAmount = subtotal - discount;\n    const tax = taxableAmount * 0.08;\n\n    // Final total\n    const total = taxableAmount + tax;\n\n    return {\n      subtotal: Math.round(subtotal * 100) / 100,\n      discount: Math.round(discount * 100) / 100,\n      tax: Math.round(tax * 100) / 100,\n      total: Math.round(total * 100) / 100,\n    };\n  }",
      "signature": "async (order: Order) => ...",
      "filePath": "examples/user-project/src/index.ts",
      "startLine": 42,
      "endLine": 84,
      "dependencies": {
        "@lilypad/typescript-sdk": "*"
      }
    },
    "1b31ac5d7c5d80c94fa0cfb84d95300c964d3fa9090c00a3554fb8a2ce6a405f": {
      "name": "filterProducts",
      "hash": "1b31ac5d7c5d80c94fa0cfb84d95300c964d3fa9090c00a3554fb8a2ce6a405f",
      "sourceCode": "<T extends Product>(\n    products: T[],\n    predicate: (product: T) => boolean\n  ): T[] => {\n    console.log(`Filtering ${products.length} products`);\n    return products.filter(predicate);\n  }",
      "signature": "(products: T[], predicate: (product: T) => boolean) => ...",
      "filePath": "examples/user-project/src/index.ts",
      "startLine": 94,
      "endLine": 100,
      "dependencies": {
        "@lilypad/typescript-sdk": "*"
      }
    },
    "5b27542d66e36bacc46fb8c5747d0e68faa427473b82f041cc3a31bce2fd40bb": {
      "name": "processInventory",
      "hash": "5b27542d66e36bacc46fb8c5747d0e68faa427473b82f041cc3a31bce2fd40bb",
      "sourceCode": "async ({\n    products,\n    updates,\n  }: {\n    products: Map<string, Product>;\n    updates: Array<{\n      productId: string;\n      quantity: number;\n      operation: 'add' | 'remove' | 'set';\n    }>;\n  }): Promise<Map<string, number>> => {\n    const inventory = new Map<string, number>();\n\n    for (const update of updates) {\n      const current = inventory.get(update.productId) || 0;\n      \n      switch (update.operation) {\n        case 'add':\n          inventory.set(update.productId, current + update.quantity);\n          break;\n        case 'remove':\n          inventory.set(update.productId, Math.max(0, current - update.quantity));\n          break;\n        case 'set':\n          inventory.set(update.productId, update.quantity);\n          break;\n      }\n    }\n\n    return inventory;\n  }",
      "signature": "async ({\n    products,\n    updates,\n  }: {\n    products: Map<string, Product>;\n    updates: Array<{\n      productId: string;\n      quantity: number;\n      operation: 'add' | 'remove' | 'set';\n    }>;\n  }) => ...",
      "filePath": "examples/user-project/src/index.ts",
      "startLine": 106,
      "endLine": 136,
      "dependencies": {
        "@lilypad/typescript-sdk": "*"
      }
    }
  }
}
