{
  "version": "1.0.0",
  "buildTime": "2025-07-24T06:28:05.628Z",
  "functions": {
    "96f303d4061846b951918a2cf68ca8d8b543e74f81ee7e950760626c007ade4c": {
      "name": "getUserInfo",
      "hash": "96f303d4061846b951918a2cf68ca8d8b543e74f81ee7e950760626c007ade4c",
      "sourceCode": "async (userId: number): Promise<User> => {\n    console.log(`Fetching user info for ID: ${userId}`);\n\n    // Simulate API call\n    const user: User = {\n      id: userId,\n      name: `User ${userId}`,\n      email: `user${userId}@example.com`,\n      role: userId === 1 ? 'admin' : 'user',\n    };\n\n    return user;\n  }",
      "signature": "async (userId: number) => ...",
      "filePath": "examples/test-typescript-extraction.ts",
      "startLine": 32,
      "endLine": 44,
      "dependencies": {
        "../src/index": "*",
        "../src/versioning/metadata-loader": "*"
      },
      "selfContainedCode": "// Type dependencies\ninterface User {\n  id: number;\n  name: string;\n  email: string;\n  role: 'admin' | 'user' | 'guest';\n}\n\n// Main function\nasync (userId: number): Promise<User> => {\n    console.log(`Fetching user info for ID: ${userId}`);\n\n    // Simulate API call\n    const user: User = {\n      id: userId,\n      name: `User ${userId}`,\n      email: `user${userId}@example.com`,\n      role: userId === 1 ? 'admin' : 'user',\n    };\n\n    return user;\n  }"
    },
    "112c275389d04035dc329d6b452908de97cbe1ae0ac25a7e660600f35756d4cf": {
      "name": "processArray",
      "hash": "112c275389d04035dc329d6b452908de97cbe1ae0ac25a7e660600f35756d4cf",
      "sourceCode": "<T extends { id: number }>(items: T[]): T[] => {\n    console.log(`Processing ${items.length} items`);\n    return items.sort((a, b) => a.id - b.id);\n  }",
      "signature": "(items: T[]) => ...",
      "filePath": "examples/test-typescript-extraction.ts",
      "startLine": 50,
      "endLine": 53,
      "dependencies": {
        "../src/index": "*",
        "../src/versioning/metadata-loader": "*"
      },
      "selfContainedCode": "// Main function\n<T extends { id: number }>(items: T[]): T[] => {\n    console.log(`Processing ${items.length} items`);\n    return items.sort((a, b) => a.id - b.id);\n  }"
    },
    "783f30e817103ae8f9fffbc3ebda2ae298c15930df66570fb00f1b8b76d88a0c": {
      "name": "calculatePrice",
      "hash": "783f30e817103ae8f9fffbc3ebda2ae298c15930df66570fb00f1b8b76d88a0c",
      "sourceCode": "({\n    basePrice,\n    tax = 0.08,\n    discount = 0,\n  }: {\n    basePrice: number;\n    tax?: number;\n    discount?: number;\n  }): number => {\n    const discountedPrice = basePrice * (1 - discount);\n    const finalPrice = discountedPrice * (1 + tax);\n    return Math.round(finalPrice * 100) / 100;\n  }",
      "signature": "({\n    basePrice,\n    tax = 0.08,\n    discount = 0,\n  }: {\n    basePrice: number;\n    tax?: number;\n    discount?: number;\n  }) => ...",
      "filePath": "examples/test-typescript-extraction.ts",
      "startLine": 59,
      "endLine": 71,
      "dependencies": {
        "../src/index": "*",
        "../src/versioning/metadata-loader": "*"
      },
      "selfContainedCode": "// Main function\n({\n    basePrice,\n    tax = 0.08,\n    discount = 0,\n  }: {\n    basePrice: number;\n    tax?: number;\n    discount?: number;\n  }): number => {\n    const discountedPrice = basePrice * (1 - discount);\n    const finalPrice = discountedPrice * (1 + tax);\n    return Math.round(finalPrice * 100) / 100;\n  }"
    },
    "a9a15fbc6b7be9f4162f78889dcdc8e41539bfb02c216ef77dd4162376dec7b9": {
      "name": "formatUserGreeting",
      "hash": "a9a15fbc6b7be9f4162f78889dcdc8e41539bfb02c216ef77dd4162376dec7b9",
      "sourceCode": "(user: User, time: 'morning' | 'afternoon' | 'evening' = 'morning'): string => {\n    const greetings = {\n      morning: 'Good morning',\n      afternoon: 'Good afternoon',\n      evening: 'Good evening',\n    };\n\n    return `${greetings[time]}, ${user.name}!`;\n  }",
      "signature": "(user: User, time: 'morning' | 'afternoon' | 'evening' = 'morning') => ...",
      "filePath": "examples/test-typescript-extraction.ts",
      "startLine": 77,
      "endLine": 85,
      "dependencies": {
        "../src/index": "*",
        "../src/versioning/metadata-loader": "*"
      },
      "selfContainedCode": "// Type dependencies\ninterface User {\n  id: number;\n  name: string;\n  email: string;\n  role: 'admin' | 'user' | 'guest';\n}\n\n// Main function\n(user: User, time: 'morning' | 'afternoon' | 'evening' = 'morning'): string => {\n    const greetings = {\n      morning: 'Good morning',\n      afternoon: 'Good afternoon',\n      evening: 'Good evening',\n    };\n\n    return `${greetings[time]}, ${user.name}!`;\n  }"
    },
    "0f3cd26a9893dd22237d353b7c34383c33e90d48e9f5cb2ddd04d9d870570f44": {
      "name": "testFunction",
      "hash": "0f3cd26a9893dd22237d353b7c34383c33e90d48e9f5cb2ddd04d9d870570f44",
      "sourceCode": "async (name: string, age: number): Promise<{ greeting: string; isAdult: boolean }> => {\n    const greeting = `Hello ${name}, you are ${age} years old`;\n    return {\n      greeting,\n      isAdult: age >= 18,\n    };\n  }",
      "signature": "async (name: string, age: number) => ...",
      "filePath": "examples/typescript-extraction-demo/test-closure.ts",
      "startLine": 20,
      "endLine": 26,
      "dependencies": {
        "@lilypad/typescript-sdk": "*",
        "../../src/utils/closure": "*"
      },
      "selfContainedCode": "// Main function\nasync (name: string, age: number): Promise<{ greeting: string; isAdult: boolean }> => {\n    const greeting = `Hello ${name}, you are ${age} years old`;\n    return {\n      greeting,\n      isAdult: age >= 18,\n    };\n  }"
    },
    "431eca4b59627cdac076522866f4dff58e22fb7941d1edde81d6582ade5a557e": {
      "name": "calculateDiscount",
      "hash": "431eca4b59627cdac076522866f4dff58e22fb7941d1edde81d6582ade5a557e",
      "sourceCode": "async (\n    params: PricingParams,\n  ): Promise<{\n    originalTotal: number;\n    discountPercentage: number;\n    discountAmount: number;\n    finalPrice: number;\n  }> => {\n    const { originalPrice, customerTier, quantity } = params;\n\n    // Calculate base total\n    const originalTotal = originalPrice * quantity;\n\n    // Determine discount percentage based on tier\n    let discountPercentage = 0;\n    switch (customerTier) {\n      case 'bronze':\n        discountPercentage = 5;\n        break;\n      case 'silver':\n        discountPercentage = 10;\n        break;\n      case 'gold':\n        discountPercentage = 15;\n        break;\n      case 'platinum':\n        discountPercentage = 20;\n        break;\n    }\n\n    // Apply quantity discount\n    if (quantity >= 10) {\n      discountPercentage += 5;\n    } else if (quantity >= 5) {\n      discountPercentage += 2;\n    }\n\n    // Calculate final amounts\n    const discountAmount = originalTotal * (discountPercentage / 100);\n    const finalPrice = originalTotal - discountAmount;\n\n    return {\n      originalTotal: Math.round(originalTotal * 100) / 100,\n      discountPercentage,\n      discountAmount: Math.round(discountAmount * 100) / 100,\n      finalPrice: Math.round(finalPrice * 100) / 100,\n    };\n  }",
      "signature": "async (params: PricingParams) => ...",
      "filePath": "examples/typescript-extraction-demo/src/services/business-logic.ts",
      "startLine": 42,
      "endLine": 89,
      "dependencies": {
        "@lilypad/typescript-sdk": "*"
      },
      "selfContainedCode": "// Type dependencies\nexport interface PricingParams {\n  originalPrice: number;\n  customerTier: 'bronze' | 'silver' | 'gold' | 'platinum';\n  quantity: number;\n}\n\n// Main function\nasync (\n    params: PricingParams,\n  ): Promise<{\n    originalTotal: number;\n    discountPercentage: number;\n    discountAmount: number;\n    finalPrice: number;\n  }> => {\n    const { originalPrice, customerTier, quantity } = params;\n\n    // Calculate base total\n    const originalTotal = originalPrice * quantity;\n\n    // Determine discount percentage based on tier\n    let discountPercentage = 0;\n    switch (customerTier) {\n      case 'bronze':\n        discountPercentage = 5;\n        break;\n      case 'silver':\n        discountPercentage = 10;\n        break;\n      case 'gold':\n        discountPercentage = 15;\n        break;\n      case 'platinum':\n        discountPercentage = 20;\n        break;\n    }\n\n    // Apply quantity discount\n    if (quantity >= 10) {\n      discountPercentage += 5;\n    } else if (quantity >= 5) {\n      discountPercentage += 2;\n    }\n\n    // Calculate final amounts\n    const discountAmount = originalTotal * (discountPercentage / 100);\n    const finalPrice = originalTotal - discountAmount;\n\n    return {\n      originalTotal: Math.round(originalTotal * 100) / 100,\n      discountPercentage,\n      discountAmount: Math.round(discountAmount * 100) / 100,\n      finalPrice: Math.round(finalPrice * 100) / 100,\n    };\n  }"
    },
    "8f63aefcab1d693fa4e9f9173ccaad87c6a6021424a0cda00f538c04953ea034": {
      "name": "processOrderWithShipping",
      "hash": "8f63aefcab1d693fa4e9f9173ccaad87c6a6021424a0cda00f538c04953ea034",
      "sourceCode": "async function processOrderWithShipping(request: OrderRequest): Promise<{\n    orderId: string;\n    items: OrderItem[];\n    subtotal: number;\n    shipping: number;\n    tax: number;\n    total: number;\n    estimatedDelivery: Date;\n  }> {\n    // Calculate subtotal\n    const subtotal = request.items.reduce((sum, item) => sum + item.price * item.quantity, 0);\n\n    // Calculate shipping based on method\n    const shippingRates = {\n      standard: 5.99,\n      express: 15.99,\n      overnight: 29.99,\n    };\n    const shipping = shippingRates[request.shippingMethod];\n\n    // Calculate tax (8.5%)\n    const tax = (subtotal + shipping) * 0.085;\n\n    // Calculate total\n    const total = subtotal + shipping + tax;\n\n    // Estimate delivery\n    const today = new Date();\n    const deliveryDays = {\n      standard: 5,\n      express: 2,\n      overnight: 1,\n    };\n    const estimatedDelivery = new Date(today);\n    estimatedDelivery.setDate(today.getDate() + deliveryDays[request.shippingMethod]);\n\n    return {\n      orderId: `ORD-${Date.now()}-${request.customerId}`,\n      items: request.items,\n      subtotal: Math.round(subtotal * 100) / 100,\n      shipping,\n      tax: Math.round(tax * 100) / 100,\n      total: Math.round(total * 100) / 100,\n      estimatedDelivery,\n    };\n  }",
      "signature": "async function processOrderWithShipping(request: OrderRequest)",
      "filePath": "examples/typescript-extraction-demo/src/services/business-logic.ts",
      "startLine": 101,
      "endLine": 146,
      "dependencies": {
        "@lilypad/typescript-sdk": "*"
      },
      "selfContainedCode": "// Type dependencies\nexport interface OrderRequest {\n  items: OrderItem[];\n  customerId: string;\n  shippingMethod: 'standard' | 'express' | 'overnight';\n}\nexport interface OrderItem {\n  id: string;\n  name: string;\n  price: number;\n  quantity: number;\n}\n\n// Main function\nasync function processOrderWithShipping(request: OrderRequest): Promise<{\n    orderId: string;\n    items: OrderItem[];\n    subtotal: number;\n    shipping: number;\n    tax: number;\n    total: number;\n    estimatedDelivery: Date;\n  }> {\n    // Calculate subtotal\n    const subtotal = request.items.reduce((sum, item) => sum + item.price * item.quantity, 0);\n\n    // Calculate shipping based on method\n    const shippingRates = {\n      standard: 5.99,\n      express: 15.99,\n      overnight: 29.99,\n    };\n    const shipping = shippingRates[request.shippingMethod];\n\n    // Calculate tax (8.5%)\n    const tax = (subtotal + shipping) * 0.085;\n\n    // Calculate total\n    const total = subtotal + shipping + tax;\n\n    // Estimate delivery\n    const today = new Date();\n    const deliveryDays = {\n      standard: 5,\n      express: 2,\n      overnight: 1,\n    };\n    const estimatedDelivery = new Date(today);\n    estimatedDelivery.setDate(today.getDate() + deliveryDays[request.shippingMethod]);\n\n    return {\n      orderId: `ORD-${Date.now()}-${request.customerId}`,\n      items: request.items,\n      subtotal: Math.round(subtotal * 100) / 100,\n      shipping,\n      tax: Math.round(tax * 100) / 100,\n      total: Math.round(total * 100) / 100,\n      estimatedDelivery,\n    };\n  }"
    },
    "0cfd3d3d2f2ac092c4ed2180cba339041c62881cd55796bec5d675bba1465114": {
      "name": "validateUser",
      "hash": "0cfd3d3d2f2ac092c4ed2180cba339041c62881cd55796bec5d675bba1465114",
      "sourceCode": "<T extends { email: string; age: number }>(\n    userData: T & { country: string },\n  ): ValidationResult<T> => {\n    const errors: string[] = [];\n\n    // Email validation\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    if (!emailRegex.test(userData.email)) {\n      errors.push('Invalid email format');\n    }\n\n    // Age validation\n    if (userData.age < 18) {\n      errors.push('User must be 18 or older');\n    }\n\n    if (userData.age > 120) {\n      errors.push('Invalid age');\n    }\n\n    // Country validation\n    const allowedCountries = ['US', 'CA', 'UK', 'AU', 'NZ'];\n    if (!allowedCountries.includes(userData.country)) {\n      errors.push(`Country must be one of: ${allowedCountries.join(', ')}`);\n    }\n\n    return {\n      isValid: errors.length === 0,\n      data: errors.length === 0 ? userData : undefined,\n      errors: errors.length > 0 ? errors : undefined,\n    };\n  }",
      "signature": "(userData: T & { country: string }) => ...",
      "filePath": "examples/typescript-extraction-demo/src/services/business-logic.ts",
      "startLine": 154,
      "endLine": 185,
      "dependencies": {
        "@lilypad/typescript-sdk": "*"
      },
      "selfContainedCode": "// Type dependencies\nexport type ValidationResult<T> = {\n  isValid: boolean;\n  data?: T;\n  errors?: string[];\n};\n\n// Main function\n<T extends { email: string; age: number }>(\n    userData: T & { country: string },\n  ): ValidationResult<T> => {\n    const errors: string[] = [];\n\n    // Email validation\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    if (!emailRegex.test(userData.email)) {\n      errors.push('Invalid email format');\n    }\n\n    // Age validation\n    if (userData.age < 18) {\n      errors.push('User must be 18 or older');\n    }\n\n    if (userData.age > 120) {\n      errors.push('Invalid age');\n    }\n\n    // Country validation\n    const allowedCountries = ['US', 'CA', 'UK', 'AU', 'NZ'];\n    if (!allowedCountries.includes(userData.country)) {\n      errors.push(`Country must be one of: ${allowedCountries.join(', ')}`);\n    }\n\n    return {\n      isValid: errors.length === 0,\n      data: errors.length === 0 ? userData : undefined,\n      errors: errors.length > 0 ? errors : undefined,\n    };\n  }"
    },
    "f94f143124a175456154a1d7d74937c872b12313c3cf29062f8e11343042cbb2": {
      "name": "generateReport",
      "hash": "f94f143124a175456154a1d7d74937c872b12313c3cf29062f8e11343042cbb2",
      "sourceCode": "async (\n    data: number[],\n  ): Promise<{\n    count: number;\n    sum: number;\n    average: number;\n    min: number;\n    max: number;\n    median: number;\n    standardDeviation: number;\n  }> => {\n    // Basic statistics\n    const count = data.length;\n    const sum = data.reduce((acc, val) => acc + val, 0);\n    const average = sum / count;\n    const min = Math.min(...data);\n    const max = Math.max(...data);\n\n    // Calculate median\n    const sorted = [...data].sort((a, b) => a - b);\n    const median =\n      count % 2 === 0\n        ? (sorted[count / 2 - 1] + sorted[count / 2]) / 2\n        : sorted[Math.floor(count / 2)];\n\n    // Calculate standard deviation\n    const squaredDifferences = data.map((value) => Math.pow(value - average, 2));\n    const avgSquaredDiff = squaredDifferences.reduce((acc, val) => acc + val, 0) / count;\n    const standardDeviation = Math.sqrt(avgSquaredDiff);\n\n    // Simulate async operation\n    await new Promise((resolve) => setTimeout(resolve, 100));\n\n    return {\n      count,\n      sum,\n      average: Math.round(average * 100) / 100,\n      min,\n      max,\n      median,\n      standardDeviation: Math.round(standardDeviation * 100) / 100,\n    };\n  }",
      "signature": "async (data: number[]) => ...",
      "filePath": "examples/typescript-extraction-demo/src/services/business-logic.ts",
      "startLine": 193,
      "endLine": 235,
      "dependencies": {
        "@lilypad/typescript-sdk": "*"
      },
      "selfContainedCode": "// Main function\nasync (\n    data: number[],\n  ): Promise<{\n    count: number;\n    sum: number;\n    average: number;\n    min: number;\n    max: number;\n    median: number;\n    standardDeviation: number;\n  }> => {\n    // Basic statistics\n    const count = data.length;\n    const sum = data.reduce((acc, val) => acc + val, 0);\n    const average = sum / count;\n    const min = Math.min(...data);\n    const max = Math.max(...data);\n\n    // Calculate median\n    const sorted = [...data].sort((a, b) => a - b);\n    const median =\n      count % 2 === 0\n        ? (sorted[count / 2 - 1] + sorted[count / 2]) / 2\n        : sorted[Math.floor(count / 2)];\n\n    // Calculate standard deviation\n    const squaredDifferences = data.map((value) => Math.pow(value - average, 2));\n    const avgSquaredDiff = squaredDifferences.reduce((acc, val) => acc + val, 0) / count;\n    const standardDeviation = Math.sqrt(avgSquaredDiff);\n\n    // Simulate async operation\n    await new Promise((resolve) => setTimeout(resolve, 100));\n\n    return {\n      count,\n      sum,\n      average: Math.round(average * 100) / 100,\n      min,\n      max,\n      median,\n      standardDeviation: Math.round(standardDeviation * 100) / 100,\n    };\n  }"
    },
    "aaeb655ad0e647a85d5b470a2e12ab83eb7e9c17f0602b06db4a70259862b4ec": {
      "name": "answerQuestion",
      "hash": "aaeb655ad0e647a85d5b470a2e12ab83eb7e9c17f0602b06db4a70259862b4ec",
      "sourceCode": "async (question: string): Promise<string> => {\n    console.log(`Answering question: ${question}`);\n\n    // This OpenAI call will be automatically traced with auto_llm\n    const completion = await openai.chat.completions.create({\n      model: 'gpt-4o-mini',\n      messages: [\n        {\n          role: 'user',\n          content: `Answer this question concisely: ${question}`,\n        },\n      ],\n    });\n\n    return completion.choices[0].message.content || 'No answer available';\n  }",
      "signature": "async (question: string) => ...",
      "filePath": "examples/typescript-extraction-demo/src/index.ts",
      "startLine": 72,
      "endLine": 87,
      "dependencies": {
        "dotenv": "*",
        "@lilypad/typescript-sdk": "*",
        "openai": "*",
        "./utils/display": "*"
      },
      "selfContainedCode": "// External imports\nimport { OpenAI } from 'openai';\n\n// Variable and class dependencies\nconst openai = new OpenAI({\n  apiKey: process.env.OPENAI_API_KEY,\n});\n\n// Main function\nasync (question: string): Promise<string> => {\n    console.log(`Answering question: ${question}`);\n\n    // This OpenAI call will be automatically traced with auto_llm\n    const completion = await openai.chat.completions.create({\n      model: 'gpt-4o-mini',\n      messages: [\n        {\n          role: 'user',\n          content: `Answer this question concisely: ${question}`,\n        },\n      ],\n    });\n\n    return completion.choices[0].message.content || 'No answer available';\n  }"
    },
    "0a151b0d80191104c38f34dd4fb5afd8c2cfa8b5d054d6f77b483623c44808d9": {
      "name": "calculateTotal",
      "hash": "0a151b0d80191104c38f34dd4fb5afd8c2cfa8b5d054d6f77b483623c44808d9",
      "sourceCode": "function (products: Product[], user: User) {\n    console.log(`Processing order for: ${formatUser(user)}`);\n\n    let subtotal = 0;\n    for (const product of products) {\n      const discount = calculateDiscountRate(user);\n      const discountedPrice = product.price * (1 - discount);\n      subtotal += discountedPrice;\n      console.log(\n        `- ${product.name}: ${formatCurrency(discountedPrice)} (${(discount * 100).toFixed(0)}% off)`,\n      );\n    }\n\n    const tax = subtotal * TAX_RATE;\n    const total = subtotal + tax;\n\n    console.log(`Subtotal: ${formatCurrency(subtotal)}`);\n    console.log(`Tax: ${formatCurrency(tax)}`);\n    console.log(`Total: ${formatCurrency(total)}`);\n\n    return total;\n  }",
      "signature": "function function(products: Product[], user: User)",
      "filePath": "examples/typescript-extraction-demo/src/index.ts",
      "startLine": 97,
      "endLine": 118,
      "dependencies": {
        "dotenv": "*",
        "@lilypad/typescript-sdk": "*",
        "openai": "*",
        "./utils/display": "*"
      },
      "selfContainedCode": "// Type dependencies\ninterface Product {\n  id: string;\n  name: string;\n  price: number;\n}\ninterface User {\n  name: string;\n  age: number;\n  premium: boolean;\n}\n\n// Variable and class dependencies\nconst TAX_RATE = 0.08;\nconst SENIOR_DISCOUNT = 0.1;\nconst PREMIUM_DISCOUNT = 0.15;\n\n// Function dependencies\nfunction formatUser(user: User): string {\n  return `${user.name} (${user.age} years old)`;\n}\nfunction calculateDiscountRate(user: User): number {\n  if (user.age >= 65) return SENIOR_DISCOUNT;\n  if (user.premium) return PREMIUM_DISCOUNT;\n  return 0;\n}\nfunction formatCurrency(amount: number): string {\n  return `$${amount.toFixed(2)}`;\n}\n\n// Main function\nfunction (products: Product[], user: User) {\n    console.log(`Processing order for: ${formatUser(user)}`);\n\n    let subtotal = 0;\n    for (const product of products) {\n      const discount = calculateDiscountRate(user);\n      const discountedPrice = product.price * (1 - discount);\n      subtotal += discountedPrice;\n      console.log(\n        `- ${product.name}: ${formatCurrency(discountedPrice)} (${(discount * 100).toFixed(0)}% off)`,\n      );\n    }\n\n    const tax = subtotal * TAX_RATE;\n    const total = subtotal + tax;\n\n    console.log(`Subtotal: ${formatCurrency(subtotal)}`);\n    console.log(`Tax: ${formatCurrency(tax)}`);\n    console.log(`Total: ${formatCurrency(total)}`);\n\n    return total;\n  }"
    },
    "843a0a62c3622c826b09c3dcc63d74890dde89b9ead58b3d23fbbb57894f19e1": {
      "name": "analyzeOrderSentiment",
      "hash": "843a0a62c3622c826b09c3dcc63d74890dde89b9ead58b3d23fbbb57894f19e1",
      "sourceCode": "async (\n    orderFeedback: string,\n  ): Promise<{\n    sentiment: 'positive' | 'neutral' | 'negative';\n    confidence: number;\n    summary: string;\n  }> => {\n    const response = await openai.chat.completions.create({\n      model: 'gpt-4o-mini',\n      messages: [\n        {\n          role: 'system',\n          content:\n            'Analyze the sentiment of customer feedback. Return JSON with sentiment (positive/neutral/negative), confidence (0-1), and a brief summary.',\n        },\n        {\n          role: 'user',\n          content: orderFeedback,\n        },\n      ],\n      response_format: { type: 'json_object' },\n    });\n\n    const result = JSON.parse(response.choices[0].message.content || '{}');\n    return {\n      sentiment: result.sentiment || 'neutral',\n      confidence: result.confidence || 0.5,\n      summary: result.summary || 'No analysis available',\n    };\n  }",
      "signature": "async (orderFeedback: string) => ...",
      "filePath": "examples/typescript-extraction-demo/src/index.ts",
      "startLine": 127,
      "endLine": 156,
      "dependencies": {
        "dotenv": "*",
        "@lilypad/typescript-sdk": "*",
        "openai": "*",
        "./utils/display": "*"
      },
      "selfContainedCode": "// External imports\nimport { OpenAI } from 'openai';\n\n// Variable and class dependencies\nconst openai = new OpenAI({\n  apiKey: process.env.OPENAI_API_KEY,\n});\n\n// Main function\nasync (\n    orderFeedback: string,\n  ): Promise<{\n    sentiment: 'positive' | 'neutral' | 'negative';\n    confidence: number;\n    summary: string;\n  }> => {\n    const response = await openai.chat.completions.create({\n      model: 'gpt-4o-mini',\n      messages: [\n        {\n          role: 'system',\n          content:\n            'Analyze the sentiment of customer feedback. Return JSON with sentiment (positive/neutral/negative), confidence (0-1), and a brief summary.',\n        },\n        {\n          role: 'user',\n          content: orderFeedback,\n        },\n      ],\n      response_format: { type: 'json_object' },\n    });\n\n    const result = JSON.parse(response.choices[0].message.content || '{}');\n    return {\n      sentiment: result.sentiment || 'neutral',\n      confidence: result.confidence || 0.5,\n      summary: result.summary || 'No analysis available',\n    };\n  }"
    },
    "4ae2274c6f8610c39a0e0da6059587c56b0d68e8983cd68386d36909971e6079": {
      "name": "calculateOrderTotal",
      "hash": "4ae2274c6f8610c39a0e0da6059587c56b0d68e8983cd68386d36909971e6079",
      "sourceCode": "async (\n    order: Order,\n  ): Promise<{\n    subtotal: number;\n    discount: number;\n    tax: number;\n    total: number;\n  }> => {\n    console.log(`Calculating total for order ${order.id}`);\n\n    // Calculate subtotal\n    const subtotal = order.items.reduce((sum, item) => sum + item.product.price * item.quantity, 0);\n\n    // Apply customer tier discount\n    let discountRate = 0;\n    switch (order.customer.tier) {\n      case 'bronze':\n        discountRate = 0.05;\n        break;\n      case 'silver':\n        discountRate = 0.1;\n        break;\n      case 'gold':\n        discountRate = 0.15;\n        break;\n    }\n    const discount = subtotal * discountRate;\n\n    // Calculate tax (8%)\n    const taxableAmount = subtotal - discount;\n    const tax = taxableAmount * 0.08;\n\n    // Final total\n    const total = taxableAmount + tax;\n\n    return {\n      subtotal: Math.round(subtotal * 100) / 100,\n      discount: Math.round(discount * 100) / 100,\n      tax: Math.round(tax * 100) / 100,\n      total: Math.round(total * 100) / 100,\n    };\n  }",
      "signature": "async (order: Order) => ...",
      "filePath": "examples/user-project/src/index.ts",
      "startLine": 42,
      "endLine": 83,
      "dependencies": {
        "@lilypad/typescript-sdk": "*"
      },
      "selfContainedCode": "// Type dependencies\ninterface Order {\n  id: string;\n  items: OrderItem[];\n  customer: Customer;\n  createdAt: Date;\n}\n\n// Main function\nasync (\n    order: Order,\n  ): Promise<{\n    subtotal: number;\n    discount: number;\n    tax: number;\n    total: number;\n  }> => {\n    console.log(`Calculating total for order ${order.id}`);\n\n    // Calculate subtotal\n    const subtotal = order.items.reduce((sum, item) => sum + item.product.price * item.quantity, 0);\n\n    // Apply customer tier discount\n    let discountRate = 0;\n    switch (order.customer.tier) {\n      case 'bronze':\n        discountRate = 0.05;\n        break;\n      case 'silver':\n        discountRate = 0.1;\n        break;\n      case 'gold':\n        discountRate = 0.15;\n        break;\n    }\n    const discount = subtotal * discountRate;\n\n    // Calculate tax (8%)\n    const taxableAmount = subtotal - discount;\n    const tax = taxableAmount * 0.08;\n\n    // Final total\n    const total = taxableAmount + tax;\n\n    return {\n      subtotal: Math.round(subtotal * 100) / 100,\n      discount: Math.round(discount * 100) / 100,\n      tax: Math.round(tax * 100) / 100,\n      total: Math.round(total * 100) / 100,\n    };\n  }"
    },
    "f6419839691aefdd2b46f225e8438b0ed05aa9799ba020b5fccf083815795996": {
      "name": "filterProducts",
      "hash": "f6419839691aefdd2b46f225e8438b0ed05aa9799ba020b5fccf083815795996",
      "sourceCode": "<T extends Product>(products: T[], predicate: (product: T) => boolean): T[] => {\n    console.log(`Filtering ${products.length} products`);\n    return products.filter(predicate);\n  }",
      "signature": "(products: T[], predicate: (product: T) => boolean) => ...",
      "filePath": "examples/user-project/src/index.ts",
      "startLine": 93,
      "endLine": 96,
      "dependencies": {
        "@lilypad/typescript-sdk": "*"
      },
      "selfContainedCode": "// Type dependencies\ninterface Product {\n  id: string;\n  name: string;\n  price: number;\n  category: 'electronics' | 'clothing' | 'food';\n}\n\n// Main function\n<T extends Product>(products: T[], predicate: (product: T) => boolean): T[] => {\n    console.log(`Filtering ${products.length} products`);\n    return products.filter(predicate);\n  }"
    },
    "7164b371e0e70c62ce88841b5ba5289384333c14f1308f6b516c963cd676d2e3": {
      "name": "processInventory",
      "hash": "7164b371e0e70c62ce88841b5ba5289384333c14f1308f6b516c963cd676d2e3",
      "sourceCode": "async ({\n    products,\n    updates,\n  }: {\n    products: Map<string, Product>;\n    updates: Array<{\n      productId: string;\n      quantity: number;\n      operation: 'add' | 'remove' | 'set';\n    }>;\n  }): Promise<Map<string, number>> => {\n    const inventory = new Map<string, number>();\n\n    for (const update of updates) {\n      const current = inventory.get(update.productId) || 0;\n\n      switch (update.operation) {\n        case 'add':\n          inventory.set(update.productId, current + update.quantity);\n          break;\n        case 'remove':\n          inventory.set(update.productId, Math.max(0, current - update.quantity));\n          break;\n        case 'set':\n          inventory.set(update.productId, update.quantity);\n          break;\n      }\n    }\n\n    return inventory;\n  }",
      "signature": "async ({\n    products,\n    updates,\n  }: {\n    products: Map<string, Product>;\n    updates: Array<{\n      productId: string;\n      quantity: number;\n      operation: 'add' | 'remove' | 'set';\n    }>;\n  }) => ...",
      "filePath": "examples/user-project/src/index.ts",
      "startLine": 102,
      "endLine": 132,
      "dependencies": {
        "@lilypad/typescript-sdk": "*"
      },
      "selfContainedCode": "// Type dependencies\ninterface Product {\n  id: string;\n  name: string;\n  price: number;\n  category: 'electronics' | 'clothing' | 'food';\n}\n\n// Main function\nasync ({\n    products,\n    updates,\n  }: {\n    products: Map<string, Product>;\n    updates: Array<{\n      productId: string;\n      quantity: number;\n      operation: 'add' | 'remove' | 'set';\n    }>;\n  }): Promise<Map<string, number>> => {\n    const inventory = new Map<string, number>();\n\n    for (const update of updates) {\n      const current = inventory.get(update.productId) || 0;\n\n      switch (update.operation) {\n        case 'add':\n          inventory.set(update.productId, current + update.quantity);\n          break;\n        case 'remove':\n          inventory.set(update.productId, Math.max(0, current - update.quantity));\n          break;\n        case 'set':\n          inventory.set(update.productId, update.quantity);\n          break;\n      }\n    }\n\n    return inventory;\n  }"
    }
  }
}