{
  "openapi": "3.1.0",
  "info": {
    "title": "FastAPI",
    "version": "0.1.0"
  },
  "paths": {
    "/ee/projects/{project_uuid}/annotations": {
      "post": {
        "summary": "Create Annotations",
        "description": "Create an annotation.\n\nArgs:\n    project_uuid: The project UUID.\n    annotations_service: The annotation service.\n    project_service: The project service.\n    annotations_create: The annotation create model.\n\nReturns:\n    AnnotationPublic: The created annotation.\n\nRaises:\n    HTTPException: If the span has already been assigned to a user and has\n    not been labeled yet.",
        "operationId": "create_annotations_ee_projects__project_uuid__annotations_post",
        "security": [
          {
            "OAuth2PasswordBearer": []
          },
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "project_uuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Project Uuid"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AnnotationCreate"
                },
                "title": "Annotations Create"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AnnotationPublic"
                  },
                  "title": "Response Create Annotations Ee Projects  Project Uuid  Annotations Post"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "Get Annotations By Project",
        "description": "Get annotations by project.",
        "operationId": "get_annotations_by_project_ee_projects__project_uuid__annotations_get",
        "security": [
          {
            "OAuth2PasswordBearer": []
          },
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "project_uuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Project Uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AnnotationPublic"
                  },
                  "title": "Response Get Annotations By Project Ee Projects  Project Uuid  Annotations Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/ee/projects/{project_uuid}/annotations/{annotation_uuid}": {
      "patch": {
        "summary": "Update Annotation",
        "description": "Update an annotation.",
        "operationId": "update_annotation_ee_projects__project_uuid__annotations__annotation_uuid__patch",
        "security": [
          {
            "OAuth2PasswordBearer": []
          },
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "annotation_uuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Annotation Uuid"
            }
          },
          {
            "name": "project_uuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Project Uuid"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AnnotationUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AnnotationPublic"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Annotation",
        "description": "Delete an annotation.",
        "operationId": "delete_annotation_ee_projects__project_uuid__annotations__annotation_uuid__delete",
        "security": [
          {
            "OAuth2PasswordBearer": []
          },
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "annotation_uuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Annotation Uuid"
            }
          },
          {
            "name": "project_uuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Project Uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean",
                  "title": "Response Delete Annotation Ee Projects  Project Uuid  Annotations  Annotation Uuid  Delete"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/ee/projects/{project_uuid}/functions/{function_uuid}/annotations": {
      "get": {
        "summary": "Get Annotations By Functions",
        "description": "Get annotations by functions.",
        "operationId": "get_annotations_by_functions_ee_projects__project_uuid__functions__function_uuid__annotations_get",
        "security": [
          {
            "OAuth2PasswordBearer": []
          },
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "project_uuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Project Uuid"
            }
          },
          {
            "name": "function_uuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Function Uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AnnotationPublic"
                  },
                  "title": "Response Get Annotations By Functions Ee Projects  Project Uuid  Functions  Function Uuid  Annotations Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/ee/projects/{project_uuid}/spans/{span_uuid}/annotations": {
      "get": {
        "summary": "Get Annotations By Spans",
        "description": "Get annotations by functions.",
        "operationId": "get_annotations_by_spans_ee_projects__project_uuid__spans__span_uuid__annotations_get",
        "security": [
          {
            "OAuth2PasswordBearer": []
          },
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "project_uuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Project Uuid"
            }
          },
          {
            "name": "span_uuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Span Uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AnnotationPublic"
                  },
                  "title": "Response Get Annotations By Spans Ee Projects  Project Uuid  Spans  Span Uuid  Annotations Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/ee/projects/{project_uuid}/functions/{function_uuid}/annotations/metrics": {
      "get": {
        "summary": "Get Annotation Metrics By Function",
        "description": "Get annotation metrics by function.",
        "operationId": "get_annotation_metrics_by_function_ee_projects__project_uuid__functions__function_uuid__annotations_metrics_get",
        "security": [
          {
            "OAuth2PasswordBearer": []
          },
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "function_uuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Function Uuid"
            }
          },
          {
            "name": "project_uuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Project Uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AnnotationMetrics"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/ee/projects/{project_uuid}/spans/{span_uuid}/generate-annotation": {
      "get": {
        "summary": "Generate Annotation",
        "description": "Stream function.",
        "operationId": "generate_annotation_ee_projects__project_uuid__spans__span_uuid__generate_annotation_get",
        "security": [
          {
            "OAuth2PasswordBearer": []
          },
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "span_uuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Span Uuid"
            }
          },
          {
            "name": "project_uuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Project Uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/ee/projects/{project_uuid}/functions/{function_uuid}/playground": {
      "post": {
        "summary": "Run Function in Playground",
        "description": "Executes a function with specified parameters in a secure playground environment.",
        "operationId": "run_playground_ee_projects__project_uuid__functions__function_uuid__playground_post",
        "security": [
          {
            "OAuth2PasswordBearer": []
          },
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "project_uuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Project Uuid"
            }
          },
          {
            "name": "function_uuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Function Uuid"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PlaygroundParameters"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Function executed successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlaygroundSuccessResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlaygroundErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Function not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlaygroundErrorResponse"
                }
              }
            }
          },
          "408": {
            "description": "Request Timeout",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlaygroundErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlaygroundErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/ee/organizations/license": {
      "get": {
        "summary": "Get License",
        "description": "Get the license information for the organization",
        "operationId": "get_license_ee_organizations_license_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LicenseInfo"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          },
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/ee/user-organizations/users": {
      "get": {
        "summary": "Get Users By Organization",
        "description": "Get all users of an organization.",
        "operationId": "get_users_by_organization_ee_user_organizations_users_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/UserPublic"
                  },
                  "type": "array",
                  "title": "Response Get Users By Organization Ee User Organizations Users Get"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          },
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/ee/user-organizations": {
      "get": {
        "summary": "Get User Organizations",
        "description": "Get all user organizations.",
        "operationId": "get_user_organizations_ee_user_organizations_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/UserOrganizationTable"
                  },
                  "type": "array",
                  "title": "Response Get User Organizations Ee User Organizations Get"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          },
          {
            "APIKeyHeader": []
          }
        ]
      },
      "post": {
        "summary": "Create User Organization",
        "description": "Create user organization",
        "operationId": "create_user_organization_ee_user_organizations_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateUserOrganizationToken"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserPublic"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          },
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/ee/user-organizations/{user_organization_uuid}": {
      "patch": {
        "summary": "Update User Organization",
        "description": "Updates user organization",
        "operationId": "update_user_organization_ee_user_organizations__user_organization_uuid__patch",
        "security": [
          {
            "OAuth2PasswordBearer": []
          },
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "user_organization_uuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "User Organization Uuid"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserOrganizationUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserOrganizationTable"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete User Organizations",
        "description": "Delete user organization by uuid",
        "operationId": "delete_user_organizations_ee_user_organizations__user_organization_uuid__delete",
        "security": [
          {
            "OAuth2PasswordBearer": []
          },
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "user_organization_uuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "User Organization Uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean",
                  "title": "Response Delete User Organizations Ee User Organizations  User Organization Uuid  Delete"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api-keys": {
      "get": {
        "summary": "Get Api Keys",
        "description": "Get an API keys.",
        "operationId": "get_api_keys_api_keys_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/APIKeyPublic"
                  },
                  "type": "array",
                  "title": "Response Get Api Keys Api Keys Get"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          },
          {
            "APIKeyHeader": []
          }
        ]
      },
      "post": {
        "summary": "Post Api Key",
        "description": "Create an API key and returns the full key.",
        "operationId": "post_api_key_api_keys_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/APIKeyCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "title": "Response Post Api Key Api Keys Post"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          },
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/api-keys/{api_key_uuid}": {
      "delete": {
        "summary": "Delete Api Key",
        "description": "Delete an API key.",
        "operationId": "delete_api_key_api_keys__api_key_uuid__delete",
        "security": [
          {
            "OAuth2PasswordBearer": []
          },
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "api_key_uuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Api Key Uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean",
                  "title": "Response Delete Api Key Api Keys  Api Key Uuid  Delete"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/stripe/customer-portal": {
      "post": {
        "summary": "Create Customer Portal",
        "operationId": "create_customer_portal_stripe_customer_portal_post",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "title": "Response Create Customer Portal Stripe Customer Portal Post"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          },
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/stripe/create-checkout-session": {
      "post": {
        "summary": "Create Checkout Session",
        "operationId": "create_checkout_session_stripe_create_checkout_session_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StripeCheckoutSession"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "title": "Response Create Checkout Session Stripe Create Checkout Session Post"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          },
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/webhooks/stripe": {
      "post": {
        "summary": "Stripe Webhook",
        "description": "Handle Stripe webhook events.\n\nThis endpoint receives webhook events from Stripe and updates the billing records.",
        "operationId": "stripe_webhook_webhooks_stripe_post",
        "parameters": [
          {
            "name": "Stripe-Signature",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Stripe-Signature"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StripeWebhookResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/projects/{project_uuid}/functions/name/{function_name}/version/{version_num}": {
      "get": {
        "summary": "Get Function By Version",
        "description": "Get function by name.",
        "operationId": "get_function_by_version_projects__project_uuid__functions_name__function_name__version__version_num__get",
        "security": [
          {
            "OAuth2PasswordBearer": []
          },
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "project_uuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Project Uuid"
            }
          },
          {
            "name": "function_name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Function Name"
            }
          },
          {
            "name": "version_num",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Version Num"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FunctionPublic"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/projects/{project_uuid}/functions/name/{function_name}": {
      "get": {
        "summary": "Get Functions By Name",
        "description": "Get function by name.",
        "operationId": "get_functions_by_name_projects__project_uuid__functions_name__function_name__get",
        "security": [
          {
            "OAuth2PasswordBearer": []
          },
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "project_uuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Project Uuid"
            }
          },
          {
            "name": "function_name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Function Name"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FunctionPublic"
                  },
                  "title": "Response Get Functions By Name Projects  Project Uuid  Functions Name  Function Name  Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/projects/{project_uuid}/functions/name/{function_name}/environments": {
      "get": {
        "summary": "Get Deployed Function By Names",
        "description": "Get the deployed function by function name and environment name.",
        "operationId": "get_deployed_function_by_names_projects__project_uuid__functions_name__function_name__environments_get",
        "security": [
          {
            "OAuth2PasswordBearer": []
          },
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "project_uuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Project Uuid"
            }
          },
          {
            "name": "function_name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Function Name"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FunctionPublic"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/projects/{project_uuid}/versioned-functions": {
      "post": {
        "summary": "Create Versioned Function",
        "description": "Create a managed function.",
        "operationId": "create_versioned_function_projects__project_uuid__versioned_functions_post",
        "security": [
          {
            "OAuth2PasswordBearer": []
          },
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "project_uuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Project Uuid"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FunctionCreate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FunctionPublic"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/projects/{project_uuid}/functions/metadata/names": {
      "get": {
        "summary": "Get Unique Function Names",
        "description": "Get all unique function names.",
        "operationId": "get_unique_function_names_projects__project_uuid__functions_metadata_names_get",
        "security": [
          {
            "OAuth2PasswordBearer": []
          },
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "project_uuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Project Uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "title": "Response Get Unique Function Names Projects  Project Uuid  Functions Metadata Names Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/projects/{project_uuid}/functions/metadata/names/versions": {
      "get": {
        "summary": "Get Latest Version Unique Function Names",
        "description": "Get all unique function names.",
        "operationId": "get_latest_version_unique_function_names_projects__project_uuid__functions_metadata_names_versions_get",
        "security": [
          {
            "OAuth2PasswordBearer": []
          },
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "project_uuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Project Uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FunctionPublic"
                  },
                  "title": "Response Get Latest Version Unique Function Names Projects  Project Uuid  Functions Metadata Names Versions Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/projects/{project_uuid}/functions/hash/{function_hash}": {
      "get": {
        "summary": "Get Function By Hash",
        "description": "Get function by hash.",
        "operationId": "get_function_by_hash_projects__project_uuid__functions_hash__function_hash__get",
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "project_uuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Project Uuid"
            }
          },
          {
            "name": "function_hash",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Function Hash"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FunctionPublic"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/projects/{project_uuid}/functions": {
      "get": {
        "summary": "Get Functions",
        "description": "Grab all functions.",
        "operationId": "get_functions_projects__project_uuid__functions_get",
        "security": [
          {
            "OAuth2PasswordBearer": []
          },
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "project_uuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Project Uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FunctionPublic"
                  },
                  "title": "Response Get Functions Projects  Project Uuid  Functions Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create New Function",
        "description": "Create a new function version.",
        "operationId": "create_new_function_projects__project_uuid__functions_post",
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "project_uuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Project Uuid"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FunctionCreate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FunctionPublic"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/projects/{project_uuid}/functions/{function_uuid}": {
      "get": {
        "summary": "Get Function",
        "description": "Grab function by UUID.",
        "operationId": "get_function_projects__project_uuid__functions__function_uuid__get",
        "security": [
          {
            "OAuth2PasswordBearer": []
          },
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "project_uuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Project Uuid"
            }
          },
          {
            "name": "function_uuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Function Uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FunctionPublic"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "Update Function",
        "description": "Update a function.",
        "operationId": "update_function_projects__project_uuid__functions__function_uuid__patch",
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "project_uuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Project Uuid"
            }
          },
          {
            "name": "function_uuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Function Uuid"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FunctionUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FunctionPublic"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Archive Function",
        "description": "Archive a function and delete spans by function UUID.",
        "operationId": "archive_function_projects__project_uuid__functions__function_uuid__delete",
        "security": [
          {
            "OAuth2PasswordBearer": []
          },
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "project_uuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Project Uuid"
            }
          },
          {
            "name": "function_uuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Function Uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean",
                  "title": "Response Archive Function Projects  Project Uuid  Functions  Function Uuid  Delete"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/projects/{project_uuid}/functions/names/{function_name}": {
      "delete": {
        "summary": "Archive Functions By Name",
        "description": "Archive a function by name and delete spans by function name.",
        "operationId": "archive_functions_by_name_projects__project_uuid__functions_names__function_name__delete",
        "security": [
          {
            "OAuth2PasswordBearer": []
          },
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "project_uuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Project Uuid"
            }
          },
          {
            "name": "function_name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Function Name"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean",
                  "title": "Response Archive Functions By Name Projects  Project Uuid  Functions Names  Function Name  Delete"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/organizations-invites/": {
      "get": {
        "summary": "Get Organization Invites",
        "description": "Get an organization invite.",
        "operationId": "get_organization_invites_organizations_invites__get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/OrganizationInvitePublic"
                  },
                  "type": "array",
                  "title": "Response Get Organization Invites Organizations Invites  Get"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          },
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/organizations-invites/{invite_token}": {
      "get": {
        "summary": "Get Organization Invite",
        "description": "Get an organization invite.",
        "operationId": "get_organization_invite_organizations_invites__invite_token__get",
        "security": [
          {
            "OAuth2PasswordBearer": []
          },
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "invite_token",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Invite Token"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationInvitePublic"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/organizations-invites": {
      "post": {
        "summary": "Create Organization Invite",
        "description": "Create an organization invite.",
        "operationId": "create_organization_invite_organizations_invites_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrganizationInviteCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationInvitePublic"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          },
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/organizations-invites/{organization_invite_uuid}": {
      "delete": {
        "summary": "Remove Organization Invite",
        "description": "Remove an organization invite.",
        "operationId": "remove_organization_invite_organizations_invites__organization_invite_uuid__delete",
        "security": [
          {
            "OAuth2PasswordBearer": []
          },
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "organization_invite_uuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Organization Invite Uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean",
                  "title": "Response Remove Organization Invite Organizations Invites  Organization Invite Uuid  Delete"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/projects": {
      "get": {
        "summary": "Get Projects",
        "description": "Get all projects.",
        "operationId": "get_projects_projects_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/ProjectPublic"
                  },
                  "type": "array",
                  "title": "Response Get Projects Projects Get"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          },
          {
            "APIKeyHeader": []
          }
        ]
      },
      "post": {
        "summary": "Create Project",
        "description": "Create a project",
        "operationId": "create_project_projects_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProjectCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectPublic"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          },
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/projects/{project_uuid}": {
      "get": {
        "summary": "Get Project",
        "description": "Get a project.",
        "operationId": "get_project_projects__project_uuid__get",
        "security": [
          {
            "OAuth2PasswordBearer": []
          },
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "project_uuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Project Uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectPublic"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "Patch Project",
        "description": "Update a project.",
        "operationId": "patch_project_projects__project_uuid__patch",
        "security": [
          {
            "OAuth2PasswordBearer": []
          },
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "project_uuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Project Uuid"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProjectCreate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectPublic"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Project",
        "description": "Delete a project",
        "operationId": "delete_project_projects__project_uuid__delete",
        "security": [
          {
            "OAuth2PasswordBearer": []
          },
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "project_uuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Project Uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean",
                  "title": "Response Delete Project Projects  Project Uuid  Delete"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/spans/{span_uuid}": {
      "get": {
        "summary": "Get Span",
        "description": "Get span by uuid.",
        "operationId": "get_span_spans__span_uuid__get",
        "security": [
          {
            "OAuth2PasswordBearer": []
          },
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "span_uuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Span Uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SpanMoreDetails"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "Update Span",
        "description": "Update span by uuid.",
        "operationId": "update_span_spans__span_uuid__patch",
        "security": [
          {
            "OAuth2PasswordBearer": []
          },
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "span_uuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Span Uuid"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SpanUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SpanMoreDetails"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/projects/{project_uuid}/spans/metadata": {
      "get": {
        "summary": "Get Aggregates By Project Uuid",
        "description": "Get aggregated span by project uuid.",
        "operationId": "get_aggregates_by_project_uuid_projects__project_uuid__spans_metadata_get",
        "security": [
          {
            "OAuth2PasswordBearer": []
          },
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "project_uuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Project Uuid"
            }
          },
          {
            "name": "time_frame",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/TimeFrame"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AggregateMetrics"
                  },
                  "title": "Response Get Aggregates By Project Uuid Projects  Project Uuid  Spans Metadata Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/projects/{project_uuid}/spans/{span_id}": {
      "get": {
        "summary": "Get Span By Span Id",
        "description": "Get span by project_uuid and span_id.",
        "operationId": "get_span_by_span_id_projects__project_uuid__spans__span_id__get",
        "security": [
          {
            "OAuth2PasswordBearer": []
          },
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "project_uuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Project Uuid"
            }
          },
          {
            "name": "span_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Span Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SpanMoreDetails"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/projects/{project_uuid}/functions/{function_uuid}/spans/metadata": {
      "get": {
        "summary": "Get Aggregates By Function Uuid",
        "description": "Get aggregated span by function uuid.",
        "operationId": "get_aggregates_by_function_uuid_projects__project_uuid__functions__function_uuid__spans_metadata_get",
        "security": [
          {
            "OAuth2PasswordBearer": []
          },
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "project_uuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Project Uuid"
            }
          },
          {
            "name": "function_uuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Function Uuid"
            }
          },
          {
            "name": "time_frame",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/TimeFrame"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AggregateMetrics"
                  },
                  "title": "Response Get Aggregates By Function Uuid Projects  Project Uuid  Functions  Function Uuid  Spans Metadata Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/projects/{project_uuid}/spans": {
      "get": {
        "summary": "Search Traces",
        "description": "Search for traces in OpenSearch.",
        "operationId": "search_traces_projects__project_uuid__spans_get",
        "security": [
          {
            "OAuth2PasswordBearer": []
          },
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "project_uuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Project Uuid"
            }
          },
          {
            "name": "query_string",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Query String"
            }
          },
          {
            "name": "time_range_start",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Time Range Start"
            }
          },
          {
            "name": "time_range_end",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Time Range End"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 100,
              "title": "Limit"
            }
          },
          {
            "name": "scope",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/Scope"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Scope"
            }
          },
          {
            "name": "type",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Type"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SpanPublic"
                  },
                  "title": "Response Search Traces Projects  Project Uuid  Spans Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/projects/{project_uuid}/spans/{span_uuid}": {
      "delete": {
        "summary": "Delete Spans",
        "description": "Delete spans by UUID.",
        "operationId": "delete_spans_projects__project_uuid__spans__span_uuid__delete",
        "security": [
          {
            "OAuth2PasswordBearer": []
          },
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "project_uuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Project Uuid"
            }
          },
          {
            "name": "span_uuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Span Uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean",
                  "title": "Response Delete Spans Projects  Project Uuid  Spans  Span Uuid  Delete"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/projects/{project_uuid}/functions/{function_uuid}/spans/paginated": {
      "get": {
        "summary": "Get Spans By Function Uuid Paginated",
        "description": "Get spans for a function with pagination (new, non-breaking).",
        "operationId": "get_spans_by_function_uuid_paginated_projects__project_uuid__functions__function_uuid__spans_paginated_get",
        "security": [
          {
            "OAuth2PasswordBearer": []
          },
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "project_uuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Project Uuid"
            }
          },
          {
            "name": "function_uuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Function Uuid"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 500,
              "minimum": 1,
              "default": 50,
              "title": "Limit"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 0,
              "title": "Offset"
            }
          },
          {
            "name": "order",
            "in": "query",
            "required": false,
            "schema": {
              "enum": [
                "asc",
                "desc"
              ],
              "type": "string",
              "examples": [
                "asc",
                "desc"
              ],
              "default": "desc",
              "title": "Order"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Paginated_SpanPublic_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/projects/{project_uuid}/traces/{span_id}/root": {
      "get": {
        "summary": "Get Trace By Span Uuid",
        "description": "Get traces by project UUID.",
        "operationId": "get_trace_by_span_uuid_projects__project_uuid__traces__span_id__root_get",
        "security": [
          {
            "OAuth2PasswordBearer": []
          },
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "project_uuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Project Uuid"
            }
          },
          {
            "name": "span_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Span Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SpanPublic"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/projects/{project_uuid}/traces": {
      "get": {
        "summary": "Get Traces By Project Uuid",
        "description": "Get traces by project UUID.",
        "operationId": "get_traces_by_project_uuid_projects__project_uuid__traces_get",
        "security": [
          {
            "OAuth2PasswordBearer": []
          },
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "project_uuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Project Uuid"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 500,
              "minimum": 1,
              "default": 100,
              "title": "Limit"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 0,
              "title": "Offset"
            }
          },
          {
            "name": "order",
            "in": "query",
            "required": false,
            "schema": {
              "enum": [
                "asc",
                "desc"
              ],
              "type": "string",
              "examples": [
                "asc",
                "desc"
              ],
              "default": "desc",
              "title": "Order"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Paginated_SpanPublic_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Traces",
        "description": "Create span traces.",
        "operationId": "traces_projects__project_uuid__traces_post",
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "project_uuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Project Uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SpanPublic"
                  },
                  "title": "Response Traces Projects  Project Uuid  Traces Post"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/auth/github/callback": {
      "get": {
        "summary": "Github Callback",
        "description": "Callback for GitHub OAuth.\n\nSaves the user and organization or retrieves the user after authenticating\nwith GitHub.",
        "operationId": "github_callback_auth_github_callback_get",
        "parameters": [
          {
            "name": "code",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Code"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserPublic"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/auth/google/callback": {
      "get": {
        "summary": "Google Callback",
        "description": "Callback for Google OAuth.\n\nSaves the user and organization or retrieves the user after authenticating\nwith Google.",
        "operationId": "google_callback_auth_google_callback_get",
        "parameters": [
          {
            "name": "code",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Code"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserPublic"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/users/{activeOrganizationUuid}": {
      "put": {
        "summary": "Update User Active Organization Id",
        "description": "Update users active organization uuid.",
        "operationId": "update_user_active_organization_id_users__activeOrganizationUuid__put",
        "security": [
          {
            "OAuth2PasswordBearer": []
          },
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "activeOrganizationUuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Activeorganizationuuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserPublic"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/users": {
      "patch": {
        "summary": "Update User Keys",
        "description": "Update users keys.",
        "operationId": "update_user_keys_users_patch",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "title": "Data"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserPublic"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          },
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/current-user": {
      "get": {
        "summary": "Get User",
        "description": "Get user.",
        "operationId": "get_user_current_user_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserPublic"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          },
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/organizations": {
      "post": {
        "summary": "Create Organization",
        "description": "Create an organization.",
        "operationId": "create_organization_organizations_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrganizationCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationPublic"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          },
          {
            "APIKeyHeader": []
          }
        ]
      },
      "delete": {
        "summary": "Delete Organization",
        "description": "Delete an organization.",
        "operationId": "delete_organization_organizations_delete",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserPublic"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          },
          {
            "APIKeyHeader": []
          }
        ]
      },
      "patch": {
        "summary": "Update Organization",
        "description": "Update an organization.",
        "operationId": "update_organization_organizations_patch",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrganizationUpdate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationPublic"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          },
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/external-api-keys": {
      "get": {
        "summary": "List External Api Keys",
        "description": "List all external API keys for the user with masked values.",
        "operationId": "list_external_api_keys_external_api_keys_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/ExternalAPIKeyPublic"
                  },
                  "type": "array",
                  "title": "Response List External Api Keys External Api Keys Get"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          },
          {
            "APIKeyHeader": []
          }
        ]
      },
      "post": {
        "summary": "Store External Api Key",
        "description": "Store an external API key for a given service.",
        "operationId": "store_external_api_key_external_api_keys_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExternalAPIKeyCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExternalAPIKeyPublic"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          },
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/external-api-keys/{service_name}": {
      "get": {
        "summary": "Get External Api Key",
        "description": "Retrieve an external API key for a given service.",
        "operationId": "get_external_api_key_external_api_keys__service_name__get",
        "security": [
          {
            "OAuth2PasswordBearer": []
          },
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "service_name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Service Name"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExternalAPIKeyPublic"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "Update External Api Key",
        "description": "Update users keys.",
        "operationId": "update_external_api_key_external_api_keys__service_name__patch",
        "security": [
          {
            "OAuth2PasswordBearer": []
          },
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "service_name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Service Name"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExternalAPIKeyUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExternalAPIKeyPublic"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete External Api Key",
        "description": "Delete an external API key for a given service.",
        "operationId": "delete_external_api_key_external_api_keys__service_name__delete",
        "security": [
          {
            "OAuth2PasswordBearer": []
          },
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "service_name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Service Name"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean",
                  "title": "Response Delete External Api Key External Api Keys  Service Name  Delete"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/environments": {
      "get": {
        "summary": "Get Environments",
        "description": "Get all environments for a project.",
        "operationId": "get_environments_environments_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/EnvironmentPublic"
                  },
                  "type": "array",
                  "title": "Response Get Environments Environments Get"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          },
          {
            "APIKeyHeader": []
          }
        ]
      },
      "post": {
        "summary": "Create Environment",
        "description": "Create a new environment.",
        "operationId": "create_environment_environments_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EnvironmentCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EnvironmentPublic"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          },
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/environments/{environment_uuid}": {
      "get": {
        "summary": "Get Environment",
        "description": "Get environment by UUID.",
        "operationId": "get_environment_environments__environment_uuid__get",
        "security": [
          {
            "OAuth2PasswordBearer": []
          },
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "environment_uuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Environment Uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EnvironmentPublic"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Environment",
        "description": "Delete an environment.",
        "operationId": "delete_environment_environments__environment_uuid__delete",
        "security": [
          {
            "OAuth2PasswordBearer": []
          },
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "environment_uuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Environment Uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean",
                  "title": "Response Delete Environment Environments  Environment Uuid  Delete"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/projects/{project_uuid}/environments/{environment_uuid}/deploy": {
      "post": {
        "summary": "Deploy Function",
        "description": "Deploy a function to an environment.",
        "operationId": "deploy_function_projects__project_uuid__environments__environment_uuid__deploy_post",
        "security": [
          {
            "OAuth2PasswordBearer": []
          },
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "project_uuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Project Uuid"
            }
          },
          {
            "name": "environment_uuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Environment Uuid"
            }
          },
          {
            "name": "function_uuid",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Function Uuid"
            }
          },
          {
            "name": "notes",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Notes"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeploymentPublic"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/projects/{project_uuid}/environments/{environment_uuid}/deployment": {
      "get": {
        "summary": "Get Active Deployment",
        "description": "Get active deployment for an environment.",
        "operationId": "get_active_deployment_projects__project_uuid__environments__environment_uuid__deployment_get",
        "security": [
          {
            "OAuth2PasswordBearer": []
          },
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "project_uuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Project Uuid"
            }
          },
          {
            "name": "environment_uuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Environment Uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeploymentPublic"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/projects/{project_uuid}/environments/{environment_uuid}/function": {
      "get": {
        "summary": "Get Environment Function",
        "description": "Get the currently active function for an environment.",
        "operationId": "get_environment_function_projects__project_uuid__environments__environment_uuid__function_get",
        "security": [
          {
            "OAuth2PasswordBearer": []
          },
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "project_uuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Project Uuid"
            }
          },
          {
            "name": "environment_uuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Environment Uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FunctionPublic"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/projects/{project_uuid}/environments/{environment_uuid}/history": {
      "get": {
        "summary": "Get Deployment History",
        "description": "Get deployment history for an environment.",
        "operationId": "get_deployment_history_projects__project_uuid__environments__environment_uuid__history_get",
        "security": [
          {
            "OAuth2PasswordBearer": []
          },
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "project_uuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Project Uuid"
            }
          },
          {
            "name": "environment_uuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Environment Uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DeploymentPublic"
                  },
                  "title": "Response Get Deployment History Projects  Project Uuid  Environments  Environment Uuid  History Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/user-consents": {
      "post": {
        "summary": "Post User Consent",
        "description": "Store user consent.",
        "operationId": "post_user_consent_user_consents_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserConsentCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserConsentPublic"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          },
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/user-consents/{user_consent_uuid}": {
      "patch": {
        "summary": "Update User Consent",
        "description": "Update user consent.",
        "operationId": "update_user_consent_user_consents__user_consent_uuid__patch",
        "security": [
          {
            "OAuth2PasswordBearer": []
          },
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "user_consent_uuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "User Consent Uuid"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserConsentUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserConsentPublic"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/tags": {
      "get": {
        "summary": "Get Tags",
        "description": "Get all tags.",
        "operationId": "get_tags_tags_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/TagPublic"
                  },
                  "type": "array",
                  "title": "Response Get Tags Tags Get"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          },
          {
            "APIKeyHeader": []
          }
        ]
      },
      "post": {
        "summary": "Create Tag",
        "description": "Create a tag",
        "operationId": "create_tag_tags_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TagCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TagPublic"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          },
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/projects/{project_uuid}/tags": {
      "get": {
        "summary": "Get Tags By Project",
        "description": "Get all tags by project.",
        "operationId": "get_tags_by_project_projects__project_uuid__tags_get",
        "security": [
          {
            "OAuth2PasswordBearer": []
          },
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "project_uuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Project Uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TagPublic"
                  },
                  "title": "Response Get Tags By Project Projects  Project Uuid  Tags Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/tags/{tag_uuid}": {
      "get": {
        "summary": "Get Tag",
        "description": "Get a tag.",
        "operationId": "get_tag_tags__tag_uuid__get",
        "security": [
          {
            "OAuth2PasswordBearer": []
          },
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "tag_uuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Tag Uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TagPublic"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "Patch Tag",
        "description": "Update a tag.",
        "operationId": "patch_tag_tags__tag_uuid__patch",
        "security": [
          {
            "OAuth2PasswordBearer": []
          },
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "tag_uuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Tag Uuid"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TagCreate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TagPublic"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Tag",
        "description": "Delete a tag",
        "operationId": "delete_tag_tags__tag_uuid__delete",
        "security": [
          {
            "OAuth2PasswordBearer": []
          },
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "tag_uuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Tag Uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean",
                  "title": "Response Delete Tag Tags  Tag Uuid  Delete"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/comments": {
      "get": {
        "summary": "Get Comments",
        "description": "Get all comments.",
        "operationId": "get_comments_comments_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/CommentPublic"
                  },
                  "type": "array",
                  "title": "Response Get Comments Comments Get"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          },
          {
            "APIKeyHeader": []
          }
        ]
      },
      "post": {
        "summary": "Create Comment",
        "description": "Create a comment",
        "operationId": "create_comment_comments_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CommentCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommentPublic"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          },
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/spans/{span_uuid}/comments": {
      "get": {
        "summary": "Get Comments By Spans",
        "description": "Get all comments by span.",
        "operationId": "get_comments_by_spans_spans__span_uuid__comments_get",
        "security": [
          {
            "OAuth2PasswordBearer": []
          },
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "span_uuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Span Uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CommentPublic"
                  },
                  "title": "Response Get Comments By Spans Spans  Span Uuid  Comments Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/comments/{comment_uuid}": {
      "get": {
        "summary": "Get Comment",
        "description": "Get a comment.",
        "operationId": "get_comment_comments__comment_uuid__get",
        "security": [
          {
            "OAuth2PasswordBearer": []
          },
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "comment_uuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Comment Uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommentPublic"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "Patch Comment",
        "description": "Update a comment.",
        "operationId": "patch_comment_comments__comment_uuid__patch",
        "security": [
          {
            "OAuth2PasswordBearer": []
          },
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "comment_uuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Comment Uuid"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CommentUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommentPublic"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Comment",
        "description": "Delete a comment",
        "operationId": "delete_comment_comments__comment_uuid__delete",
        "security": [
          {
            "OAuth2PasswordBearer": []
          },
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "comment_uuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Comment Uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean",
                  "title": "Response Delete Comment Comments  Comment Uuid  Delete"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/settings": {
      "get": {
        "summary": "Get Settings Client",
        "description": "Get the configuration.",
        "operationId": "get_settings_client_settings_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SettingsPublic"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "APIKeyCreate": {
        "properties": {
          "name": {
            "type": "string",
            "minLength": 1,
            "title": "Name"
          },
          "expires_at": {
            "type": "string",
            "format": "date-time",
            "title": "Expires At"
          },
          "project_uuid": {
            "type": "string",
            "format": "uuid",
            "title": "Project Uuid"
          },
          "environment_uuid": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "type": "null"
              }
            ],
            "title": "Environment Uuid"
          },
          "key_hash": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Key Hash"
          }
        },
        "type": "object",
        "required": [
          "name",
          "project_uuid"
        ],
        "title": "APIKeyCreate",
        "description": "API key create model"
      },
      "APIKeyPublic": {
        "properties": {
          "name": {
            "type": "string",
            "minLength": 1,
            "title": "Name"
          },
          "expires_at": {
            "type": "string",
            "format": "date-time",
            "title": "Expires At"
          },
          "project_uuid": {
            "type": "string",
            "format": "uuid",
            "title": "Project Uuid"
          },
          "environment_uuid": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "type": "null"
              }
            ],
            "title": "Environment Uuid"
          },
          "uuid": {
            "type": "string",
            "format": "uuid",
            "title": "Uuid"
          },
          "key_hash": {
            "type": "string",
            "title": "Key Hash"
          },
          "user": {
            "$ref": "#/components/schemas/UserPublic"
          },
          "project": {
            "$ref": "#/components/schemas/ProjectPublic"
          },
          "environment": {
            "$ref": "#/components/schemas/EnvironmentPublic"
          }
        },
        "type": "object",
        "required": [
          "name",
          "project_uuid",
          "uuid",
          "key_hash",
          "user",
          "project",
          "environment"
        ],
        "title": "APIKeyPublic",
        "description": "API key public model"
      },
      "AggregateMetrics": {
        "properties": {
          "total_cost": {
            "type": "number",
            "title": "Total Cost"
          },
          "total_input_tokens": {
            "type": "number",
            "title": "Total Input Tokens"
          },
          "total_output_tokens": {
            "type": "number",
            "title": "Total Output Tokens"
          },
          "average_duration_ms": {
            "type": "number",
            "title": "Average Duration Ms"
          },
          "span_count": {
            "type": "integer",
            "title": "Span Count"
          },
          "start_date": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Start Date"
          },
          "end_date": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "End Date"
          },
          "function_uuid": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "type": "null"
              }
            ],
            "title": "Function Uuid"
          }
        },
        "type": "object",
        "required": [
          "total_cost",
          "total_input_tokens",
          "total_output_tokens",
          "average_duration_ms",
          "span_count",
          "start_date",
          "end_date",
          "function_uuid"
        ],
        "title": "AggregateMetrics",
        "description": "Aggregated metrics for spans"
      },
      "AnnotationCreate": {
        "properties": {
          "span_uuid": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "type": "null"
              }
            ],
            "title": "Span Uuid"
          },
          "project_uuid": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "type": "null"
              }
            ],
            "title": "Project Uuid"
          },
          "function_uuid": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "type": "null"
              }
            ],
            "title": "Function Uuid"
          },
          "label": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Label"
              },
              {
                "type": "null"
              }
            ]
          },
          "reasoning": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Reasoning"
          },
          "type": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/EvaluationType"
              },
              {
                "type": "null"
              }
            ]
          },
          "data": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Data"
          },
          "assigned_to": {
            "anyOf": [
              {
                "items": {
                  "type": "string",
                  "format": "uuid"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Assigned To"
          },
          "assignee_email": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Assignee Email"
          }
        },
        "type": "object",
        "title": "AnnotationCreate",
        "description": "Annotation create model."
      },
      "AnnotationMetrics": {
        "properties": {
          "function_uuid": {
            "type": "string",
            "format": "uuid",
            "title": "Function Uuid"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          },
          "success_count": {
            "type": "integer",
            "title": "Success Count"
          }
        },
        "type": "object",
        "required": [
          "function_uuid",
          "total_count",
          "success_count"
        ],
        "title": "AnnotationMetrics",
        "description": "Annotation metrics model."
      },
      "AnnotationPublic": {
        "properties": {
          "label": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Label"
              },
              {
                "type": "null"
              }
            ]
          },
          "reasoning": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Reasoning"
          },
          "type": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/EvaluationType"
              },
              {
                "type": "null"
              }
            ],
            "default": "manual"
          },
          "data": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Data"
          },
          "assigned_to": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "type": "null"
              }
            ],
            "title": "Assigned To"
          },
          "uuid": {
            "type": "string",
            "format": "uuid",
            "title": "Uuid"
          },
          "project_uuid": {
            "type": "string",
            "format": "uuid",
            "title": "Project Uuid"
          },
          "span_uuid": {
            "type": "string",
            "format": "uuid",
            "title": "Span Uuid"
          },
          "function_uuid": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "type": "null"
              }
            ],
            "title": "Function Uuid"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "span": {
            "$ref": "#/components/schemas/SpanMoreDetails"
          }
        },
        "type": "object",
        "required": [
          "uuid",
          "project_uuid",
          "span_uuid",
          "created_at",
          "span"
        ],
        "title": "AnnotationPublic",
        "description": "Annotation public model."
      },
      "AnnotationUpdate": {
        "properties": {
          "label": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Label"
              },
              {
                "type": "null"
              }
            ]
          },
          "reasoning": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Reasoning"
          },
          "type": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/EvaluationType"
              },
              {
                "type": "null"
              }
            ],
            "default": "manual"
          },
          "data": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Data"
          },
          "assigned_to": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "type": "null"
              }
            ],
            "title": "Assigned To"
          }
        },
        "type": "object",
        "title": "AnnotationUpdate",
        "description": "Annotation update model."
      },
      "BillingPublic": {
        "properties": {
          "stripe_customer_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Stripe Customer Id"
          },
          "stripe_subscription_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Stripe Subscription Id"
          },
          "stripe_price_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Stripe Price Id"
          },
          "subscription_status": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/SubscriptionStatus"
              },
              {
                "type": "null"
              }
            ]
          },
          "subscription_current_period_start": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Subscription Current Period Start"
          },
          "subscription_current_period_end": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Subscription Current Period End"
          },
          "usage_quantity": {
            "type": "integer",
            "title": "Usage Quantity",
            "default": 0
          },
          "last_usage_report": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Last Usage Report"
          },
          "cancel_at_period_end": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Cancel At Period End",
            "description": "Whether the subscription should be canceled at the end of the period",
            "default": false
          },
          "metadata_": {
            "type": "object",
            "title": "Metadata"
          },
          "uuid": {
            "type": "string",
            "format": "uuid",
            "title": "Uuid"
          },
          "organization_uuid": {
            "type": "string",
            "format": "uuid",
            "title": "Organization Uuid"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          }
        },
        "type": "object",
        "required": [
          "stripe_customer_id",
          "uuid",
          "organization_uuid",
          "created_at"
        ],
        "title": "BillingPublic",
        "description": "Schema for public billing information."
      },
      "CommentCreate": {
        "properties": {
          "text": {
            "type": "string",
            "title": "Text"
          },
          "span_uuid": {
            "type": "string",
            "format": "uuid",
            "title": "Span Uuid"
          },
          "parent_comment_uuid": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "type": "null"
              }
            ],
            "title": "Parent Comment Uuid"
          }
        },
        "type": "object",
        "required": [
          "text",
          "span_uuid"
        ],
        "title": "CommentCreate",
        "description": "Comment Create Model."
      },
      "CommentPublic": {
        "properties": {
          "text": {
            "type": "string",
            "title": "Text"
          },
          "user_uuid": {
            "type": "string",
            "format": "uuid",
            "title": "User Uuid"
          },
          "span_uuid": {
            "type": "string",
            "format": "uuid",
            "title": "Span Uuid"
          },
          "parent_comment_uuid": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "type": "null"
              }
            ],
            "title": "Parent Comment Uuid"
          },
          "updated_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Updated At"
          },
          "is_edited": {
            "type": "boolean",
            "title": "Is Edited",
            "default": false
          },
          "uuid": {
            "type": "string",
            "format": "uuid",
            "title": "Uuid"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          }
        },
        "type": "object",
        "required": [
          "text",
          "user_uuid",
          "span_uuid",
          "uuid",
          "created_at"
        ],
        "title": "CommentPublic",
        "description": "Comment Public Model."
      },
      "CommentUpdate": {
        "properties": {
          "text": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Text"
          },
          "is_edited": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Is Edited"
          }
        },
        "type": "object",
        "title": "CommentUpdate",
        "description": "Comment Update Model."
      },
      "CommonCallParams": {
        "properties": {
          "temperature": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Temperature"
          },
          "max_tokens": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Max Tokens"
          },
          "top_p": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Top P"
          },
          "frequency_penalty": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Frequency Penalty"
          },
          "presence_penalty": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Presence Penalty"
          },
          "seed": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Seed"
          },
          "stop": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Stop"
          }
        },
        "type": "object",
        "title": "CommonCallParams",
        "description": "Common parameters shared across LLM providers.\n\nNote: Each provider may handle these parameters differently or not support them at all.\nPlease check provider-specific documentation for parameter support and behavior.\n\nAttributes:\n    temperature: Controls randomness in the output (0.0 to 1.0).\n    max_tokens: Maximum number of tokens to generate.\n    top_p: Nucleus sampling parameter (0.0 to 1.0).\n    frequency_penalty: Penalizes frequent tokens (-2.0 to 2.0).\n    presence_penalty: Penalizes tokens based on presence (-2.0 to 2.0).\n    seed: Random seed for reproducibility.\n    stop: Stop sequence(s) to end generation."
      },
      "CreateUserOrganizationToken": {
        "properties": {
          "token": {
            "type": "string",
            "title": "Token"
          }
        },
        "type": "object",
        "required": [
          "token"
        ],
        "title": "CreateUserOrganizationToken",
        "description": "Create user organization token model"
      },
      "DependencyInfo": {
        "properties": {
          "version": {
            "type": "string",
            "title": "Version"
          },
          "extras": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Extras"
          }
        },
        "type": "object",
        "required": [
          "version",
          "extras"
        ],
        "title": "DependencyInfo",
        "description": "Dependency information."
      },
      "DeploymentPublic": {
        "properties": {
          "environment_uuid": {
            "type": "string",
            "format": "uuid",
            "title": "Environment Uuid"
          },
          "function_uuid": {
            "type": "string",
            "format": "uuid",
            "title": "Function Uuid"
          },
          "project_uuid": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "type": "null"
              }
            ],
            "title": "Project Uuid"
          },
          "is_active": {
            "type": "boolean",
            "title": "Is Active",
            "default": true
          },
          "version_num": {
            "type": "integer",
            "title": "Version Num",
            "default": 1
          },
          "notes": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Notes"
          },
          "activated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Activated At",
            "description": "Timestamp when the deployment was activated."
          },
          "uuid": {
            "type": "string",
            "format": "uuid",
            "title": "Uuid"
          },
          "organization_uuid": {
            "type": "string",
            "format": "uuid",
            "title": "Organization Uuid"
          },
          "function": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/FunctionPublic"
              },
              {
                "type": "null"
              }
            ]
          },
          "environment": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/EnvironmentPublic"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "type": "object",
        "required": [
          "environment_uuid",
          "function_uuid",
          "uuid",
          "organization_uuid"
        ],
        "title": "DeploymentPublic",
        "description": "Deployment public model."
      },
      "EnvironmentCreate": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          },
          "is_default": {
            "type": "boolean",
            "title": "Is Default",
            "default": false
          }
        },
        "type": "object",
        "required": [
          "name"
        ],
        "title": "EnvironmentCreate",
        "description": "Environment create model."
      },
      "EnvironmentPublic": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          },
          "is_default": {
            "type": "boolean",
            "title": "Is Default",
            "default": false
          },
          "uuid": {
            "type": "string",
            "format": "uuid",
            "title": "Uuid"
          },
          "organization_uuid": {
            "type": "string",
            "format": "uuid",
            "title": "Organization Uuid"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          }
        },
        "type": "object",
        "required": [
          "name",
          "uuid",
          "organization_uuid",
          "created_at"
        ],
        "title": "EnvironmentPublic",
        "description": "Environment public model."
      },
      "EvaluationType": {
        "type": "string",
        "enum": [
          "manual",
          "verified",
          "edited"
        ],
        "title": "EvaluationType",
        "description": "Evaluation type enum"
      },
      "Event": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name"
          },
          "type": {
            "type": "string",
            "title": "Type"
          },
          "message": {
            "type": "string",
            "title": "Message"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "title": "Timestamp"
          }
        },
        "type": "object",
        "required": [
          "name",
          "type",
          "message",
          "timestamp"
        ],
        "title": "Event",
        "description": "Event model."
      },
      "ExternalAPIKeyCreate": {
        "properties": {
          "service_name": {
            "type": "string",
            "title": "Service Name"
          },
          "api_key": {
            "type": "string",
            "minLength": 1,
            "title": "Api Key",
            "description": "New API key"
          }
        },
        "type": "object",
        "required": [
          "service_name",
          "api_key"
        ],
        "title": "ExternalAPIKeyCreate",
        "description": "Request model for creating a secret."
      },
      "ExternalAPIKeyPublic": {
        "properties": {
          "service_name": {
            "type": "string",
            "title": "Service Name"
          },
          "masked_api_key": {
            "type": "string",
            "title": "Masked Api Key",
            "description": "Partially masked API key"
          }
        },
        "type": "object",
        "required": [
          "service_name",
          "masked_api_key"
        ],
        "title": "ExternalAPIKeyPublic",
        "description": "Response model for a secret."
      },
      "ExternalAPIKeyUpdate": {
        "properties": {
          "api_key": {
            "type": "string",
            "minLength": 1,
            "title": "Api Key",
            "description": "New API key"
          }
        },
        "type": "object",
        "required": [
          "api_key"
        ],
        "title": "ExternalAPIKeyUpdate",
        "description": "Request model for updating a secret."
      },
      "FunctionCreate": {
        "properties": {
          "project_uuid": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "type": "null"
              }
            ],
            "title": "Project Uuid"
          },
          "version_num": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Version Num"
          },
          "name": {
            "type": "string",
            "maxLength": 512,
            "minLength": 1,
            "title": "Name"
          },
          "signature": {
            "type": "string",
            "title": "Signature"
          },
          "code": {
            "type": "string",
            "title": "Code"
          },
          "hash": {
            "type": "string",
            "title": "Hash"
          },
          "dependencies": {
            "additionalProperties": {
              "$ref": "#/components/schemas/DependencyInfo"
            },
            "type": "object",
            "title": "Dependencies"
          },
          "arg_types": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object",
            "title": "Arg Types"
          },
          "archived": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Archived"
          },
          "custom_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Custom Id"
          },
          "prompt_template": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Prompt Template"
          },
          "provider": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Provider"
          },
          "model": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Model"
          },
          "call_params": {
            "$ref": "#/components/schemas/CommonCallParams"
          },
          "is_versioned": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Is Versioned",
            "default": false
          }
        },
        "type": "object",
        "required": [
          "name",
          "signature",
          "code",
          "hash"
        ],
        "title": "FunctionCreate",
        "description": "Function create model."
      },
      "FunctionPublic": {
        "properties": {
          "project_uuid": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "type": "null"
              }
            ],
            "title": "Project Uuid"
          },
          "version_num": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Version Num"
          },
          "name": {
            "type": "string",
            "maxLength": 512,
            "minLength": 1,
            "title": "Name"
          },
          "signature": {
            "type": "string",
            "title": "Signature"
          },
          "code": {
            "type": "string",
            "title": "Code"
          },
          "hash": {
            "type": "string",
            "title": "Hash"
          },
          "dependencies": {
            "additionalProperties": {
              "$ref": "#/components/schemas/DependencyInfo"
            },
            "type": "object",
            "title": "Dependencies"
          },
          "arg_types": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object",
            "title": "Arg Types"
          },
          "archived": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Archived"
          },
          "custom_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Custom Id"
          },
          "prompt_template": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Prompt Template"
          },
          "provider": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Provider"
          },
          "model": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Model"
          },
          "call_params": {
            "$ref": "#/components/schemas/CommonCallParams"
          },
          "is_versioned": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Is Versioned",
            "default": false
          },
          "uuid": {
            "type": "string",
            "format": "uuid",
            "title": "Uuid"
          }
        },
        "type": "object",
        "required": [
          "name",
          "signature",
          "code",
          "hash",
          "uuid"
        ],
        "title": "FunctionPublic",
        "description": "Function public model."
      },
      "FunctionUpdate": {
        "properties": {},
        "type": "object",
        "title": "FunctionUpdate",
        "description": "Function update model."
      },
      "HTTPValidationError": {
        "properties": {
          "detail": {
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            },
            "type": "array",
            "title": "Detail"
          }
        },
        "type": "object",
        "title": "HTTPValidationError"
      },
      "Label": {
        "type": "string",
        "enum": [
          "pass",
          "fail"
        ],
        "title": "Label",
        "description": "Label enum"
      },
      "LicenseInfo": {
        "properties": {
          "customer": {
            "type": "string",
            "title": "Customer"
          },
          "license_id": {
            "type": "string",
            "title": "License Id"
          },
          "expires_at": {
            "type": "string",
            "format": "date-time",
            "title": "Expires At"
          },
          "tier": {
            "$ref": "#/components/schemas/Tier"
          },
          "organization_uuid": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "type": "null"
              }
            ],
            "title": "Organization Uuid"
          },
          "is_expired": {
            "type": "boolean",
            "title": "Is Expired",
            "description": "Check if the license has expired",
            "readOnly": true
          }
        },
        "type": "object",
        "required": [
          "customer",
          "license_id",
          "expires_at",
          "tier",
          "organization_uuid",
          "is_expired"
        ],
        "title": "LicenseInfo",
        "description": "Pydantic model for license validation"
      },
      "MessageParam": {
        "properties": {
          "role": {
            "type": "string",
            "title": "Role"
          },
          "content": {
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/_AudioPart"
                },
                {
                  "$ref": "#/components/schemas/_TextPart"
                },
                {
                  "$ref": "#/components/schemas/_ImagePart"
                },
                {
                  "$ref": "#/components/schemas/_ToolCall"
                }
              ]
            },
            "type": "array",
            "title": "Content"
          }
        },
        "type": "object",
        "required": [
          "role",
          "content"
        ],
        "title": "MessageParam",
        "description": "Message param model agnostic to providers."
      },
      "OrganizationCreate": {
        "properties": {
          "name": {
            "type": "string",
            "minLength": 1,
            "title": "Name"
          }
        },
        "type": "object",
        "required": [
          "name"
        ],
        "title": "OrganizationCreate",
        "description": "Organization create model"
      },
      "OrganizationInviteCreate": {
        "properties": {
          "invited_by": {
            "type": "string",
            "format": "uuid",
            "title": "Invited By"
          },
          "email": {
            "type": "string",
            "minLength": 1,
            "title": "Email"
          },
          "expires_at": {
            "type": "string",
            "format": "date-time",
            "title": "Expires At"
          },
          "token": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Token"
          },
          "resend_email_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Resend Email Id"
          },
          "organization_uuid": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "type": "null"
              }
            ],
            "title": "Organization Uuid"
          }
        },
        "type": "object",
        "required": [
          "invited_by",
          "email"
        ],
        "title": "OrganizationInviteCreate",
        "description": "OrganizationInvite create model"
      },
      "OrganizationInvitePublic": {
        "properties": {
          "invited_by": {
            "type": "string",
            "format": "uuid",
            "title": "Invited By"
          },
          "email": {
            "type": "string",
            "minLength": 1,
            "title": "Email"
          },
          "expires_at": {
            "type": "string",
            "format": "date-time",
            "title": "Expires At"
          },
          "uuid": {
            "type": "string",
            "format": "uuid",
            "title": "Uuid"
          },
          "organization_uuid": {
            "type": "string",
            "format": "uuid",
            "title": "Organization Uuid"
          },
          "user": {
            "$ref": "#/components/schemas/UserPublic"
          },
          "resend_email_id": {
            "type": "string",
            "title": "Resend Email Id"
          },
          "invite_link": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Invite Link"
          }
        },
        "type": "object",
        "required": [
          "invited_by",
          "email",
          "uuid",
          "organization_uuid",
          "user",
          "resend_email_id"
        ],
        "title": "OrganizationInvitePublic",
        "description": "OrganizationInvite public model"
      },
      "OrganizationPublic": {
        "properties": {
          "name": {
            "type": "string",
            "minLength": 1,
            "title": "Name"
          },
          "uuid": {
            "type": "string",
            "format": "uuid",
            "title": "Uuid"
          },
          "billing": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/BillingPublic"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "type": "object",
        "required": [
          "name",
          "uuid"
        ],
        "title": "OrganizationPublic",
        "description": "Organization public model"
      },
      "OrganizationUpdate": {
        "properties": {
          "name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Name"
          },
          "license": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "License"
          }
        },
        "type": "object",
        "title": "OrganizationUpdate",
        "description": "Organization update model"
      },
      "Paginated_SpanPublic_": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/SpanPublic"
            },
            "type": "array",
            "title": "Items",
            "description": "Current slice of items"
          },
          "limit": {
            "type": "integer",
            "minimum": 1.0,
            "title": "Limit",
            "description": "Requested page size (limit)"
          },
          "offset": {
            "type": "integer",
            "minimum": 0.0,
            "title": "Offset",
            "description": "Requested offset"
          },
          "total": {
            "type": "integer",
            "minimum": 0.0,
            "title": "Total",
            "description": "Total number of items"
          }
        },
        "type": "object",
        "required": [
          "items",
          "limit",
          "offset",
          "total"
        ],
        "title": "Paginated[SpanPublic]"
      },
      "PlanType": {
        "type": "string",
        "enum": [
          "free",
          "pro",
          "team"
        ],
        "title": "PlanType",
        "description": "Enum for different plan types."
      },
      "PlaygroundErrorDetail": {
        "properties": {
          "type": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/PlaygroundErrorType"
              },
              {
                "type": "string"
              }
            ],
            "title": "Type",
            "description": "Category of the error (Enum value) or specific Python Exception type name."
          },
          "reason": {
            "type": "string",
            "title": "Reason",
            "description": "User-friendly description of the error."
          },
          "details": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Details",
            "description": "Additional technical details, if available."
          }
        },
        "type": "object",
        "required": [
          "type",
          "reason"
        ],
        "title": "PlaygroundErrorDetail",
        "description": "Detailed information about a playground error."
      },
      "PlaygroundErrorResponse": {
        "properties": {
          "error": {
            "$ref": "#/components/schemas/PlaygroundErrorDetail"
          }
        },
        "type": "object",
        "required": [
          "error"
        ],
        "title": "PlaygroundErrorResponse",
        "description": "Standard structure for playground error responses."
      },
      "PlaygroundErrorType": {
        "type": "string",
        "enum": [
          "TimeoutError",
          "ConfigurationError",
          "SubprocessError",
          "OutputParsingError",
          "OutputMarkerError",
          "InternalPlaygroundError",
          "ExecutionError",
          "BadRequestError",
          "NotFoundError",
          "InvalidInputError",
          "ApiKeyIssue",
          "UnexpectedServerError"
        ],
        "title": "PlaygroundErrorType",
        "description": "Categorizes the types of errors that can occur during playground execution."
      },
      "PlaygroundParameters": {
        "properties": {
          "arg_values": {
            "additionalProperties": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "number"
                },
                {
                  "type": "boolean"
                },
                {
                  "type": "string"
                },
                {
                  "items": {},
                  "type": "array"
                },
                {
                  "type": "object"
                }
              ]
            },
            "type": "object",
            "title": "Arg Values"
          },
          "arg_types": {
            "anyOf": [
              {
                "additionalProperties": {
                  "type": "string"
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Arg Types"
          },
          "provider": {
            "$ref": "#/components/schemas/Provider"
          },
          "model": {
            "type": "string",
            "title": "Model"
          },
          "prompt_template": {
            "type": "string",
            "title": "Prompt Template"
          },
          "call_params": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/CommonCallParams"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "type": "object",
        "required": [
          "arg_values",
          "arg_types",
          "provider",
          "model",
          "prompt_template",
          "call_params"
        ],
        "title": "PlaygroundParameters",
        "description": "Playground parameters model."
      },
      "PlaygroundSuccessResponse": {
        "properties": {
          "result": {
            "title": "Result",
            "description": "The result returned by the executed function. Can be any JSON-serializable type."
          },
          "trace_context": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/TraceContextModel"
              },
              {
                "type": "null"
              }
            ],
            "description": "Tracing context associated with the execution."
          }
        },
        "type": "object",
        "required": [
          "result"
        ],
        "title": "PlaygroundSuccessResponse",
        "description": "Standard structure for successful playground execution responses."
      },
      "ProjectCreate": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name"
          }
        },
        "type": "object",
        "required": [
          "name"
        ],
        "title": "ProjectCreate",
        "description": "Project Create Model."
      },
      "ProjectPublic": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name"
          },
          "uuid": {
            "type": "string",
            "format": "uuid",
            "title": "Uuid"
          },
          "functions": {
            "items": {
              "$ref": "#/components/schemas/FunctionPublic"
            },
            "type": "array",
            "title": "Functions",
            "default": []
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          }
        },
        "type": "object",
        "required": [
          "name",
          "uuid",
          "created_at"
        ],
        "title": "ProjectPublic",
        "description": "Project Public Model."
      },
      "Provider": {
        "type": "string",
        "enum": [
          "openai",
          "anthropic",
          "openrouter",
          "gemini"
        ],
        "title": "Provider",
        "description": "Provider name enum"
      },
      "Scope": {
        "type": "string",
        "enum": [
          "lilypad",
          "llm"
        ],
        "title": "Scope",
        "description": "Instrumentation Scope name of the span"
      },
      "SettingsPublic": {
        "properties": {
          "remote_client_url": {
            "type": "string",
            "title": "Remote Client Url"
          },
          "remote_api_url": {
            "type": "string",
            "title": "Remote Api Url"
          },
          "github_client_id": {
            "type": "string",
            "title": "Github Client Id"
          },
          "google_client_id": {
            "type": "string",
            "title": "Google Client Id"
          },
          "environment": {
            "type": "string",
            "title": "Environment"
          },
          "experimental": {
            "type": "boolean",
            "title": "Experimental"
          }
        },
        "type": "object",
        "required": [
          "remote_client_url",
          "remote_api_url",
          "github_client_id",
          "google_client_id",
          "environment",
          "experimental"
        ],
        "title": "SettingsPublic"
      },
      "SpanMoreDetails": {
        "properties": {
          "uuid": {
            "type": "string",
            "format": "uuid",
            "title": "Uuid"
          },
          "project_uuid": {
            "type": "string",
            "format": "uuid",
            "title": "Project Uuid"
          },
          "function_uuid": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "type": "null"
              }
            ],
            "title": "Function Uuid"
          },
          "display_name": {
            "type": "string",
            "title": "Display Name"
          },
          "provider": {
            "type": "string",
            "title": "Provider"
          },
          "model": {
            "type": "string",
            "title": "Model"
          },
          "scope": {
            "$ref": "#/components/schemas/Scope"
          },
          "input_tokens": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Input Tokens"
          },
          "output_tokens": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Output Tokens"
          },
          "duration_ms": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Duration Ms"
          },
          "signature": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Signature"
          },
          "code": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Code"
          },
          "arg_values": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Arg Values"
          },
          "output": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Output"
          },
          "messages": {
            "items": {
              "$ref": "#/components/schemas/MessageParam"
            },
            "type": "array",
            "title": "Messages"
          },
          "data": {
            "type": "object",
            "title": "Data"
          },
          "cost": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Cost"
          },
          "template": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Template"
          },
          "status": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Status"
          },
          "events": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/Event"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Events"
          },
          "tags": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/TagPublic"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Tags"
          },
          "session_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Session Id"
          },
          "span_id": {
            "type": "string",
            "title": "Span Id"
          },
          "response": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Response"
          },
          "response_model": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Response Model"
          }
        },
        "type": "object",
        "required": [
          "uuid",
          "project_uuid",
          "display_name",
          "provider",
          "model",
          "scope",
          "messages",
          "data",
          "span_id"
        ],
        "title": "SpanMoreDetails",
        "description": "Span more details model."
      },
      "SpanPublic": {
        "properties": {
          "span_id": {
            "type": "string",
            "title": "Span Id"
          },
          "function_uuid": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "type": "null"
              }
            ],
            "title": "Function Uuid"
          },
          "type": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/SpanType"
              },
              {
                "type": "null"
              }
            ]
          },
          "cost": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Cost"
          },
          "scope": {
            "$ref": "#/components/schemas/Scope"
          },
          "input_tokens": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Input Tokens"
          },
          "output_tokens": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Output Tokens"
          },
          "duration_ms": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Duration Ms"
          },
          "data": {
            "type": "object",
            "title": "Data"
          },
          "parent_span_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Parent Span Id"
          },
          "session_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Session Id"
          },
          "uuid": {
            "type": "string",
            "format": "uuid",
            "title": "Uuid"
          },
          "project_uuid": {
            "type": "string",
            "format": "uuid",
            "title": "Project Uuid"
          },
          "display_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Display Name"
          },
          "function": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/FunctionPublic"
              },
              {
                "type": "null"
              }
            ]
          },
          "annotations": {
            "items": {
              "$ref": "#/components/schemas/AnnotationPublic"
            },
            "type": "array",
            "title": "Annotations"
          },
          "child_spans": {
            "items": {
              "$ref": "#/components/schemas/SpanPublic"
            },
            "type": "array",
            "title": "Child Spans"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "status": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Status"
          },
          "tags": {
            "items": {
              "$ref": "#/components/schemas/TagPublic"
            },
            "type": "array",
            "title": "Tags"
          },
          "score": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Score"
          }
        },
        "type": "object",
        "required": [
          "span_id",
          "scope",
          "uuid",
          "project_uuid",
          "function",
          "annotations",
          "child_spans",
          "created_at",
          "tags"
        ],
        "title": "SpanPublic",
        "description": "Span public model"
      },
      "SpanType": {
        "type": "string",
        "enum": [
          "function",
          "trace",
          "mirascope.v1"
        ],
        "title": "SpanType",
        "description": "Span type"
      },
      "SpanUpdate": {
        "properties": {
          "tags_by_uuid": {
            "anyOf": [
              {
                "items": {
                  "type": "string",
                  "format": "uuid"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Tags By Uuid"
          },
          "tags_by_name": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Tags By Name"
          }
        },
        "type": "object",
        "title": "SpanUpdate",
        "description": "Span update model"
      },
      "StripeCheckoutSession": {
        "properties": {
          "plan_type": {
            "$ref": "#/components/schemas/PlanType"
          }
        },
        "type": "object",
        "required": [
          "plan_type"
        ],
        "title": "StripeCheckoutSession",
        "description": "Response model for Stripe checkout session creation."
      },
      "StripeWebhookResponse": {
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "success",
              "error",
              "ignored"
            ],
            "title": "Status"
          },
          "event": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Event"
          },
          "message": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Message"
          }
        },
        "type": "object",
        "required": [
          "status"
        ],
        "title": "StripeWebhookResponse",
        "description": "Response schema for Stripe webhook events."
      },
      "SubscriptionStatus": {
        "type": "string",
        "enum": [
          "active",
          "past_due",
          "unpaid",
          "canceled",
          "incomplete",
          "incomplete_expired",
          "trialing",
          "paused"
        ],
        "title": "SubscriptionStatus",
        "description": "Subscription status enum based on Stripe's subscription statuses."
      },
      "TagCreate": {
        "properties": {
          "project_uuid": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "type": "null"
              }
            ],
            "title": "Project Uuid"
          },
          "name": {
            "type": "string",
            "minLength": 1,
            "title": "Name"
          }
        },
        "type": "object",
        "required": [
          "name"
        ],
        "title": "TagCreate",
        "description": "Tag Create Model."
      },
      "TagPublic": {
        "properties": {
          "project_uuid": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "type": "null"
              }
            ],
            "title": "Project Uuid"
          },
          "name": {
            "type": "string",
            "minLength": 1,
            "title": "Name"
          },
          "uuid": {
            "type": "string",
            "format": "uuid",
            "title": "Uuid"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "organization_uuid": {
            "type": "string",
            "format": "uuid",
            "title": "Organization Uuid"
          }
        },
        "type": "object",
        "required": [
          "name",
          "uuid",
          "created_at",
          "organization_uuid"
        ],
        "title": "TagPublic",
        "description": "Tag Public Model."
      },
      "Tier": {
        "type": "integer",
        "enum": [
          0,
          1,
          2,
          3
        ],
        "title": "Tier",
        "description": "License tier enum.",
        "x-enum-varnames": [
          "FREE",
          "PRO",
          "TEAM",
          "ENTERPRISE"
        ]
      },
      "TimeFrame": {
        "type": "string",
        "enum": [
          "day",
          "week",
          "month",
          "lifetime"
        ],
        "title": "TimeFrame",
        "description": "Timeframe for aggregation"
      },
      "TraceContextModel": {
        "properties": {
          "span_uuid": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Span Uuid",
            "description": "The unique identifier for the current span within the trace."
          }
        },
        "type": "object",
        "title": "TraceContextModel",
        "description": "Represents the tracing context information provided by Lilypad."
      },
      "UserConsentCreate": {
        "properties": {
          "privacy_policy_version": {
            "type": "string",
            "title": "Privacy Policy Version"
          },
          "privacy_policy_accepted_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Privacy Policy Accepted At"
          },
          "tos_version": {
            "type": "string",
            "title": "Tos Version"
          },
          "tos_accepted_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Tos Accepted At"
          },
          "user_uuid": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "type": "null"
              }
            ],
            "title": "User Uuid"
          }
        },
        "type": "object",
        "required": [
          "privacy_policy_version",
          "tos_version"
        ],
        "title": "UserConsentCreate",
        "description": "UserConsent create model."
      },
      "UserConsentPublic": {
        "properties": {
          "privacy_policy_version": {
            "type": "string",
            "title": "Privacy Policy Version",
            "description": "Last updated date of the privacy policy accepted",
            "default": "2025-04-04"
          },
          "privacy_policy_accepted_at": {
            "type": "string",
            "format": "date-time",
            "title": "Privacy Policy Accepted At"
          },
          "tos_version": {
            "type": "string",
            "title": "Tos Version",
            "description": "Last updated date of the terms of service accepted",
            "default": "2025-04-04"
          },
          "tos_accepted_at": {
            "type": "string",
            "format": "date-time",
            "title": "Tos Accepted At"
          },
          "uuid": {
            "type": "string",
            "format": "uuid",
            "title": "Uuid"
          }
        },
        "type": "object",
        "required": [
          "privacy_policy_accepted_at",
          "tos_accepted_at",
          "uuid"
        ],
        "title": "UserConsentPublic",
        "description": "UserConsent public model."
      },
      "UserConsentUpdate": {
        "properties": {
          "privacy_policy_version": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Privacy Policy Version"
          },
          "privacy_policy_accepted_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Privacy Policy Accepted At"
          },
          "tos_version": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Tos Version"
          },
          "tos_accepted_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Tos Accepted At"
          }
        },
        "type": "object",
        "title": "UserConsentUpdate",
        "description": "UserConsent update model."
      },
      "UserOrganizationPublic": {
        "properties": {
          "role": {
            "$ref": "#/components/schemas/UserRole"
          },
          "user_uuid": {
            "type": "string",
            "format": "uuid",
            "title": "User Uuid"
          },
          "uuid": {
            "type": "string",
            "format": "uuid",
            "title": "Uuid"
          },
          "organization_uuid": {
            "type": "string",
            "format": "uuid",
            "title": "Organization Uuid"
          },
          "organization": {
            "$ref": "#/components/schemas/OrganizationPublic"
          }
        },
        "type": "object",
        "required": [
          "role",
          "user_uuid",
          "uuid",
          "organization_uuid",
          "organization"
        ],
        "title": "UserOrganizationPublic",
        "description": "UserOrganization public model"
      },
      "UserOrganizationTable": {
        "properties": {
          "uuid": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "type": "null"
              }
            ],
            "title": "Uuid"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "organization_uuid": {
            "type": "string",
            "format": "uuid",
            "title": "Organization Uuid"
          },
          "role": {
            "$ref": "#/components/schemas/UserRole"
          },
          "user_uuid": {
            "type": "string",
            "format": "uuid",
            "title": "User Uuid"
          }
        },
        "type": "object",
        "required": [
          "organization_uuid",
          "role",
          "user_uuid"
        ],
        "title": "UserOrganizationTable",
        "description": "UserOrganization table."
      },
      "UserOrganizationUpdate": {
        "properties": {
          "role": {
            "$ref": "#/components/schemas/UserRole"
          }
        },
        "type": "object",
        "required": [
          "role"
        ],
        "title": "UserOrganizationUpdate",
        "description": "UserOrganization update model"
      },
      "UserPublic": {
        "properties": {
          "first_name": {
            "type": "string",
            "minLength": 1,
            "title": "First Name"
          },
          "last_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Last Name"
          },
          "email": {
            "type": "string",
            "minLength": 1,
            "title": "Email"
          },
          "active_organization_uuid": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "type": "null"
              }
            ],
            "title": "Active Organization Uuid"
          },
          "keys": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object",
            "title": "Keys"
          },
          "uuid": {
            "type": "string",
            "format": "uuid",
            "title": "Uuid"
          },
          "access_token": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Access Token"
          },
          "user_organizations": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/UserOrganizationPublic"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "User Organizations"
          },
          "scopes": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Scopes"
          },
          "user_consents": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/UserConsentPublic"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "type": "object",
        "required": [
          "first_name",
          "email",
          "uuid"
        ],
        "title": "UserPublic",
        "description": "User public model"
      },
      "UserRole": {
        "type": "string",
        "enum": [
          "owner",
          "admin",
          "member"
        ],
        "title": "UserRole",
        "description": "User role enum."
      },
      "ValidationError": {
        "properties": {
          "loc": {
            "items": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                }
              ]
            },
            "type": "array",
            "title": "Location"
          },
          "msg": {
            "type": "string",
            "title": "Message"
          },
          "type": {
            "type": "string",
            "title": "Error Type"
          }
        },
        "type": "object",
        "required": [
          "loc",
          "msg",
          "type"
        ],
        "title": "ValidationError"
      },
      "_AudioPart": {
        "properties": {
          "type": {
            "type": "string",
            "const": "audio",
            "title": "Type"
          },
          "media_type": {
            "type": "string",
            "title": "Media Type"
          },
          "audio": {
            "type": "string",
            "title": "Audio"
          }
        },
        "type": "object",
        "required": [
          "type",
          "media_type",
          "audio"
        ],
        "title": "_AudioPart",
        "description": "Image part model."
      },
      "_ImagePart": {
        "properties": {
          "type": {
            "type": "string",
            "const": "image",
            "title": "Type"
          },
          "media_type": {
            "type": "string",
            "title": "Media Type"
          },
          "image": {
            "type": "string",
            "title": "Image"
          },
          "detail": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Detail"
          }
        },
        "type": "object",
        "required": [
          "type",
          "media_type",
          "image",
          "detail"
        ],
        "title": "_ImagePart",
        "description": "Image part model."
      },
      "_TextPart": {
        "properties": {
          "type": {
            "type": "string",
            "const": "text",
            "title": "Type"
          },
          "text": {
            "type": "string",
            "title": "Text"
          }
        },
        "type": "object",
        "required": [
          "type",
          "text"
        ],
        "title": "_TextPart",
        "description": "Text part model."
      },
      "_ToolCall": {
        "properties": {
          "type": {
            "type": "string",
            "const": "tool_call",
            "title": "Type"
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "arguments": {
            "type": "object",
            "title": "Arguments"
          }
        },
        "type": "object",
        "required": [
          "type",
          "name",
          "arguments"
        ],
        "title": "_ToolCall",
        "description": "Image part model."
      }
    },
    "securitySchemes": {
      "OAuth2PasswordBearer": {
        "type": "oauth2",
        "flows": {
          "password": {
            "scopes": {},
            "tokenUrl": "token"
          }
        }
      },
      "APIKeyHeader": {
        "type": "apiKey",
        "in": "header",
        "name": "X-API-Key"
      }
    }
  }
}