services:
  postgres:
    build:
      context: ./postgres
      dockerfile: Dockerfile
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    environment:
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-password}
      - POSTGRES_DB=${POSTGRES_DB:-postgres}
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - app-network

  lilypad:
    build:
      context: .
      dockerfile: Dockerfile.dev
    ports:
      - "8000:8000"
    develop:
      watch:
        - action: sync
          path: .
          target: /app
          ignore:
            - .venv/
            - client/
        - action: rebuild
          path: ./uv.lock
    environment:
      - LILYPAD_DB_HOST=${LILYPAD_DB_HOST:-postgres}
      - LILYPAD_DB_NAME=${LILYPAD_DB_NAME:-postgres}
      - LILYPAD_DB_PASSWORD=${LILYPAD_DB_PASSWORD:-password}
      - LILYPAD_DB_PORT=${LILYPAD_DB_PORT:-5432}
      - LILYPAD_DB_USER=${LILYPAD_DB_USER:-supabase_admin}
      - LILYPAD_GITHUB_CLIENT_ID=${LILYPAD_GITHUB_CLIENT_ID:-...}
      - LILYPAD_GITHUB_CLIENT_SECRET=${LILYPAD_GITHUB_CLIENT_SECRET:-...}
      - LILYPAD_GOOGLE_CLIENT_ID=${LILYPAD_GOOGLE_CLIENT_ID:-...}
      - LILYPAD_GOOGLE_CLIENT_SECRET=${LILYPAD_GOOGLE_CLIENT_SECRET:-...}
      - LILYPAD_REMOTE_API_URL=${LILYPAD_REMOTE_API_URL:-http://localhost:8000}
      - LILYPAD_REMOTE_CLIENT_URL=${LILYPAD_REMOTE_CLIENT_URL:-http://localhost:5173}
      - LILYPAD_ENVIRONMENT=${LILYPAD_ENVIRONMENT:-development}
      - LILYPAD_SERVE_FRONTEND=false
      - LILYPAD_EXPERIMENTAL=true
      - LILYPAD_PLAYGROUND_VENV_PATH=/opt/playground-venv
      - LILYPAD_OPENSEARCH_HOST=${LILYPAD_OPENSEARCH_HOST:-opensearch}
      - LILYPAD_OPENSEARCH_PORT=${LILYPAD_OPENSEARCH_PORT:-9200}
      - LILYPAD_OPENSEARCH_USER=${LILYPAD_OPENSEARCH_USER:-admin}
      - LILYPAD_OPENSEARCH_PASSWORD=${LILYPAD_OPENSEARCH_PASSWORD:-${OPENSEARCH_INITIAL_ADMIN_PASSWORD:-50\!w2nPBWe:}}
      - LILYPAD_STRIPE_API_KEY=${LILYPAD_STRIPE_API_KEY:-rk_test_...}
      - LILYPAD_STRIPE_SECRET_API_KEY=${LILYPAD_STRIPE_SECRET_API_KEY:-sk_test_...}
      - LILYPAD_STRIPE_SPANS_METERING_ID=${LILYPAD_STRIPE_SPANS_METERING_ID:-mtr_...}
      - LILYPAD_STRIPE_CLOUD_PRO_FLAT_PRICE_ID=${LILYPAD_STRIPE_CLOUD_PRO_FLAT_PRICE_ID:-price_...}
      - LILYPAD_STRIPE_CLOUD_PRO_METER_PRICE_ID=${LILYPAD_STRIPE_CLOUD_PRO_METER_PRICE_ID:-...}
      - LILYPAD_STRIPE_CLOUD_TEAM_FLAT_PRICE_ID=${LILYPAD_STRIPE_CLOUD_TEAM_FLAT_PRICE_ID:-price_...}
      - LILYPAD_STRIPE_CLOUD_TEAM_METER_PRICE_ID=${LILYPAD_STRIPE_CLOUD_TEAM_METER_PRICE_ID:-...}
      - LILYPAD_STRIPE_WEBHOOK_SECRET=${LILYPAD_STRIPE_WEBHOOK_SECRET:-whsec_...}
      - LILYPAD_KAFKA_BOOTSTRAP_SERVERS=${LILYPAD_KAFKA_BOOTSTRAP_SERVERS:-kafka:29092}
      - LILYPAD_KAFKA_TOPIC_SPAN_INGESTION=${LILYPAD_KAFKA_TOPIC_SPAN_INGESTION:-span-ingestion}
      - LILYPAD_KAFKA_CONSUMER_GROUP=${LILYPAD_KAFKA_CONSUMER_GROUP:-lilypad-span-processor}
      - LILYPAD_KAFKA_MAX_CONCURRENT_TRACES=${LILYPAD_KAFKA_MAX_CONCURRENT_TRACES:-1000}
      - LILYPAD_KAFKA_MAX_SPANS_PER_TRACE=${LILYPAD_KAFKA_MAX_SPANS_PER_TRACE:-500}
      - LILYPAD_KAFKA_BUFFER_TTL_SECONDS=${LILYPAD_KAFKA_BUFFER_TTL_SECONDS:-300}
      # AWS LocalStack configuration
      - AWS_ENDPOINT_URL=http://localstack:4566
      - AWS_ACCESS_KEY_ID=test
      - AWS_SECRET_ACCESS_KEY=test
      - AWS_DEFAULT_REGION=us-east-1
      - SECRET_MANAGER_TYPE=${SECRET_MANAGER_TYPE:-AWS_SECRET_MANAGER}
    depends_on:
      - postgres
      - kafka
      - localstack
    networks:
      - app-network

  client:
    build:
      context: ./client
      dockerfile: Dockerfile.dev
    ports:
      - "${CLIENT_PORT:-5173}:5173"
    volumes:
      - ./client:/app
      - /app/node_modules
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      - VITE_HOST=0.0.0.0
    networks:
      - app-network
  opensearch:
    image: opensearchproject/opensearch:latest
    container_name: opensearch
    environment:
      - discovery.type=single-node
      - bootstrap.memory_lock=true
      - DISABLE_INSTALL_DEMO_CONFIG=true
      - DISABLE_SECURITY_PLUGIN=true
      - "OPENSEARCH_JAVA_OPTS=-Xms512m -Xmx512m"
      - OPENSEARCH_INITIAL_ADMIN_PASSWORD=${OPENSEARCH_INITIAL_ADMIN_PASSWORD:-50\!w2nPBWe:}
      - "cluster.routing.allocation.disk.threshold_enabled=true"
      - "cluster.routing.allocation.disk.watermark.low=90%"
      - "cluster.routing.allocation.disk.watermark.high=95%"
      - "cluster.routing.allocation.disk.watermark.flood_stage=97%"
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
    volumes:
      - opensearch-data:/usr/share/opensearch/data
    ports:
      - 9200:9200
      - 9600:9600
    networks:
      - app-network

  opensearch-dashboards:
    image: opensearchproject/opensearch-dashboards:latest
    container_name: opensearch-dashboards
    ports:
      - 5601:5601
    expose:
      - "5601"
    environment:
      - OPENSEARCH_HOSTS=["http://opensearch:9200"]
      - DISABLE_SECURITY_DASHBOARDS_PLUGIN=true
    networks:
      - app-network
    depends_on:
      - opensearch

  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_DATA_DIR: /var/lib/zookeeper/data
      ZOOKEEPER_LOG_DIR: /var/lib/zookeeper/log
    volumes:
      - zookeeper-data:/var/lib/zookeeper
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "2181"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  kafka:
    image: confluentinc/cp-kafka:7.5.0
    container_name: kafka
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
      - "9101:9101"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://kafka:29092
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT_INTERNAL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
      KAFKA_LOG_RETENTION_HOURS: 168 # 7 days retention
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "false"
      KAFKA_LOG_DIRS: /var/lib/kafka/data
    volumes:
      - kafka-data:/var/lib/kafka
    networks:
      - app-network
    healthcheck:
      test:
        [
          "CMD",
          "kafka-topics",
          "--bootstrap-server",
          "localhost:29092",
          "--list",
        ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    depends_on:
      - kafka
      - zookeeper
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: lilypad-local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
      KAFKA_CLUSTERS_0_READONLY: false
    networks:
      - app-network

  localstack:
    image: localstack/localstack:latest
    container_name: localstack
    ports:
      - "4566:4566" # LocalStack Gateway
    environment:
      - SERVICES=secretsmanager,kms
      - DEBUG=0
      - AWS_DEFAULT_REGION=us-east-1
      - PERSISTENCE=1 # Enable persistence for secrets
      - LOCALSTACK_HOST=localstack
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
      - localstack-data:/var/lib/localstack
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4566/_localstack/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

volumes:
  postgres-data:
  opensearch-data:
  zookeeper-data:
  kafka-data:
  localstack-data:

networks:
  app-network:
    driver: bridge
