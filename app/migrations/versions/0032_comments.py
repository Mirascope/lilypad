"""comments

Revision ID: 0032
Revises: 0031
Create Date: 2025-04-08 13:04:28.325083

"""

from collections.abc import Sequence

import sqlalchemy as sa
from alembic import op
from sqlmodel.sql.sqltypes import AutoString

# revision identifiers, used by Alembic.
revision: str = "0032"
down_revision: str | None = "0031"
branch_labels: str | Sequence[str] | None = None
depends_on: str | Sequence[str] | None = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "comments",
        sa.Column("uuid", sa.Uuid(), nullable=False),
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("organization_uuid", sa.Uuid(), nullable=False),
        sa.Column("text", AutoString(), nullable=False),
        sa.Column("user_uuid", sa.Uuid(), nullable=False),
        sa.Column("span_uuid", sa.Uuid(), nullable=False),
        sa.Column("parent_comment_uuid", sa.Uuid(), nullable=True),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("is_edited", sa.Boolean(), nullable=False),
        sa.ForeignKeyConstraint(
            ["organization_uuid"],
            ["organizations.uuid"],
            name=op.f("comments_organization_uuid_organizations_fkey"),
            ondelete="CASCADE",
        ),
        sa.ForeignKeyConstraint(
            ["parent_comment_uuid"],
            ["comments.uuid"],
            name=op.f("comments_parent_comment_uuid_comments_fkey"),
            ondelete="CASCADE",
        ),
        sa.ForeignKeyConstraint(
            ["span_uuid"],
            ["spans.uuid"],
            name=op.f("comments_span_uuid_spans_fkey"),
            ondelete="CASCADE",
        ),
        sa.ForeignKeyConstraint(
            ["user_uuid"],
            ["users.uuid"],
            name=op.f("comments_user_uuid_users_fkey"),
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("uuid", name=op.f("comments_pkey")),
    )
    with op.batch_alter_table("comments", schema=None) as batch_op:
        batch_op.create_index(
            batch_op.f("comments_created_at_idx"), ["created_at"], unique=False
        )
        batch_op.create_index(
            batch_op.f("comments_organization_uuid_idx"),
            ["organization_uuid"],
            unique=False,
        )
        batch_op.create_index(
            batch_op.f("comments_parent_comment_uuid_idx"),
            ["parent_comment_uuid"],
            unique=False,
        )
        batch_op.create_index(
            batch_op.f("comments_span_uuid_idx"), ["span_uuid"], unique=False
        )
        batch_op.create_index(
            batch_op.f("comments_updated_at_idx"), ["updated_at"], unique=False
        )
        batch_op.create_index(
            batch_op.f("comments_user_uuid_idx"), ["user_uuid"], unique=False
        )

    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table("comments", schema=None) as batch_op:
        batch_op.drop_index(batch_op.f("comments_user_uuid_idx"))
        batch_op.drop_index(batch_op.f("comments_updated_at_idx"))
        batch_op.drop_index(batch_op.f("comments_span_uuid_idx"))
        batch_op.drop_index(batch_op.f("comments_parent_comment_uuid_idx"))
        batch_op.drop_index(batch_op.f("comments_organization_uuid_idx"))
        batch_op.drop_index(batch_op.f("comments_created_at_idx"))

    op.drop_table("comments")
    # ### end Alembic commands ###
