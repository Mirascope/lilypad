"""add default environment

Revision ID: 0024
Revises: 0023
Create Date: 2025-03-20 11:16:34.772359

"""

from collections.abc import Sequence
from datetime import datetime, timezone
from uuid import uuid4

import sqlalchemy as sa
from alembic import op
from sqlalchemy import UUID, Boolean, DateTime, String
from sqlalchemy.sql import column, table

# revision identifiers, used by Alembic.
revision: str = "0025"
down_revision: str | None = "0024"
branch_labels: str | Sequence[str] | None = None
depends_on: str | Sequence[str] | None = None


def create_default_environments_and_update_api_keys() -> None:
    """Create a default environment for each project and update API keys."""

    connection = op.get_bind()

    # Define tables for use in our queries
    organizations = table("organizations", column("uuid", UUID))

    environments = table(
        "environments",
        column("uuid", UUID),
        column("name", String),
        column("description", String),
        column("organization_uuid", UUID),
        column("is_default", Boolean),
        column("created_at", DateTime(timezone=True)),
    )

    api_keys = table(
        "api_keys",
        column("uuid", UUID),
        column("project_uuid", UUID),
        column("environment_uuid", UUID),
        column("organization_uuid", UUID),  # Add this column to match your where clause
    )

    # Get all organizations
    organization_results = connection.execute(
        sa.select(organizations.c.uuid)
    ).fetchall()

    # Current UTC timestamp for created_at field
    now = datetime.now(timezone.utc)

    # Dict to store organization_uuid -> environment_uuid mappings
    organization_environments = {}

    # Create a default environment for each organization
    for row in organization_results:
        # Extract the UUID value from the Row object
        organization_uuid = row[0]

        # Check if an environment already exists for this organization
        existing = connection.execute(
            sa.select(environments.c.uuid).where(
                environments.c.organization_uuid == organization_uuid,
                environments.c.is_default.is_(True),
            )
        ).fetchone()

        env_uuid = None

        # If default environment exists, use it
        if existing:
            env_uuid = existing[0]
        else:
            # Create a new default environment
            env_uuid = uuid4()

            # Insert the default environment
            op.bulk_insert(
                environments,
                [
                    {
                        "uuid": env_uuid,
                        "name": "default",
                        "description": "Default environment",
                        "organization_uuid": organization_uuid,
                        "is_default": True,
                        "created_at": now,
                    }
                ],
            )

        # Store the environment UUID for this organization
        organization_environments[organization_uuid] = env_uuid

    # Update API keys to use the default environments
    for organization_uuid, env_uuid in organization_environments.items():
        connection.execute(
            api_keys.update()
            .where(
                sa.and_(
                    api_keys.c.organization_uuid == organization_uuid,
                    api_keys.c.environment_uuid.is_(None),
                )
            )
            .values(environment_uuid=env_uuid)
        )


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    # Create default environments for each organization
    create_default_environments_and_update_api_keys()

    with op.batch_alter_table("api_keys", schema=None) as batch_op:
        batch_op.alter_column(
            "environment_uuid", existing_type=sa.UUID(), nullable=False
        )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table("api_keys", schema=None) as batch_op:
        batch_op.alter_column(
            "environment_uuid", existing_type=sa.UUID(), nullable=True
        )
    # ### end Alembic commands ###
