"""user consent

Revision ID: 0029
Revises: 0028
Create Date: 2025-04-03 14:55:18.878028

"""

from collections.abc import Sequence

import sqlalchemy as sa
from alembic import op
from sqlmodel.sql.sqltypes import AutoString

# revision identifiers, used by Alembic.
revision: str = "0029"
down_revision: str | None = "0028"
branch_labels: str | Sequence[str] | None = None
depends_on: str | Sequence[str] | None = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "user_consents",
        sa.Column("uuid", sa.Uuid(), nullable=False),
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("privacy_policy_version", AutoString(), nullable=False),
        sa.Column(
            "privacy_policy_accepted_at", sa.DateTime(timezone=True), nullable=False
        ),
        sa.Column("tos_version", AutoString(), nullable=False),
        sa.Column("tos_accepted_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("user_uuid", sa.Uuid(), nullable=False),
        sa.ForeignKeyConstraint(
            ["user_uuid"],
            ["users.uuid"],
            name=op.f("user_consents_user_uuid_users_fkey"),
        ),
        sa.PrimaryKeyConstraint("uuid", name=op.f("user_consents_pkey")),
    )
    with op.batch_alter_table("user_consents", schema=None) as batch_op:
        batch_op.create_index(
            batch_op.f("user_consents_created_at_idx"), ["created_at"], unique=False
        )

    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table("user_consents", schema=None) as batch_op:
        batch_op.drop_index(batch_op.f("user_consents_created_at_idx"))

    op.drop_table("user_consents")
    # ### end Alembic commands ###
