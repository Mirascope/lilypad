"""add parent status to spans and remove foreign key constraint

Revision ID: 0039
Revises: 0038
Create Date: 2025-05-27 17:43:46.824128

"""

from collections.abc import Sequence

import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = "0039"
down_revision: str | None = "0038"
branch_labels: str | Sequence[str] | None = None
depends_on: str | Sequence[str] | None = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    # Add parent_status column and indexes
    sa.Enum("RESOLVED", "PENDING", "ORPHANED", name="parentstatus").create(
        op.get_bind()
    )
    with op.batch_alter_table("spans", schema=None) as batch_op:
        batch_op.add_column(
            sa.Column(
                "parent_status",
                postgresql.ENUM(
                    "RESOLVED",
                    "PENDING",
                    "ORPHANED",
                    name="parentstatus",
                    create_type=False,
                ),
                nullable=False,
                server_default="RESOLVED",
            )
        )
        batch_op.create_index(
            "idx_spans_parent_status", ["parent_status"], unique=False
        )
        batch_op.create_index(
            "idx_spans_pending_parent",
            ["parent_span_id", "parent_status"],
            unique=False,
        )

    # Remove the foreign key constraint to allow child spans before parents
    try:
        with op.batch_alter_table("spans", schema=None) as batch_op:
            batch_op.drop_constraint(
                "spans_parent_span_id_spans_fkey", type_="foreignkey"
            )
    except Exception:
        # Constraint might already be removed or have different name
        pass
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    # Restore the foreign key constraint
    with op.batch_alter_table("spans", schema=None) as batch_op:
        batch_op.create_foreign_key(
            "spans_parent_span_id_spans_fkey",
            "spans",
            ["parent_span_id"],
            ["span_id"],
            ondelete="CASCADE",
        )

    # Remove parent_status column and indexes
    with op.batch_alter_table("spans", schema=None) as batch_op:
        batch_op.drop_index("idx_spans_pending_parent")
        batch_op.drop_index("idx_spans_parent_status")
        batch_op.drop_column("parent_status")

    sa.Enum("RESOLVED", "PENDING", "ORPHANED", name="parentstatus").drop(op.get_bind())
    # ### end Alembic commands ###
