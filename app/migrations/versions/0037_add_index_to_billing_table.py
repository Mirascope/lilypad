"""Add index to billing table

Revision ID: 0037
Revises: 0036
Create Date: 2025-05-12 16:26:21.472559

"""

from collections.abc import Sequence

import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = "0037"
down_revision: str | None = "0036"
branch_labels: str | Sequence[str] | None = None
depends_on: str | Sequence[str] | None = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    sa.Enum(
        "ACTIVE",
        "PAST_DUE",
        "UNPAID",
        "CANCELED",
        "INCOMPLETE",
        "INCOMPLETE_EXPIRED",
        "TRIALING",
        "PAUSED",
        name="subscriptionstatus",
    ).create(op.get_bind())
    with op.batch_alter_table("billings", schema=None) as batch_op:
        batch_op.alter_column(
            "subscription_status",
            existing_type=sa.VARCHAR(),
            type_=sa.Enum(
                "ACTIVE",
                "PAST_DUE",
                "UNPAID",
                "CANCELED",
                "INCOMPLETE",
                "INCOMPLETE_EXPIRED",
                "TRIALING",
                "PAUSED",
                name="subscriptionstatus",
            ),
            existing_nullable=True,
            postgresql_using="subscription_status::subscriptionstatus",
        )
        batch_op.alter_column(
            "subscription_current_period_start",
            existing_type=postgresql.TIMESTAMP(),
            type_=sa.DateTime(timezone=True),
            existing_nullable=True,
        )
        batch_op.alter_column(
            "subscription_current_period_end",
            existing_type=postgresql.TIMESTAMP(),
            type_=sa.DateTime(timezone=True),
            existing_nullable=True,
        )
        batch_op.alter_column(
            "last_usage_report",
            existing_type=postgresql.TIMESTAMP(),
            type_=sa.DateTime(timezone=True),
            existing_nullable=True,
        )
        batch_op.create_index(
            batch_op.f("billings_stripe_subscription_id_idx"),
            ["stripe_subscription_id"],
            unique=False,
        )
        batch_op.create_unique_constraint(
            "uix_billing_stripe_subscription_id", ["stripe_subscription_id"]
        )

    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table("billings", schema=None) as batch_op:
        batch_op.drop_constraint("uix_billing_stripe_subscription_id", type_="unique")
        batch_op.drop_index(batch_op.f("billings_stripe_subscription_id_idx"))
        batch_op.alter_column(
            "last_usage_report",
            existing_type=sa.DateTime(timezone=True),
            type_=postgresql.TIMESTAMP(),
            existing_nullable=True,
        )
        batch_op.alter_column(
            "subscription_current_period_end",
            existing_type=sa.DateTime(timezone=True),
            type_=postgresql.TIMESTAMP(),
            existing_nullable=True,
        )
        batch_op.alter_column(
            "subscription_current_period_start",
            existing_type=sa.DateTime(timezone=True),
            type_=postgresql.TIMESTAMP(),
            existing_nullable=True,
        )
        batch_op.alter_column(
            "subscription_status",
            existing_type=sa.Enum(
                "ACTIVE",
                "PAST_DUE",
                "UNPAID",
                "CANCELED",
                "INCOMPLETE",
                "INCOMPLETE_EXPIRED",
                "TRIALING",
                "PAUSED",
                name="subscriptionstatus",
            ),
            type_=sa.VARCHAR(),
            existing_nullable=True,
        )

    sa.Enum(
        "ACTIVE",
        "PAST_DUE",
        "UNPAID",
        "CANCELED",
        "INCOMPLETE",
        "INCOMPLETE_EXPIRED",
        "TRIALING",
        "PAUSED",
        name="subscriptionstatus",
    ).drop(op.get_bind())
    # ### end Alembic commands ###
