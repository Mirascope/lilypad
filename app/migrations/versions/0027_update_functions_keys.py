"""update functions keys

Revision ID: 0027
Revises: 0026
Create Date: 2025-03-25 13:12:30.876103

"""

from collections.abc import Sequence

import sqlalchemy as sa
from alembic import op
from alembic_postgresql_enum import TableReference

# revision identifiers, used by Alembic.
revision: str = "0027"
down_revision: str | None = "0026"
branch_labels: str | Sequence[str] | None = None
depends_on: str | Sequence[str] | None = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table("annotations", schema=None) as batch_op:
        batch_op.add_column(sa.Column("function_uuid", sa.Uuid(), nullable=True))
        batch_op.drop_constraint(
            "annotations_generation_uuid_generations_fkey", type_="foreignkey"
        )
        batch_op.create_foreign_key(
            batch_op.f("annotations_function_uuid_functions_fkey"),
            "functions",
            ["function_uuid"],
            ["uuid"],
            ondelete="CASCADE",
        )
        batch_op.drop_column("generation_uuid")

    with op.batch_alter_table("api_keys", schema=None) as batch_op:
        batch_op.alter_column(
            "environment_uuid", existing_type=sa.UUID(), nullable=True
        )

    with op.batch_alter_table("deployments", schema=None) as batch_op:
        batch_op.add_column(sa.Column("function_uuid", sa.Uuid(), nullable=False))
        batch_op.drop_constraint(
            "deployments_generation_uuid_generations_fkey", type_="foreignkey"
        )
        batch_op.create_foreign_key(
            batch_op.f("deployments_function_uuid_functions_fkey"),
            "functions",
            ["function_uuid"],
            ["uuid"],
            ondelete="CASCADE",
        )
        batch_op.drop_column("generation_uuid")

    with op.batch_alter_table("functions", schema=None) as batch_op:
        batch_op.add_column(sa.Column("is_versioned", sa.Boolean(), nullable=True))
        batch_op.drop_index("generations_archived_idx")
        batch_op.drop_index("generations_created_at_idx")
        batch_op.drop_index("generations_custom_id_idx")
        batch_op.drop_index("generations_hash_idx")
        batch_op.drop_index("generations_is_default_idx")
        batch_op.drop_index("generations_is_managed_idx")
        batch_op.drop_index("generations_name_idx")
        batch_op.drop_index("generations_organization_uuid_idx")
        batch_op.create_index(
            batch_op.f("functions_archived_idx"), ["archived"], unique=False
        )
        batch_op.create_index(
            batch_op.f("functions_created_at_idx"), ["created_at"], unique=False
        )
        batch_op.create_index(
            batch_op.f("functions_custom_id_idx"), ["custom_id"], unique=False
        )
        batch_op.create_index(batch_op.f("functions_hash_idx"), ["hash"], unique=False)
        batch_op.create_index(
            batch_op.f("functions_is_versioned_idx"), ["is_versioned"], unique=False
        )
        batch_op.create_index(batch_op.f("functions_name_idx"), ["name"], unique=False)
        batch_op.create_index(
            batch_op.f("functions_organization_uuid_idx"),
            ["organization_uuid"],
            unique=False,
        )
        batch_op.drop_column("is_default")
        batch_op.drop_column("is_managed")

    with op.batch_alter_table("spans", schema=None) as batch_op:
        batch_op.add_column(sa.Column("function_uuid", sa.Uuid(), nullable=True))
        batch_op.drop_constraint(
            "spans_generation_uuid_generations_fkey", type_="foreignkey"
        )
        batch_op.create_foreign_key(
            batch_op.f("spans_function_uuid_functions_fkey"),
            "functions",
            ["function_uuid"],
            ["uuid"],
            ondelete="CASCADE",
        )
        batch_op.drop_column("generation_uuid")
    op.sync_enum_values(  # type: ignore[attr-defined]
        enum_schema="public",
        enum_name="spantype",
        new_values=["FUNCTION", "TRACE"],
        affected_columns=[
            TableReference(
                table_schema="public", table_name="spans", column_name="type"
            )
        ],
        enum_values_to_rename=[("GENERATION", "FUNCTION")],
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.sync_enum_values(  # type: ignore[attr-defined]
        enum_schema="public",
        enum_name="spantype",
        new_values=["GENERATION", "TRACE"],
        affected_columns=[
            TableReference(
                table_schema="public", table_name="spans", column_name="type"
            )
        ],
        enum_values_to_rename=[("FUNCTION", "GENERATION")],
    )
    with op.batch_alter_table("spans", schema=None) as batch_op:
        batch_op.add_column(
            sa.Column("generation_uuid", sa.UUID(), autoincrement=False, nullable=True)
        )
        batch_op.drop_constraint(
            batch_op.f("spans_function_uuid_functions_fkey"), type_="foreignkey"
        )
        batch_op.create_foreign_key(
            "spans_generation_uuid_generations_fkey",
            "functions",
            ["generation_uuid"],
            ["uuid"],
            ondelete="CASCADE",
        )
        batch_op.drop_column("function_uuid")

    with op.batch_alter_table("functions", schema=None) as batch_op:
        batch_op.add_column(
            sa.Column("is_managed", sa.BOOLEAN(), autoincrement=False, nullable=True)
        )
        batch_op.add_column(
            sa.Column("is_default", sa.BOOLEAN(), autoincrement=False, nullable=True)
        )
        batch_op.drop_index(batch_op.f("functions_organization_uuid_idx"))
        batch_op.drop_index(batch_op.f("functions_name_idx"))
        batch_op.drop_index(batch_op.f("functions_is_versioned_idx"))
        batch_op.drop_index(batch_op.f("functions_hash_idx"))
        batch_op.drop_index(batch_op.f("functions_custom_id_idx"))
        batch_op.drop_index(batch_op.f("functions_created_at_idx"))
        batch_op.drop_index(batch_op.f("functions_archived_idx"))
        batch_op.create_index(
            "generations_organization_uuid_idx", ["organization_uuid"], unique=False
        )
        batch_op.create_index("generations_name_idx", ["name"], unique=False)
        batch_op.create_index(
            "generations_is_managed_idx", ["is_managed"], unique=False
        )
        batch_op.create_index(
            "generations_is_default_idx", ["is_default"], unique=False
        )
        batch_op.create_index("generations_hash_idx", ["hash"], unique=False)
        batch_op.create_index("generations_custom_id_idx", ["custom_id"], unique=False)
        batch_op.create_index(
            "generations_created_at_idx", ["created_at"], unique=False
        )
        batch_op.create_index("generations_archived_idx", ["archived"], unique=False)
        batch_op.drop_column("is_versioned")

    with op.batch_alter_table("deployments", schema=None) as batch_op:
        batch_op.add_column(
            sa.Column("generation_uuid", sa.UUID(), autoincrement=False, nullable=False)
        )
        batch_op.drop_constraint(
            batch_op.f("deployments_function_uuid_functions_fkey"), type_="foreignkey"
        )
        batch_op.create_foreign_key(
            "deployments_generation_uuid_generations_fkey",
            "functions",
            ["generation_uuid"],
            ["uuid"],
            ondelete="CASCADE",
        )
        batch_op.drop_column("function_uuid")

    with op.batch_alter_table("api_keys", schema=None) as batch_op:
        batch_op.alter_column(
            "environment_uuid", existing_type=sa.UUID(), nullable=False
        )

    with op.batch_alter_table("annotations", schema=None) as batch_op:
        batch_op.add_column(
            sa.Column("generation_uuid", sa.UUID(), autoincrement=False, nullable=True)
        )
        batch_op.drop_constraint(
            batch_op.f("annotations_function_uuid_functions_fkey"), type_="foreignkey"
        )
        batch_op.create_foreign_key(
            "annotations_generation_uuid_generations_fkey",
            "functions",
            ["generation_uuid"],
            ["uuid"],
            ondelete="CASCADE",
        )
        batch_op.drop_column("function_uuid")

    # ### end Alembic commands ###
