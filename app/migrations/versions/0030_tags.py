"""tags

Revision ID: 0030
Revises: 0029
Create Date: 2025-04-04 09:30:30.847794

"""

from collections.abc import Sequence

import sqlalchemy as sa
from alembic import op
from sqlmodel.sql.sqltypes import AutoString

# revision identifiers, used by Alembic.
revision: str = "0030"
down_revision: str | None = "0029"
branch_labels: str | Sequence[str] | None = None
depends_on: str | Sequence[str] | None = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "tags",
        sa.Column("uuid", sa.Uuid(), nullable=False),
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("organization_uuid", sa.Uuid(), nullable=False),
        sa.Column("project_uuid", sa.Uuid(), nullable=True),
        sa.Column("name", AutoString(), nullable=False),
        sa.ForeignKeyConstraint(
            ["organization_uuid"],
            ["organizations.uuid"],
            name=op.f("tags_organization_uuid_organizations_fkey"),
            ondelete="CASCADE",
        ),
        sa.ForeignKeyConstraint(
            ["project_uuid"],
            ["projects.uuid"],
            name=op.f("tags_project_uuid_projects_fkey"),
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("uuid", name=op.f("tags_pkey")),
        sa.UniqueConstraint(
            "organization_uuid", "project_uuid", "name", name="unique_tag_name"
        ),
    )
    with op.batch_alter_table("tags", schema=None) as batch_op:
        batch_op.create_index(
            batch_op.f("tags_created_at_idx"), ["created_at"], unique=False
        )
        batch_op.create_index(
            batch_op.f("tags_organization_uuid_idx"),
            ["organization_uuid"],
            unique=False,
        )
        batch_op.create_index(
            batch_op.f("tags_project_uuid_idx"), ["project_uuid"], unique=False
        )

    op.create_table(
        "span_tags",
        sa.Column("span_uuid", sa.Uuid(), nullable=False),
        sa.Column("tag_uuid", sa.Uuid(), nullable=False),
        sa.ForeignKeyConstraint(
            ["span_uuid"], ["spans.uuid"], name=op.f("span_tags_span_uuid_spans_fkey")
        ),
        sa.ForeignKeyConstraint(
            ["tag_uuid"], ["tags.uuid"], name=op.f("span_tags_tag_uuid_tags_fkey")
        ),
        sa.PrimaryKeyConstraint("span_uuid", "tag_uuid", name=op.f("span_tags_pkey")),
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("span_tags")
    with op.batch_alter_table("tags", schema=None) as batch_op:
        batch_op.drop_index(batch_op.f("tags_project_uuid_idx"))
        batch_op.drop_index(batch_op.f("tags_organization_uuid_idx"))
        batch_op.drop_index(batch_op.f("tags_created_at_idx"))

    op.drop_table("tags")
    # ### end Alembic commands ###
