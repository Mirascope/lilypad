"""add envrionment_uuid to span

Revision ID: 0044
Revises: 0043
Create Date: 2025-06-27 08:52:48.116598

"""

from collections.abc import Sequence

import sqlalchemy as sa
from alembic import op
from sqlmodel import text

# revision identifiers, used by Alembic.
revision: str = "0044"
down_revision: str | None = "0043"
branch_labels: str | Sequence[str] | None = None
depends_on: str | Sequence[str] | None = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table("spans", schema=None) as batch_op:
        batch_op.add_column(sa.Column("environment_uuid", sa.Uuid(), nullable=True))
        batch_op.create_index(
            batch_op.f("spans_environment_uuid_idx"), ["environment_uuid"], unique=False
        )
        batch_op.create_foreign_key(
            batch_op.f("spans_environment_uuid_environments_fkey"),
            "environments",
            ["environment_uuid"],
            ["uuid"],
            ondelete="CASCADE",
        )

    # Data migration should be outside the batch_alter_table context
    batch_size = 10000
    op.execute(
        text("""
        DO $$
        DECLARE
            rows_updated INTEGER;
        BEGIN
            LOOP
                UPDATE spans s
                SET environment_uuid = (
                    SELECT e.uuid 
                    FROM environments e 
                    INNER JOIN api_keys ak ON ak.environment_uuid = e.uuid
                    WHERE ak.project_uuid = s.project_uuid 
                    ORDER BY e.created_at ASC
                    LIMIT 1
                )
                WHERE s.uuid IN (
                    SELECT uuid 
                    FROM spans 
                    WHERE environment_uuid IS NULL 
                    AND project_uuid IS NOT NULL
                    LIMIT :batch_size
                );
                
                GET DIAGNOSTICS rows_updated = ROW_COUNT;
                
                IF rows_updated = 0 THEN
                    EXIT;
                END IF;
                
                -- Optional: Add a small delay to reduce load
                PERFORM pg_sleep(0.1);
            END LOOP;
        END $$;
    """).bindparams(batch_size=batch_size)
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table("spans", schema=None) as batch_op:
        batch_op.drop_constraint(
            batch_op.f("spans_environment_uuid_environments_fkey"), type_="foreignkey"
        )
        batch_op.drop_index(batch_op.f("spans_environment_uuid_idx"))
        batch_op.drop_column("environment_uuid")

    # ### end Alembic commands ###
