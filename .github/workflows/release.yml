name: release
run-name: ${{ github.actor }} is releasing ${{ github.ref_name }}

on:
  release:
    types: [published]

permissions:
  contents: write

jobs:
  detect-components:
    runs-on: ubuntu-latest
    outputs:
      release-python: ${{ steps.set-components.outputs.release-python }}
      create-tags: ${{ steps.set-components.outputs.create-tags }}
    steps:
      - name: Determine components to release from tag
        id: set-components
        run: |
          TAG_NAME="${{ github.ref_name }}"
          if [[ $TAG_NAME == py/* ]]; then
            echo "release-python=true" >> $GITHUB_OUTPUT
            echo "create-tags=false" >> $GITHUB_OUTPUT
          elif [[ $TAG_NAME == app/* ]]; then
            echo "release-python=false" >> $GITHUB_OUTPUT
            echo "create-tags=false" >> $GITHUB_OUTPUT
          elif [[ $TAG_NAME == v* ]]; then
            # Release Python SDK and create both tags
            echo "release-python=true" >> $GITHUB_OUTPUT
            echo "create-tags=true" >> $GITHUB_OUTPUT
          else
            echo "Unknown tag format: $TAG_NAME"
            echo "Expected: py/*, app/*, or v*"
            exit 1
          fi

  create-component-tags:
    needs: detect-components
    if: needs.detect-components.outputs.create-tags == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Create component tags
        run: |
          TAG_NAME="${{ github.ref_name }}"
          # Extract version from v* tag (e.g., v1.2.3 -> 1.2.3)
          VERSION=${TAG_NAME#v}

          # Configure git
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"

          # Create and push app tag
          git tag "app/v${VERSION}" -m "App release v${VERSION}"
          git push origin "app/v${VERSION}"

          # Create and push py tag
          git tag "py/v${VERSION}" -m "Python SDK release v${VERSION}"
          git push origin "py/v${VERSION}"

  release-python:
    needs: [detect-components, create-component-tags]
    if: needs.detect-components.outputs.release-python == 'true'
    runs-on: ubuntu-latest
    environment: release
    permissions:
      id-token: write
    steps:
      - uses: actions/checkout@v3

      - name: Set up uv
        run: curl -LsSf https://astral.sh/uv/0.7.8/install.sh | sh

      - name: Set up Python
        run: uv python install 3.10

      - name: Build Python SDK Package
        working-directory: ./sdks/python
        run: uv build

      - name: Publish Python SDK Package
        working-directory: ./sdks/python
        run: uv publish
